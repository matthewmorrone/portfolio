var M = 0,
    X = 1,
    Y = 2,
    Z = 3,
    U = 4,
    V = 5,
    W = 6,
    NCOORDS = 7,
    NPHYS = 4,
    AU = 14959787e6,
    MSUN = 1.98892e33,
    MJUP = 1.8986e30,
    MEARTH = 5.97219e27,
    RJUP = 71e8,
    RSUN = 696e8,
    REARTH = 63e7,
    GGRAV = 6.67384e-8,
    MIN_DISTANCE = 300 * RJUP / AU,
    DAY = 86400,
    TWOPI = 6.2831853072,
    SQRT_TWOPI = 2.5066282746,
    K2 = GGRAV * MSUN * DAY * DAY / (AU * AU * AU),
    YEAR = 31556926;
NBODIES = 12,
nbodies = 1;
var System = function()
{
    var e = [],
        t = [],
        o = [],
        n = null,
        r = new Float64Array(NCOORDS),
        s = function (i)
        {
            var r;
            for (r = 0; NBODIES > r; r++)
            {
            	e.push(new Float64Array(NCOORDS)), t.push(new Float64Array(NPHYS)), o.push(new Float64Array(NPHYS));
            }
            e[0][M] = 1 * K2, h(), n = i
        },
        a = function (t, o, n, i, r)
        {
            if (!(nbodies >= NBODIES))
            {
                e[nbodies][X] = o, e[nbodies][Y] = n, console.log(o, n), o -= e[0][X], n -= e[0][Y], console.log(o, n);
                var s = Math.sqrt(o * o + n * n);
                e[nbodies][M] = t * K2;
                var a = Math.sqrt((e[0][M] + e[nbodies][M]) / s);
                void 0 === i ? (e[nbodies][U] = a * (-n / s), e[nbodies][V] = a * (o / s)) : (e[nbodies][U] = i, e[nbodies][V] = r), console.log(o, n), console.log(Math.sqrt(o * o + n * n)), nbodies++, h()
            }
        },
        l = function()
        {
            var t, o;
            for (t = 0; NCOORDS > t; t++) {r[t] = 0;}
            for (t = 0; nbodies > t; t++)
            {
            	for (r[M] += e[t][M], o = 0; NCOORDS > o; o++)
            	{
            		r[o] += e[t][o] * e[t][M];
            	}
            }
            for (r[X] /= r[M], r[Y] /= r[M], r[Z] /= r[M], r[U] /= r[M], r[V] /= r[M], r[W] /= r[M], t = 0; nbodies > t; t++)
            {
                for (o = X; W >= o; o++)
                {
                	e[t][o] -= r[o]
                }
            }
        },
    	h = function()
        {
            var n, i;
            for (n = 0; nbodies > n; n++)
            {
            	for (o[n].set(t[n]), i = 0; NPHYS > i; i++)
            	{
            		t[n][i] = 0;
            	}
            }
            for (n = 0; nbodies * NCOORDS > n; n++)
            {
                for (i = n + 1; nbodies > i; i++)
                {
                    var r = e[n][M],
                        s = e[i][M],
                        a = e[n][X] - e[i][X],
                        l = e[n][Y] - e[i][Y],
                        h = e[n][Z] - e[i][Z],
                        c = 1 / (a * a + l * l + h * h),
                        p = Math.sqrt(c);
                    if (MIN_DISTANCE > p)
                    {
                    	return UI.crash(n, i), void 0;
                    }
                    var m = -s * c * p,
                        u = -r * c * p;
                    t[n][X] += a * m, t[i][X] -= a * u, t[n][Y] += l * m, t[i][Y] -= l * u, t[n][Z] += h * m, t[i][Z] -= h * u
                }
            }
        },
        c = 0,
        p = .5,
        m = p * p,
        u = function (e)
        {
            p = e, m = p * p
        },
        d = function (t)
        {
            e[0][M] = t * K2
        },
        f = function (n)
        {
            n = 1 | n;
            for (var r = 0; n > r; r++)
            {
                var s;
                for (i = 0; nbodies > i; i++)
                {
                	for (s = X; Z >= s; s++)
                	{
                		e[i][s] += e[i][s + 3] * p + .5 * m * t[i][s];
                	}
                }
                for (h(), i = 0; nbodies > i; i++)
                {
                    for (s = X; Z >= s; s++)
                    {
                    	e[i][s + 3] += .5 * p * (t[i][s] + o[i][s]);
                    }
                }
                c += p
            }
            return e
        },
        S = function()
        {
            for (var t = 0; nbodies > t; t++) console.log(e[t][0] - e[0][0], e[t][1] - e[0][1], e[t][2] - e[0][2], e[t][3] - e[0][3], e[t][4] - e[0][4], e[t][5] - e[0][5], e[t][6] - e[0][6]), console.log(Math.sqrt(sqr(e[t][X] - e[0][X]) + sqr(e[t][Y] - e[0][Y])));
            console.log(nbodies, c), console.log("-----------------")
        },
        E = function()
        {
            a(.001, 1.5, 0), a(.001, 1.5, 0), a(.001, 1.5, 0), a(.001, 1.5, 0), a(.001, 1.5, 0), l(), console.time("Start"), f(1e5), console.timeEnd("Start"), alert()
        },
        b = function()
        {
            return c
        },
        v = function()
        {
            for (var t = [], o = 0; nbodies > o; o++) t[o] = e[o][M];
            return t
        };
    return {
        init: s,
        xyz: e,
        evolve: f,
        addPlanet: a,
        benchmark: E,
        print: S,
        time: b,
        center: l,
        masses: v,
        setDt: u,
        setMstar: d
    }
}();
Math.log10 = function (e)
{
    return Math.log(e) / Math.LN10
}, TAIL_LENGTH = 0, SPEED = 16, STOPPED = 0, CRASHED_BARRIER = !1, VIEW_ONLY = null != _.parameter("view"), IS_MOBILE = null != _.parameter("mobile"), IS_TEMPLATE = null != _.parameter("np"), HABITABLE_ZONE_MIN_2 = .522729, HABITABLE_ZONE_MAX_2 = 2.322576, IN_HABITABLE = 0;
var UI = function()
{
    function e()
    {
        if (VIEW_ONLY || IS_TEMPLATE)
        {
            if (VIEW_ONLY) $("#cfg").html("You are watching the pre-recorded evolution of this system. Sit back and relax...<hr>"), $.get("hiscore.php",
            {
                view: _.parameter("view"),
                token: TOKEN
            }, function (e)
            {
                console.log(e), I = JSON.parse(e), $("#popup").hide(), $("#pop-help").hide()
            });
            else if (_.parameter("np"))
            {
                b = .1;
                for (var e = 1; e <= _.parameter("np") | 0; e++)
                {
                    var t = +_.parameter("x" + e),
                        o = +_.parameter("y" + e),
                        n = +_.parameter("vx" + e),
                        i = +_.parameter("vy" + e),
                        a = +_.parameter("m" + e);
                    b = Math.max(b, 1.25 * Math.sqrt(t * t + o * o)), r(t, o, n, i, a, !0)
                }
                System.center(), SPEED = +_.parameter("speed"), _.parameter("dt") && System.setDt(+_.parameter("dt")), y = .98 * b, v = .05 * b
            }
        }
        else
        {
            var l = (Math.pow(10, Math.log10(S) + Math.random() * (Math.log10(E) - Math.log10(S))), v + Math.random() * (y - v));
            r(l, 0)
        }
        SCALE = IS_MOBILE ? .45 * Math.min(window.innerHeight, window.innerWidth) / b : .45 * Math.min(window.innerHeight, window.innerWidth - 520) / b, $.get("hiscore.php?hiscores=" + Math.random() + "&token=" + TOKEN, null, function (e)
        {
            $("#highscores-list").html(e)
        })
        .fail(function()
        {
            $("#highscores-list").html("Could not load highscores. Maybe too many people are playing and the server is super planet crashing?")
        }),
        $(".mass-sel").click(function()
        {
            A = 0 | $(this).data("points"), A *= MEARTH / MSUN, N = $(this).text(), $("#masses li.active").removeClass("active"), $(this).parent("li").addClass("active")
        }),
        $("#pause").click(function()
        {
            STOPPED = !STOPPED, STOPPED ? $("#pause").html('<span class="glyphicon glyphicon-play"></span>') : $("#pause").html('<span class="glyphicon glyphicon-pause"></span>')
        }),
        $("#stop").click(c), $("#help").click(function()
        {
            $("#popup").show(500), $("#pop-help").show(), $("#pop-why").hide(), $("#pop-points").hide()
        }),
        // $("#pop-highscores").hide(), $("#pop-points").hide(), $("#screenshot").click(function()
        // {
        //     var e = document.getElementById("universe"),
        //         t = e.getContext("2d");
        //     t.fillStyle = "white", t.font = "16px Exo", t.fillText("Super Planet Crash - Brought to you by Stefano Meschiari - http://www.stefanom.org/spc", 20, 30);
        //     var o = e.toDataURL("image/png");
        //     window.open(o, "_blank")
        // }),
        // $("#hiscore-form").submit(function (e)
        // {
        //     return e.preventDefault(), $("#hiscore-submit").css("disabled", "true"), $("#hiscore-submit").html("Submitting..."), $("#hiscore-points").val(s()), $("#hiscore-years").val(h()), "" == $("#hiscore-name").val().trim() ? (alert("Insert a name."), void 0) : ($.post("hiscore.php?token=" + TOKEN, $(this).serialize(), function (e)
        //     {
        //         alert("High score saved!\nYou are in position #" + ((0 | e) + 1)), location.href = BASEURL
        //     }), void 0)
        // }),
        // $("#hiscore-url-full").click(function()
        // {
        //     $(this).select()
        // }),
        $("#faster").click(function()
        {
            SPEED *= 2, SPEED > 50 && (SPEED = 50)
        }),
        $("#slower").click(function()
        {
            SPEED = Math.round(.5 * SPEED), 1 > SPEED && (SPEED = 1)
        }),
        $("#templates").change(function()
        {
            var e = $("#templates :selected").text();
            if (console.log(e), console.log(templates[e]), templates[e])
            {
                var t = templates[e],
                    o = t.x.length,
                    n = BASEURL + "?np=" + o;
                console.log(e), console.log(n);
                for (var i = 0; o > i; i++) n += "&m" + (i + 1) + "=" + t.x[i][0], n += "&x" + (i + 1) + "=" + t.x[i][1], n += "&y" + (i + 1) + "=" + t.x[i][2], n += "&vx" + (i + 1) + "=" + t.x[i][4], n += "&vy" + (i + 1) + "=" + t.x[i][5];
                n += "&speed=" + t.x[0][7], t.dt && (n += "&dt=" + t.dt), t.mstar && System.setMstar(t.mstar), n += "&system=" + e, location.href = n
            }
        }),
        $("#newgame").click(function()
        {
            location.href = BASEURL
        }),
        $("a.spc").attr("href", BASEURL)
    }

    function t()
    {
        if (VIEW_ONLY && null == I)
        {
        	return null;
        }
        for (var e, t = 0; SPEED > t; t++)
        {
            if (o(1), VIEW_ONLY)
            {
            	for (var n = I.length - 1; n >= 0;)
            	{
            		I[n].mstar ? System.xyz[0][M] = I[n].mstar * K2 : I[n].time < System.time() && (A = I[n].mass, r(I[n].x, I[n].y, I.u, I[n].v), I.splice(n, 1)), n--;
            	}
            }
            e = System.evolve()
        }
        return w(), e
    }

    function o(e)
    {
        var t = 0,
            o = System.xyz,
            n = [];
        for (O = 1, IN_HABITABLE = 0, i = 1; nbodies > i; i++)
        {
            t += o[i][M] / K2 * MSUN / MEARTH;
            var r = o[i][X] * o[i][X] + o[i][Y] * o[i][Y];
            n[i - 1] = r, r > HABITABLE_ZONE_MIN_2 && HABITABLE_ZONE_MAX_2 > r && (O++, IN_HABITABLE++)
        }
        nbodies > 2 && (x = Math.max(Math.min(1 / _.sd(n), 10), 1)), t *= e / 1826.25 * x * O, f += t
    }

    function n()
    {
        if (nbodies != R)
        {
            $("#nplanets").text(nbodies + " / " + NBODIES + " bodies");
            var e = System.xyz;
            $("#planets-list").html("");
            for (var t = 1; nbodies > t; t++)
            {
                var o = " [" + (e[t][M] / K2 * MSUN / MEARTH).toFixed(2) + " M<sub>earth</sub>] ",
                    n = $('<div class="planet" id="pla' + t + '"><span style="color:' + COLORS[t] + '"> Planet ' + t + o + "</span></div><hr>");
                $("#planets-list").append(n)
            }
            R = nbodies
        }
    }

    function r(e, t, o, i, r, s)
    {
    	// if (STOPPED) {!STOPPED;}
        if (nbodies != NBODIES)
        {
            var a = Math.sqrt(e * e + t * t);
            if (v > a && !s)
            {
            	e *= v / a;
            	t *= v / a;
            }
            else if (a > y)
            {
            	return;
            }

            r || (r = A);
            console.log(r);
            System.addPlanet(r, e, t, o, i);
            s || System.center(), n();

            var l = System.xyz;
            P.push(
            {
                time: System.time(),
                mass: A,
                x: l[nbodies - 1][X],
                y: l[nbodies - 1][Y],
                z: l[nbodies - 1][Z],
                u: l[nbodies - 1][U],
                v: l[nbodies - 1][V],
                w: l[nbodies - 1][W]
            })
        }
    }

    function s()
    {
        return Math.round(f)
    }

    function a()
    {
        var e = s(),
            t = "Starting points: <b class=pull-right>" + _.numberWithCommas(e) + "</b>";
        return 12 == nbodies && (t += "<br>+ 12 planets combo: <b class=pull-right>" + _.numberWithCommas(T) + "</b>", e += T), _.uniq(System.masses()).length >= 6 && (t += "<br>+ Planetary variety combo: <b class=pull-right>" + _.numberWithCommas(D) + "</b>", e += D), _.filter(System.masses(), function (e)
        {
            return 2 * MEARTH / MSUN > e / K2
        }).length >= 3 && (t += "<br>+ Earth bonanza combo: <b class=pull-right>" + _.numberWithCommas(B) + "</b>", e += B), $("#pop-points-calc").html(t), e
    }

    function l(e)
    {
        e /= K2;
        var t, o = e * MSUN / MJUP;
        return o > .29 && 13 > o ? t = 1 : .29 > o ? t = Math.sqrt(o * MJUP / MEARTH) * REARTH / RJUP : o > 13 && (t = Math.sqrt(e) * RSUN / RJUP), t = Math.floor(20 * Math.pow(t, .25))
    }

    function h()
    {
        return (System.time() / 365.25).toFixed(1)
    }

    function c()
    {
        STOPPED = !0, $("#pause").attr("disabled", !0), $("#stop").text("New game"), $("#stop").click(function()
        {
            location.href = BASEURL
        }),
        VIEW_ONLY || ($("#pop-help").hide(), $("#pop-points").show(), $("#pop-points-tot").text(_.numberWithCommas(a())), $("#pop-years-tot").text(h()), $("#popup").show(500), IS_TEMPLATE ? $("#hiscore-form").css("display", "none") : $.post("hiscore.php?saveurl=true&token=" + TOKEN,
        {
            history: JSON.stringify(P)
        },
        function (e)
        {
            console.log(e), $("#hiscore-url-full").val(BASEURL + "?view=" + e), $("#hiscore-url").val(e), $("#hiscore-submit").attr("disabled", !1), $("#hiscore-name").attr("placeholder", "Your Name")
        }))
    }

    function p(e, t)
    {
        $("#pop-why").show(), $("#pop-why").html("Bodies " + e + " and " + t + " crashed!<hr>"), c()
    }

    function m()
    {
        for (var e = System.xyz, t = 0; nbodies > t; t++)
        {
        	e[t][X] * e[t][X] + e[t][Y] * e[t][Y] > b * b && (STOPPED = !0, $("#pop-why").show(), $("#pop-why").html("Body #" + t + " crashed against the barrier at " + b.toFixed(2) + " AU!<hr>"));
    	}
        STOPPED && (CRASHED_BARRIER = !0, c()), h() > g && ($("#pop-why").show(), $("#pop-why").html("Congrats! You reached " + g + " years without going unstable!<hr>"), c())
   		// $("title").html("orbiting...")
    }

    function u()
    {
        return N
    }

    function d()
    {
        return b
    }
    var f = 0,
        S = MEARTH / MSUN,
        E = .1,
        b = 2,
        v = .15 * b,
        y = .98 * b,
        g = 250,
        A = MEARTH / MSUN,
        N = "1x\nEarth",
        P = [],
        I = null,
        x = 1,
        O = 1,
        w = _.throttle(function()
        {
            $("#time").html("Years:<br>" + UI.years() + "/500"),
            $("#points").html("Points:<br>" + _.numberWithCommas(UI.points())),
            $("#bonus").html("Crowdedness bonus: " + x.toFixed(1) + "x<br>Habitability bonus: " + O.toFixed(1) + "x<br>Central star: " + (System.xyz[0][M] / K2).toFixed(1) + "x<br>Speed: " + SPEED + "x")
        },
        1e3),
        R = -1,
        T = 1e5,
        D = 1e4,
        B = 2500;
    return {
        init: e,
        evolve: t,
        mtor: l,
        years: h,
        points: s,
        addPlanetAt: r,
        stop: c,
        crash: p,
        check: m,
        planetType: u,
        maxSemiMajorAxis: d
    }
}();
$(document).ready(function()
{
    System.init(UI), UI.init(), _.parameter("benchmark") && System.benchmark()
});
