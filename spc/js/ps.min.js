function onResize()
{
    scaleCircle.position = view.center, habCircle.position = view.center;
    for (var e = 0; NBODIES > e; e++) tail[e].removeSegments();
    helpLabel.position = new Point(view.center.x, habCircle.bounds.top - 60), help2Label.position = new Point(view.center.x, habCircle.bounds.bottom + 60), habLabel.position = new Point(view.center.x, habCircle.bounds.top + 15), scaleLabel.position = new Point(view.center.x, scaleCircle.bounds.bottom - 15)
}

function onMouseMove()
{}

function hideHelp()
{
    helpLabel.visible = !1, help2Label.visible = !1, habLabel.visible = !1, habCircle.initialShow = !1
}

function smokeAt(e, i)
{
    var t = new Path.Circle(
    {
        radius: 10,
        fillColor: COLORS[i],
        center: new Point(e.point.x, e.point.y),
        opacity: .8
    }),
        o = setInterval(function ()
        {
            var e = .7;
            t.opacity *= e, t.scale(.8 / e), t.opacity < .01 && (t.remove(), clearInterval(o))
        }, 30)
}

function textAt(e, i)
{
    var t = new PointText(
    {
        content: UI.planetType(),
        justification: "center",
        font: "Exo",
        fontSize: 16,
        fillColor: COLORS[i],
        visible: !0,
        opacity: 1
    });
    t.position = new Point(e.point.x, e.point.y - 30);
    var o = setInterval(function ()
    {
        var e = .95;
        t.opacity *= e, t.position = new Point(t.position.x, t.position.y - 1), t.opacity < .01 && (t.remove(), clearInterval(o))
    }, 15)
}

function onMouseUp(e)
{
    hideHelp(), VIEW_ONLY || addPlanet(e)
}

function onFrame()
{
    if (t += .1, VIEW_ONLY && hideHelp(), CRASHED_BARRIER && scaleCircle.scale(1 + .002 * Math.sin(t / .5)), habCircle.initialShow || (habCircle.opacity = .01 * IN_HABITABLE), !STOPPED)
    {
        var e = UI.evolve();
        if (null != e)
        {
            for (var i = 0; nbodies > i; i++) bodies[i].position.x = e[i][X] * SCALE + view.center.x, bodies[i].position.y = e[i][Y] * SCALE + view.center.y, bodies[i].hasRadius || (bodies[i].visible = !0, bodies[i].scale(UI.mtor(e[i][M]) / UI.mtor(K2) * BODY_SCALE), bodies[i].hasRadius = !0, bodies[i].opacity = 1), tail[i].addSegment(new Point(bodies[i].position.x, bodies[i].position.y)), tail[i].segments.length > TAIL_LENGTH && tail[i].removeSegment(0), 5 == frame ? (tail[i].smooth(), frame = 0) : frame++;
            UI.check()
        }
    }
}
var scaleCircle = new Path.Circle(
{
    opacity: .5,
    strokeColor: "white",
    radius: SCALE * UI.maxSemiMajorAxis(),
    center: view.center
}),
    habCircle = new Path.Circle(
    {
        opacity: .2,
        strokeColor: COLORS[0],
        radius: .5 * SCALE * (Math.sqrt(HABITABLE_ZONE_MIN_2) + Math.sqrt(HABITABLE_ZONE_MAX_2)),
        strokeWidth: .5 * SCALE * (Math.sqrt(HABITABLE_ZONE_MAX_2) - Math.sqrt(HABITABLE_ZONE_MIN_2)),
        center: view.center
    });
habCircle.initialShow = !0;
for (var tail = [], i = 0; NBODIES > i; i++) tail.push(new Path(
{
    strokeColor: COLORS[i],
    strokeWidth: 10,
    strokeCap: "round",
    opacity: .2
}));
for (var bodies = [], i = 0; NBODIES > i; i++) bodies.push(new Path.Circle(
{
    visible: !1,
    radius: 10,
    fillColor: COLORS[i],
    center: view.center,
    hasRadius: !1
}));
var BODY_SCALE = 2.5;
bodies[0].scale(UI.mtor(System.xyz[0][M]) / UI.mtor(K2) * BODY_SCALE), bodies[0].visible = !0, bodies[0].hasRadius = !0;
var helpLabel = new PointText(
{
    content: "Click anywhere to add a planet.",
    justification: "center",
    font: "Exo",
    fontSize: 22,
    fillColor: "white",
    visible: !0,
    opacity: .2
}),
    help2Label = new PointText(
    {
        content: "Click the Help button for rules.",
        justification: "center",
        font: "Exo",
        fontSize: 22,
        fillColor: "white",
        visible: !0,
        opacity: .2
    }),
    habLabel = new PointText(
    {
        content: "Habitable zone",
        justification: "center",
        font: "Exo",
        fontSize: 16,
        fillColor: "white",
        visible: !0,
        opacity: .2
    }),
    scaleLabel = new PointText(
    {
        content: UI.maxSemiMajorAxis().toFixed(2) + " AU",
        justification: "center",
        font: "Exo",
        fontSize: 16,
        fillColor: "white",
        visible: !0,
        opacity: .2
    }),
    nb = 1;
addPlanet = _.throttle(function (e)
{
    var i = (e.point - view.center) / SCALE;
    UI.addPlanetAt(i.x, i.y), smokeAt(e, nbodies - 1), nbodies != NBODIES && textAt(e, nbodies - 1)
}, 300);
var t = 0,
    frame = 0;
