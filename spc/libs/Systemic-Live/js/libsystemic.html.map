{"version":3,"file":"/Users/sm52286/Projects/SystemicLive//js/libsystemic.html","sources":["src/javascript.c","src/bootstrap.c","src/omp_shim.h","src/de.c","/Users/sm52286/local/emsdk_portable/emscripten/incoming/system/include/libc/math.h","src/extras.c","src/integration.c","src/kernel.c","src/kl.c","src/lm.c","src/mcmc.c","src/mercury.c","src/ode.c","src/odex.c","src/periodogram.c","src/qsortimp.c","src/sa.c","src/simplex.c","src/utils.c"],"names":[],"mappingscA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;AAPA;AAAA;AAAA;AAAA;;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;;AACA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAeaA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAAA;;AACA;AAAA;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7UA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AACA;;AACA;;AAEA;AAAA;AACA;;AArBA;AAAA;AAAA;AAAA;;AAuBA;AAAA;AAAA;AACA;;AAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAOA;;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AACA;;AACA;;AAEA;AAAA;AACA;;AAlCA;AAAA;AAAA;AAAA;;AAoCA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAIA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;AC9GA;;;;AAIA;;;;;;;;;;;;;;;;;;ACuBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;;AACA;;AAAA;;AAPA;AAAA;AAAA;AAAA;;AAOA;;AARA;AAAA;AAAA;AAAA;;AASA;;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAGA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAhBA;AAAA;AAAA;AAAA;;AAmBA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;;AAfA;AAAA;AAAA;AAAA;;AAiBA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;;AAbA;AAAA;AAAA;AAAA;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AApBA;AAAA;AAAA;AAAA;;;;AAuBA;AAAA;AACA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;;AACA;;AAjBA;AAAA;AAAA;AAAA;;AAoBA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;AArBA;AAAA;AAAA;AAAA;;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;;;AAGA;;AAvDA;AAAA;AAAA;AAAA;;AAyDA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AATA;AAAA;AAAA;AAAA;;AAaA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AACA;;AACA;;AAnFA;AAAA;AAAA;AAAA;;AAqFA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;;AAHA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAVA;AAAA;AAAA;AAAA;;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;;AACA;AAAA;;;AAAA;AAAA;;;;;;;;;;ACpPA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AACA;;;;;AAAA;;;;AFjDA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGkcA;AAAA;;;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AACA;;AACA;;AACA;;AA9BA;AAAA;AAAA;AAAA;;AAgCA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;;AACA;;AAAA;;AAEA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;AHvMA;;;;AAIA;;;;;;;;;;AIYA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;AAIA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AAAA;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;;AAxBA;AAAA;AAAA;AAAA;;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AACA;;AAxCA;AAAA;AAAA;AAAA;;AA0CA;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AACA;;AAtCA;AAAA;AAAA;AAAA;;AAwCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;A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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AARA;AAAA;AAAA;AAAA;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;;AAvCA;AAAA;AAAA;AAAA;;AAwCA;;AA/CA;AAAA;AAAA;AAAA;;AAizBA;AAAA;AAAA;AAAA;;AA4BA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AATA;AAAA;AAAA;AAAA;;AASA;;AAVA;AAAA;AAAA;AAAA;;AAYA;;AAnBA;AAAA;AAAA;AAAA;;AAoBA;;AAhCA;AAAA;AAAA;AAAA;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;;AAGA;;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;AAAA;;AAEA;;AACA;;AAzFA;AAAA;AAAA;AAAA;;AA2FA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;;;AASA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAbA;AAAA;AAAA;AAAA;;AAeA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;;AACA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA;AAAA;;AACA;AAAA;;;;;;;;;;AF5xBA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AACA;;;;;AAAA;;;;;;;;;;AE2xBA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AARA;AAAA;AAAA;AAAA;;AAUA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AATA;AAAA;AAAA;AAAA;;AASA;;AAVA;AAAA;AAAA;AAAA;;AAWA;;AAhBA;AAAA;AAAA;AAAA;;AAkBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAGA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AAEA;;AALA;AAAA;AAAA;AAAA;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAMA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AAGA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;;;;;;;;;ACh9BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;AAggCA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAx/BA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AACA;;AAZA;AAAA;AAAA;AAAA;;AAcA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AAPA;AAAA;AAAA;AAAA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;AH9NA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AACA;;;;;AAAA;;;;;;;;;;;;;;;;AGyOA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAPA;AAAA;AAAA;AAAA;;AAQA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqaA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AA8vBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;AAvwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;AAyhBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7gcA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;AAwFA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;;;;;;;;;;;;;;AAIA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AAPA;AAAA;AAAA;AAAA;;AAOA;;AARA;AAAA;AAAA;AAAA;;AASA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AAPA;AAAA;AAAA;AAAA;;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAmTA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;AA1TA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;AAhDA;AAAA;AAAA;AAAA;;AAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AAGA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAwCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAXA;AAAA;AAAA;AAAA;;AAYA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;;AAGA;;AAEA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;AAEA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AACA;;AAEA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;;;;AACA;;AACA;;AAEA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;AAuCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;AASA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;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AA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AA3CA;AAAA;AAAA;AAAA;;AA2CA;;AA5CA;AAAA;AAAA;AAAA;;AA6CA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;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AA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAbA;AAAA;AAAA;AAAA;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;AC/YA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA1DA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAZA;AAAA;AAAA;AAAA;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAlDA;AAAA;AAAA;AAAA;;AAoDA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;AA/CA;AAAA;AAAA;AAAA;;AAiDA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AACA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AACA;;AACA;;AACA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;;AAAA;;AAbA;AAAA;AAAA;AAAA;;AAaA;;AAdA;AAAA;AAAA;AAAA;;AAgBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AAAA;;AAZA;AAAA;AAAA;AAAA;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;;AAEA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;;AAAA;;AAEA;AAAA;;AAAA;;AAEA;AAAA;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC5eA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;ANwBA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AACA;;;;;AAAA;;;;;;;;;;;;;;;;;;AMzBA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAnBA;AAAA;AAAA;AAAA;;AAqBA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AALA;AAAA;AAAA;AAAA;;AAMA;AAAA;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAVA;AAAA;AAAA;AAAA;;AAWA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AACA;;AATA;AAAA;AAAA;AAAA;;AAUA;AAAA;AAAA;;AACA;;AACA;;AAjBA;AAAA;AAAA;AAAA;;AAoBA;AACA;AAEA;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AAJA;AAAA;AAAA;AAAA;;AAIA;;AALA;AAAA;AAAA;AAAA;;AAOA;AACA;AACA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACA;AACA;AACA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAdA;AAAA;AAAA;AAAA;;AAgBA;AAAA;AAAA;;AACA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;AApFA;AAAA;AAAA;AAAA;;AAsFA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AATA;AAAA;AAAA;AAAA;;AAYA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;AApCA;AAAA;AAAA;AAAA;;AAsCA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AAvBA;AAAA;AAAA;AAAA;;AAwBA;;AAGA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;;AACA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AAAA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAWA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;;AACA;;AAnBA;AAAA;AAAA;AAAA;;AAoBA;;AArBA;AAAA;AAAA;AAAA;;AAuBA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;;AACA;AAAA;AAAA;AACA;;AACA;;AAhBA;AAAA;AAAA;AAAA;;AAmBA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AACA;;AACA;;AA1LA;AAAA;AAAA;AAAA;;AA4LA;AAAA;AACA;AAAA;AAEA;;AACA;AAAA;AADA;;;;;;AR5xBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ASqGA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;;;AAIA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;AAEA;;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;;;;;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAEA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAOA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AASA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAEA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAEA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAEA;AAAA;;;AAKA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AAEA;AAAA;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAIA;AAAA;AAAA;;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;A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A;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;;;;;;;;;;;;;;;;;AAwJA;AAEA;AAAA;AAAA;AAAA;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsh8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AA+HA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AAEA;AAAA;AACA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAMA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAKA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAMA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAA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AAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;;AAEA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAtBA;AAAA;AAAA;AAAA;;AAuBA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;;AAEA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;;AAEA;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAcA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAA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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AAQA;AAAA;AAAA;AACA;AAAA;AACA;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAKA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;;;AASA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAAA;;AAEA;;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AA3CA;AAAA;AAAA;AAAA;;AA8CA;AAAA;AACA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChnCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAGA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAPA;AAAA;AAAA;AAAA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAPA;AAAA;AAAA;AAAA;;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;;AAZA;AAAA;AAAA;AAAA;;AAaA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAEA;;AAfA;AAAA;AAAA;AAAA;;AAgBA;;AACA;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;;AAGA;;AAXA;AAAA;AAAA;AAAA;;AAaA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;;AACA;;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AACA;;AACA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;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AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AACA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;;;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;AAIA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAGA;AAAA;AACA;AAAA;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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A;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AANA;AAAA;AAAA;AAAA;;AAMA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AANA;AAAA;AAAA;AAAA;;AAMA;;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;A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A;;AACA;AAAA;AACA;;AAEA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAIA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;AAAA;;AAEA;;AACA;;AA5GA;AAAA;AAAA;AAAA;;AA8GA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;ACrkDA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AARA;AAAA;AAAA;AAAA;;AAWA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AA7BA;AAAA;AAAA;AAAA;;AAgiFA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAEA;;AACA;AAAA;AADA;;;;;;;;;;;;;;;AAIA;AAAA;AAEA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;;AACA;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAA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AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;;AAKA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AA3HA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAEA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;;;AAOA;;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAEA;;AACA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAbA;AAAA;AAAA;AAAA;;AAcA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AACA;;AACA;AAAA;AADA;;;;;;Ad1JA;;;;AAJA;;;;;;;;;;;;;;;;AeWA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAEA;AACA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AACA;;AACA;;AACA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AAAA;;AAhBA;AAAA;AAAA;AAAA;;AAgBA;;AAjBA;AAAA;AAAA;AAAA;;AAmBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AAAA;;AAVA;AAAA;AAAA;AAAA;;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;;AAEA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;ACnIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;A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AA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;;;;AAEA;AAAA;AACA;;AAEA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAJA;AAAA;AAAA;AAAA;;AAMA;;AACA;AAAA;AADA;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;;;;;;;;;;;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AAKA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAAA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AACA;;AANA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAKA;;AANA;AAAA;AAAA;AAAA;;AAQA;AAAA;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AACA;;AAFA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;AANA;AAAA;AAAA;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;;AAHA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;;AAJA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAEA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;AA3IA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxCA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;;;;;;;;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["#include <stdio.h>\n#include \"systemic.h\"\n#include \"kernel.h\"\n#include \"mcmc.h\"\n#include \"bootstrap.h\"\n#include \"time.h\"\n#include \"periodogram.h\"\n#include \"javascript.h\"\n#include \"integration.h\"\n\n/* Contains a simplified interface for calling from the web app */\n\n\ndouble K_getDataAt(ok_kernel* k, int subset, int row, int column) {\n    if (subset == ALL)\n        return K_getCompiled(k)[row][column];\n    else\n        return MGET(K_getData(k, subset), row, column);\n}\n\nvoid K_setDataAt(ok_kernel* k, int subset, int row, int column, double val) {\n    if (subset == ALL)\n        K_getCompiled(k)[row][column] = val;\n    else\n        MSET(K_getData(k, subset), row, column, val);\n}\n\n\ndouble K_getRVLine(ok_kernel* k, int row, int col) {\n    static gsl_matrix* rvline = NULL;\n    static double tolerance[1] = { 1e-3 };\n    static int target_points = 800;\n    \n    if (row < 0) {\n        int samples = col;\n        if (rvline != NULL) {\n            gsl_matrix_free(rvline);\n            rvline = NULL;\n        }\n        if (k->ndata == 0)\n            return -1;\n        \n        double** comp = K_getCompiled(k);\n        \n        gsl_matrix* rvline_full = K_integrateStellarVelocity(k, comp[0][0],\n                comp[k->ndata-1][0], \n                samples,\n                NULL, NULL);\n        rvline = ok_resample_curve(rvline_full,\n                0, 1, 1, target_points, 100, tolerance, 0, false);\n        \n        \n        gsl_matrix_free(rvline_full);\n              \n        return MROWS(rvline);\n    } else {\n        if (rvline == NULL)\n            return INVALID_NUMBER;\n        else\n            return MGET(rvline, row, col);\n    }\n}\n\n\n\ndouble K_getPhasedDataForPlanet(ok_kernel* k, int planet, int row, int column) {\n    static gsl_matrix* phased_data = NULL;\n\n    if (planet >= 1) {\n        if (phased_data != NULL) {\n            gsl_matrix_free(phased_data);\n            phased_data = NULL;\n        }\n        double chi2 = k->chi2;\n        double rms = k->rms;\n        double jitter = k->jitter;\n        double chi2_rvs = k->chi2_rvs;\n        \n        planet = MIN(planet, K_getNplanets(k));\n        double mass = K_getElement(k, planet, MASS);\n        double period = K_getElement(k, planet, PER);\n        K_setElement(k, planet, MASS, 0);\n        K_calculate(k);\n        \n        phased_data = K_getCompiledDataMatrix(k);\n        double mint = MGET(phased_data, 0, T_TIME);\n        for (int i = 0; i < MROWS(phased_data); i++) {\n            double t = fmod((MGET(phased_data, i, T_TIME) - mint), period);\n            double v = MGET(phased_data, i, T_SVAL)-MGET(phased_data, i, T_PRED);\n            MSET(phased_data, i, T_TIME, t);\n            MSET(phased_data, i, T_VAL, v);\n        }\n        \n        ok_sort_matrix(phased_data, T_TIME);\n        K_setElement(k, planet, MASS, mass);\n        K_calculate(k);\n        k->chi2 = chi2;\n        k->rms = rms;\n        k->jitter = jitter;\n        k->chi2_rvs = chi2_rvs;\n        return 1;\n    } else {\n        return MGET(phased_data, row, column);\n    }\n}\n\n\ndouble K_getPhasedRVLine(ok_kernel* k, int planet, int row, int column) {\n    static gsl_matrix* phasedRVLine = NULL;\n    if (planet >= 1) {\n        if (k->ndata == 0)\n            return -1;\n        \n        int np = K_getNplanets(k);\n        double masses[np+1];\n        double periods[np+1];\n        for (int i = 1; i <= np; i++) {\n            masses[i] = K_getElement(k, i, MASS);\n            periods[i] = K_getElement(k, i, PER);\n            if (i != planet) {\n                K_setElement(k, i, MASS, 0.);\n                K_setElement(k, i, PER, 10000.);\n            }\n        };\n        \n        double period = K_getElement(k, planet, PER);\n        int samples = -row;\n        if (phasedRVLine != NULL) {\n            gsl_matrix_free(phasedRVLine);\n            phasedRVLine = NULL;\n        }\n        double** comp = K_getCompiled(k);\n        \n        phasedRVLine = K_integrateStellarVelocity(k, comp[0][0],\n                comp[k->ndata-1][0], \n                samples,\n                NULL, NULL);\n        \n        double mint = MGET(phasedRVLine, 0, T_TIME);\n        for (int i = 0; i < MROWS(phasedRVLine); i++) {\n            double t = fmod((MGET(phasedRVLine, i, 0) - mint), period);\n            MSET(phasedRVLine, i, 0, t);\n        }\n        ok_sort_matrix(phasedRVLine, 0);\n        \n        for (int i = 1; i <= np; i++) {\n            K_setElement(k, i, MASS, masses[i]);\n            K_setElement(k, i, PER, periods[i]);\n        }\n        \n        return 1;\n    } else {\n        return MGET(phasedRVLine, row, column);\n    }\n}\n\n\ndouble K_getPeriodogramAt(ok_kernel* k, int row, int col) {\n    \n    static int length;\n    static int samples = 15000;\n    static double Pmin = 1.;\n    static double Pmax = 20000.;\n    static ok_periodogram_workspace* p = NULL;\n    static gsl_matrix* ps = NULL;\n    static const int top_freqs = 10;\n    static double* top = NULL;\n    static double tolerance[1] = {1e-3};\n    \n    if (p == NULL) {\n        p = (ok_periodogram_workspace*) malloc(sizeof(ok_periodogram_workspace));\n        p->buf = NULL;\n        p->per = NULL;\n        p->calc_z_fap = true;\n    }\n    if (row == JS_PS_GET_TOP_PERIODS) {\n        return top[col];  \n    } else if (row == JS_PS_GET_TOP_POWERS) {\n        return top[col+top_freqs];\n    } else if (row == JS_PS_GET_TOP_FAPS) {\n        return top[col+2*top_freqs];\n    } else if (row == JS_PS_SET_PMIN) {\n        Pmin = (double) col;        \n        return 0;\n    } else if (row == JS_PS_SET_PMAX) {\n        Pmax = (double) col;\n        return 0;\n    } else if (row == JS_PS_SETUP) {\n        if (ps != NULL) {\n            gsl_matrix_free(ps);\n            ps = NULL;\n        }\n        if (top == NULL)\n            top = (double*) malloc(top_freqs * 3 * sizeof(double));\n        gsl_matrix* data = K_getCompiledDataMatrix(k);\n        for (int i = 0; i < MROWS(data); i++)\n            MSET(data, i, T_SVAL, MGET(data, i, T_SVAL)-MGET(data, i, T_PRED));\n\n        gsl_matrix* ret = ok_periodogram_ls(data, samples, Pmin, Pmax, \n                0, T_TIME, T_SVAL, T_ERR, p);\n        \n        ps = ok_resample_curve(ret, 0, 1, 0.1, 800,\n                100, tolerance, 0, true);\n        length = MROWS(ps);\n        \n        ok_sort_matrix(ret, PS_Z);\n        double dt = 0.5;\n        int idx = MROWS(ret);\n        int i = 0;\n        while (idx > 0 && i < top_freqs) {\n            idx--;\n            bool skip = false;\n            for (int n = 0; n < i; n++)\n                if (fabs(top[n] - MGET(ret, idx, PS_TIME)) < dt)\n                    skip = true;\n            \n            if (!skip) {\n                top[i] = MGET(ret, idx, PS_TIME);\n                top[i+top_freqs] = MGET(ret, idx, PS_Z);\n                top[i+2*top_freqs] = MGET(ret, idx, PS_FAP);   \n                i++;\n            }\n        }\n        gsl_matrix_free(data);\n        \n        return (double) length;\n    } else if (row == JS_PS_GET_FAPS_LEVELS) {\n        if (p == NULL || ps == NULL)\n            return 0;\n        if (col == 1)\n            return p->z_fap_1;\n        else if (col == 2)\n            return p->z_fap_2;\n        else if (col == 3)\n            return p->z_fap_3;\n        else\n            return 0.;\n    }  else {\n        if (ps == NULL)\n            return 0;\n        return MGET(ps, row, col);\n    }\n}\n\ntime_t mtime;\nint timeout;\nint failed;\n\nint progressWithTimeout(int current, int max, void* state, const char* function) {\n    if (difftime(time(NULL), mtime) > timeout) {\n        failed = timeout;\n        return PROGRESS_STOP;\n    }\n    failed = 0;\n    return PROGRESS_CONTINUE;\n}\n\n\nint K_minimizeWithTimeout(ok_kernel* k, int to) {\n    mtime = time(NULL);\n    timeout = to;\n    failed = 0;\n    k->progress = progressWithTimeout;\n    K_minimize(k, SIMPLEX, 5000, NULL);\n    k->progress = NULL;\n    return failed;\n}\n\ndouble K_integrateForward(ok_kernel* k, const int mode, const double nyears,\n        const int row, const int col) {\n    \n    static ok_system* sys = NULL;\n    static double time;\n    static double yearspast;\n    static double dt;\n    static gsl_vector* times = NULL;\n    static gsl_matrix* els = NULL;\n    \n    if (K_getNplanets(k) == 0)\n        return 0;\n    \n    if (mode == JS_I_START) {\n        if (times == NULL)\n            times = gsl_vector_alloc(2);\n        dt = MIN(nyears, 10);\n        time = K_getEpoch(k);\n        yearspast = 0;\n        sys = ok_copy_system(k->system);\n        ok_setup(sys);\n    } else if (mode == JS_I_STEP) {\n        if (yearspast >= nyears)\n            return JS_I_ENDREACHED;\n        \n        if (els != NULL) {\n            gsl_matrix_free(els);\n            els = NULL;\n        }\n        VSET(times, 0, time);\n        VSET(times, 1, time + dt * 365.25);\n        \n        yearspast += dt;\n        \n        int error;\n        ok_system** bag = ok_integrate(sys, times, k->intOptions, RK89, NULL, &error);\n        els = ok_get_els(bag, 2, false);\n        \n        ok_free_system(sys);\n        sys = ok_copy_system(bag[1]);\n        ok_free_systems(bag, 2);\n        time += dt * 365.25;\n        \n        if (error != INTEGRATION_SUCCESS)\n            return -error;\n        \n        return yearspast;\n    } else if (mode == JS_I_END) {\n        if (els != NULL) {\n            gsl_matrix_free(els);\n            els = NULL;\n        }\n        if (sys != NULL) {\n            ok_free_system(sys);\n            sys = NULL;\n        }\n    } else if (mode == JS_I_GET) {\n        if (col == SMA) {\n                int idx = row * ELEMENTS_SIZE + PER + 1;\n                double mstar = K_getMstar(k) * K2;\n                double mp = K_getElement(k, row, MASS) * MJUP / MSUN * K2;\n                double P = MGET(els, 1, idx);\n                \n                return ok_acalc(P, mstar, mp);\n        } else {\n                int idx = row * ELEMENTS_SIZE + col + 1;\n                return MGET(els, 1, idx);\n        }\n    };\n    \n    \n    return 0;\n}\n\nint main() {\n    \n}\n","#include \"bootstrap.h\"\n#include \"kernel.h\"\n#include <gsl/gsl_randist.h>\n\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\nok_list* K_bootstrap(ok_kernel* k, int trials, int warmup, int malgo, int miter, double mparams[]) {\n    ok_progress prog = k->progress;\n    gsl_matrix* dev = NULL;\n    \n    int nthreads = omp_get_max_threads();\n    bool invalid = false;\n    \n    if (prog != NULL) {\n        int ret = prog(0, (int)((double) trials / (double) nthreads), k,\n                \"K_bootstrap\");\n        if (ret == PROGRESS_STOP) {\n            return NULL;\n        }\n    }\n    \n    K_minimize(k, malgo, trials, mparams);\n    ok_kernel* k0 = K_clone(k);\n    \n    ok_list* kl = KL_alloc(trials, k0);\n    \n    ok_list* wu = NULL;\n    \n    if (warmup > 0) {\n        wu = KL_alloc(warmup, K_clone(k));\n        \n        #pragma omp parallel for\n        for (int i = 0; i < warmup; i++) {\n            if (invalid)\n                continue;\n            \n            ok_kernel* k2 = K_cloneFlags(k, SHARE_FLAGS | SHARE_STEPS | SHARE_RANGES);\n            k2->flags |= NEEDS_COMPILE | BOOTSTRAP_DATA;\n            k2->progress = NULL;\n            K_calculate(k2);\n            \n            K_minimize(k2, malgo, miter, mparams);\n            KL_set(wu, i, k2->system->elements, k2->params, k2->minfunc(k2), 0);\n            \n            if (prog != NULL && omp_get_thread_num() == 0) {\n                int ret = prog(i * nthreads, warmup, k2,\n                    \"K_bootstrap_warmup\");\n                if (ret == PROGRESS_STOP) {\n                    invalid = true;\n                }\n            }\n            \n            K_free(k2);\n        }\n        \n        dev = KL_getElementsStats(wu, STAT_STDDEV);\n    }\n    \n    \n    \n    #pragma omp parallel for\n    for (int i = 0; i < trials; i++) {\n        if (invalid)\n            continue;\n       \n        ok_kernel * k2 = K_cloneFlags(k, SHARE_FLAGS | SHARE_STEPS | SHARE_RANGES);\n        k2->flags |= NEEDS_COMPILE | BOOTSTRAP_DATA;\n        k2->progress = NULL;\n        \n        if (warmup > 0) {\n            for (int i = 1; i <= k2->system->nplanets; i++) {\n                for (int j = 0; j < ELEMENTS_SIZE; j++) \n                    if (MIGET(k2->plFlags, i, j) & MINIMIZE) {\n                        double pert = gsl_ran_gaussian(k->rng, MGET(dev, i, j));\n                        MINC(k2->system->elements, i, j, pert * MGET(k2->system->elements, i, j));\n                    }\n            }\n        }\n        \n        \n        K_calculate(k2);\n        \n        K_minimize(k2, malgo, miter, mparams);\n        \n        KL_set(kl, i, K_getAllElements(k2), ok_vector_copy(k2->params), k2->minfunc(k2), 0);\n        \n        if (prog != NULL && omp_get_thread_num() == 0) {\n            int ret = prog(i * nthreads, trials, k2,\n                    \"K_bootstrap\");\n            if (ret == PROGRESS_STOP) {\n                invalid = true;\n            }\n        }\n        \n        K_free(k2);\n    }\n    \n    if (invalid) {\n        if (wu != NULL)\n            KL_free(wu);\n        KL_free(kl);\n        return NULL;\n    }\n        \n    \n    KL_free(wu);\n    return kl;\n}\n","static inline int omp_get_thread_num() {\n\treturn 0;\n}\n\nstatic inline int omp_get_max_threads() {\n\treturn 1;\n}","\n#include <gsl/gsl_randist.h>\n\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n#include \"math.h\"\n#include \"utils.h\"\n#include \"kernel.h\"\n\n#define DISTINCT(a, b, c, x) (a != b && a != c && b != c && a != x)\n#define IS_ANGLE(b) ((b) == MA || (b) == LOP || (b) == INC || (b) == NODE)\n#define IS_LOG(b) ((b) == MASS || (b) == PER)\ntypedef struct {\n    double* pars;\n    double* old;\n    double chi;\n} ok_de_cand;\n\nconst double ok_de_min[ELEMENTS_SIZE] = { 1e-3, 1e-4, 0., 0, 0., 0., -100000., 0, 0, 0 };\nconst double ok_de_max[ELEMENTS_SIZE] = { 1e4, 100, 360., 0.99, 360., 360., 360., 0, 0, 0};\n\nvoid K_validate(ok_kernel*);\n\nbool ok_de_isCrossing(ok_kernel* k) {\n    K_validate(k);\n    double a[k->system->nplanets+1];\n    for (int i = 1; i < k->system->nplanets+1; i++)\n        a[i] = K_getElement(k, i, SMA);\n    \n    for (int i = 1; i < k->system->nplanets+1; i++)\n        for (int j = 1; j < k->system->nplanets+1; j++) \n            if (i != j) {\n                int imin = (a[i] < a[j] ? i : j);\n                int imax = (a[i] > a[j] ? i : j);\n                if (a[imin] * (1.+MGET(k->system->elements, imin, ECC)) > \n                    a[imax] * (1.-MGET(k->system->elements, imax, ECC)))\n                    return true;\n            }\n    return false;\n}\n\nint K_minimize_de(ok_kernel* k, int trials, double params[]) {\n    int status = PROGRESS_CONTINUE;\n    K_calculate(k);\n    double F_min = 0.5;\n    double F_max = 1.;\n    double CR = 0.2;\n    int NP_fac = 25;\n    bool use_step = false;\n    \n    int threads = omp_get_max_threads();\n    \n    ok_kernel_minimizer_pars mpars = K_getMinimizedVariables(k);\n    \n    if (mpars.npars == 0) {\n        FREE_MINIMIZER_PARS(mpars);\n        return 0;\n    }\n    \n    int idx = 0;\n    while (params != NULL) {\n        if (params[idx] == DONE)\n            break;\n        else if (params[idx] == OPT_DE_CR)\n            CR = params[idx+1];\n        else if (params[idx] == OPT_DE_F_MIN)\n            F_min = params[idx+1];\n        else if (params[idx] == OPT_DE_F_MAX)\n            F_max = params[idx+1];\n        else if (params[idx] == OPT_DE_NP_FAC)\n            NP_fac = (int) params[idx+1];\n        else if (params[idx] == OPT_DE_USE_STEPS)\n            use_step = (((int) params[idx+1]) != 0);\n        \n        idx+=2;\n    }\n    \n    const int npars = mpars.npars;\n    const int ncand = NP_fac * npars;\n    \n    ok_de_cand cand[ncand];\n    \n    double chi = K_getChi2(k);\n    \n    for (int i = 0; i < mpars.npars; i++) {\n        double min = mpars.min[i] + 1e-16;\n        double max = mpars.max[i];\n        \n        if (IS_INVALID(min) || IS_INVALID(max)) {\n            if (mpars.type[i] == -1) {\n                min = (IS_INVALID(min) ? -1e4 : min);\n                max = (IS_INVALID(max) ? 1e4 : max);\n            } else {\n                min = (IS_INVALID(min) ? ok_de_min[mpars.type[i]] : min);\n                max = (IS_INVALID(max) ? ok_de_max[mpars.type[i]] : max);\n            }\n        }\n\n        mpars.min[i] = min;\n        mpars.max[i] = max;\n    }\n    \n    \n    if (use_step) {\n        for (int i = 0; i < ncand; i++) {\n            cand[i].pars = malloc(sizeof(double) * npars);\n            cand[i].old = malloc(sizeof(double) * npars);\n            bool out_of_range = true;\n            \n            do {\n                out_of_range = false;\n                for (int j = 0; j < npars; j++) {\n                    double r =  gsl_ran_gaussian(k->rng, mpars.steps[j]);\n                    cand[i].pars[j] = *(mpars.pars[j]) + r;\n                    out_of_range |= (cand[i].pars[j] < mpars.min[j]) || (cand[i].pars[j] > mpars.max[j]);\n                }\n                \n                memcpy(cand[i].old, cand[i].pars, sizeof(double) * npars);\n            } while (out_of_range);\n        }\n        \n    } else {\n        for (int i = 0; i < ncand; i++) {\n            cand[i].pars = malloc(sizeof(double) * npars);\n            cand[i].old = malloc(sizeof(double) * npars);\n\n            for (int j = 0; j < npars; j++) {\n                double min = mpars.min[j];\n                double max = mpars.max[j];\n                double r = gsl_rng_uniform(k->rng);\n                \n                if (mpars.type[j] == PER || mpars.type[j] == MASS) {\n                    cand[i].pars[j] = exp(log(min) + (log(max) - log(min)) * r);\n                } else if (mpars.type[j] == -1) {\n                    cand[i].pars[j] = gsl_ran_gaussian(k->rng, 1);\n                } else {\n                    cand[i].pars[j] = min + (max - min) * r;\n                } \n\n            }\n            \n            memcpy(cand[i].old, cand[i].pars, sizeof(double) * npars);\n        }\n    }\n    \n    ok_kernel* k_t[threads];\n    ok_kernel_minimizer_pars mpars_t[threads];\n    \n    \n    for (int i = 0; i < threads; i++) {\n        k_t[i] = K_clone(k);\n        mpars_t[i] = K_getMinimizedVariables(k_t[i]);\n    }\n    \n    bool stop = false;\n    #pragma omp parallel for \n    for (int i = 0; i < ncand; i++) {\n        int th = omp_get_thread_num();\n        for (int j = 0; j < npars; j++)\n            *(mpars_t[th].pars[j]) = cand[i].pars[j];\n        \n        k_t[th]->flags |= NEEDS_SETUP;\n        K_calculate(k_t[th]);\n        fflush(stdout);\n        cand[i].chi = k->minfunc(k_t[th]);\n        \n        if (k->progress != NULL && th == 0) {\n            status = k->progress(0, trials, k_t[0], __func__);\n            if (status == PROGRESS_STOP)\n                stop = true;\n        };\n        if (stop)\n            continue;\n    }\n    \n    \n    for (int tr = 0; tr < trials; tr++) {\n        if (stop)\n            break;\n        double chi2 = 0;\n        #pragma omp parallel for\n        for (int x = 0; x < ncand; x++) {\n            int nt = omp_get_thread_num();\n            ok_kernel* kd = k_t[nt];\n            ok_kernel_minimizer_pars mp = mpars_t[nt];\n            double** parsd = mp.pars;\n\n            int R = gsl_rng_uniform_int(kd->rng, npars);\n            int a = 0, b = 0, c = 0;\n            double F = gsl_rng_uniform(kd->rng) * (F_max-F_min) + F_min;\n\n            while (! DISTINCT(a, b, c, x)) {\n                a = gsl_rng_uniform_int(kd->rng, npars);\n                b = gsl_rng_uniform_int(kd->rng, npars);\n                c = gsl_rng_uniform_int(kd->rng, npars);\n            }\n\n            bool out_of_range = false;\n                       \n            for (int j = 0; j < npars; j++) {\n                if ((x != R) && (gsl_rng_uniform(kd->rng) > CR)) {\n                    *(parsd[j]) = cand[x].old[j];\n                    cand[x].pars[j] = cand[x].old[j];\n                } else {\n                    double y;\n                    if (IS_LOG(mpars.type[j])) \n                        y = exp(log(cand[a].old[j]) + F * (log(cand[b].old[j])-log(cand[c].old[j])));\n                    else\n                        y = cand[a].old[j] + F * (cand[b].old[j]-cand[c].old[j]);\n                    \n                    if (IS_ANGLE(mpars.type[j]))\n                        y = DEGRANGE(y);\n                    \n                    if (y < mpars.min[j] || y > mpars.max[j]) {\n                        out_of_range = true;\n                        break;\n                    }\n                    *(parsd[j]) = y;\n                    cand[x].pars[j] = y;\n                }\n            }\n\n            \n            kd->flags |= NEEDS_SETUP;\n            bool cross = ok_de_isCrossing(kd);\n            if (! (cross || out_of_range))\n                K_calculate(kd);\n            \n            double chi_x = k->minfunc(kd);\n            \n            if ((chi_x < cand[x].chi || IS_INVALID(cand[x].chi)) && ! ok_de_isCrossing(kd) && ! out_of_range && ! IS_INVALID(chi_x)) {\n                cand[x].chi = k->minfunc(kd);\n            } else {\n                for (int j = 0; j < npars; j++)\n                    cand[x].pars[j] = cand[x].old[j];\n            }\n        }\n        \n        double min_chi_new = cand[0].chi;\n        for (int x = 0; x < ncand; x++) {\n            memcpy(cand[x].old, cand[x].pars, sizeof(double) * npars);\n            if (cand[x].chi <= min_chi_new) {\n                min_chi_new = cand[x].chi;\n                for (int j = 0; j < npars; j++)\n                    *(mpars_t[0].pars[j]) = cand[x].pars[j];\n            }\n            \n            chi2 += cand[x].chi;\n        }\n       \n       \n        \n        if (k->progress != NULL) {\n            k_t[0]->flags |= NEEDS_SETUP;\n            K_calculate(k_t[0]);\n            status = k->progress(tr, trials, k_t[0], __func__);\n            if (status == PROGRESS_STOP)\n                break;\n        };\n    }\n    \n    for (int i = 0; i < threads; i++) {\n        K_free(k_t[i]);\n        FREE_MINIMIZER_PARS(mpars_t[i]);\n    }\n    \n    \n    for (int i = 0; i < ncand; i++) {\n        if (cand[i].chi <= chi) {\n            chi = cand[i].chi;\n            for (int j = 0; j < npars; j++) {\n                *(mpars.pars[j]) = cand[i].pars[j];\n            }\n        }\n        \n        free(cand[i].pars);\n        free(cand[i].old);\n    }\n    \n    k->flags |= NEEDS_SETUP;\n    K_calculate(k);\n    \n    FREE_MINIMIZER_PARS(mpars);\n    return status;\n}","#ifndef _MATH_H\n#define _MATH_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <features.h>\n\n#define __NEED_float_t\n#define __NEED_double_t\n#include <bits/alltypes.h>\n\n#if 100*__GNUC__+__GNUC_MINOR__ >= 303\n#define NAN       __builtin_nanf(\"\")\n#define INFINITY  __builtin_inff()\n#else\n#define NAN       (0.0f/0.0f)\n#define INFINITY  1e40f\n#endif\n\n#define HUGE_VALF INFINITY\n#define HUGE_VAL  ((double)INFINITY)\n#define HUGE_VALL ((long double)INFINITY)\n\n#define MATH_ERRNO  1\n#define MATH_ERREXCEPT 2\n#define math_errhandling 2\n\n#define FP_ILOGBNAN (-1-(int)(((unsigned)-1)>>1))\n#define FP_ILOGB0 FP_ILOGBNAN\n\n#define FP_NAN       0\n#define FP_INFINITE  1\n#define FP_ZERO      2\n#define FP_SUBNORMAL 3\n#define FP_NORMAL    4\n\nint __fpclassify(double);\nint __fpclassifyf(float);\nint __fpclassifyl(long double);\n\nstatic __inline unsigned __FLOAT_BITS(float __f)\n{\n\tunion {float __f; unsigned __i;} __u = {__f};\n\treturn __u.__i;\n}\nstatic __inline unsigned long long __DOUBLE_BITS(double __f)\n{\n\tunion {double __f; unsigned long long __i;} __u = {__f};\n\treturn __u.__i;\n}\n\n#define fpclassify(x) ( \\\n\tsizeof(x) == sizeof(float) ? __fpclassifyf(x) : \\\n\tsizeof(x) == sizeof(double) ? __fpclassify(x) : \\\n\t__fpclassifyl(x) )\n\n#define isinf(x) ( \\\n\tsizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) == 0x7f800000 : \\\n\tsizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) == 0x7ffULL<<52 : \\\n\t__fpclassifyl(x) == FP_INFINITE)\n\n#define isnan(x) ( \\\n\tsizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) > 0x7f800000 : \\\n\tsizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) > 0x7ffULL<<52 : \\\n\t__fpclassifyl(x) == FP_NAN)\n\n#define isnormal(x) ( \\\n\tsizeof(x) == sizeof(float) ? ((__FLOAT_BITS(x)+0x00800000) & 0x7fffffff) >= 0x01000000 : \\\n\tsizeof(x) == sizeof(double) ? ((__DOUBLE_BITS(x)+(1ULL<<52)) & -1ULL>>1) >= 1ULL<<53 : \\\n\t__fpclassifyl(x) == FP_NORMAL)\n\n#define isfinite(x) ( \\\n\tsizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) < 0x7f800000 : \\\n\tsizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) < 0x7ffULL<<52 : \\\n\t__fpclassifyl(x) > FP_INFINITE)\n\nint __signbit(double);\nint __signbitf(float);\nint __signbitl(long double);\n\n#define signbit(x) ( \\\n\tsizeof(x) == sizeof(float) ? (int)(__FLOAT_BITS(x)>>31) : \\\n\tsizeof(x) == sizeof(double) ? (int)(__DOUBLE_BITS(x)>>63) : \\\n\t__signbitl(x) )\n\n#define isunordered(x,y) (isnan((x)) ? ((void)(y),1) : isnan((y)))\n\n#define __ISREL_DEF(rel, op, type) \\\nstatic __inline int __is##rel(type __x, type __y) \\\n{ return !isunordered(__x,__y) && __x op __y; }\n\n__ISREL_DEF(lessf, <, float)\n__ISREL_DEF(less, <, double)\n__ISREL_DEF(lessl, <, long double)\n__ISREL_DEF(lessequalf, <=, float)\n__ISREL_DEF(lessequal, <=, double)\n__ISREL_DEF(lessequall, <=, long double)\n__ISREL_DEF(lessgreaterf, !=, float)\n__ISREL_DEF(lessgreater, !=, double)\n__ISREL_DEF(lessgreaterl, !=, long double)\n__ISREL_DEF(greaterf, >, float)\n__ISREL_DEF(greater, >, double)\n__ISREL_DEF(greaterl, >, long double)\n__ISREL_DEF(greaterequalf, >=, float)\n__ISREL_DEF(greaterequal, >=, double)\n__ISREL_DEF(greaterequall, >=, long double)\n\n#define __tg_pred_2(x, y, p) ( \\\n\tsizeof((x)+(y)) == sizeof(float) ? p##f(x, y) : \\\n\tsizeof((x)+(y)) == sizeof(double) ? p(x, y) : \\\n\tp##l(x, y) )\n\n#define isless(x, y)            __tg_pred_2(x, y, __isless)\n#define islessequal(x, y)       __tg_pred_2(x, y, __islessequal)\n#define islessgreater(x, y)     __tg_pred_2(x, y, __islessgreater)\n#define isgreater(x, y)         __tg_pred_2(x, y, __isgreater)\n#define isgreaterequal(x, y)    __tg_pred_2(x, y, __isgreaterequal)\n\ndouble      acos(double);\nfloat       acosf(float);\nlong double acosl(long double);\n\ndouble      acosh(double);\nfloat       acoshf(float);\nlong double acoshl(long double);\n\ndouble      asin(double);\nfloat       asinf(float);\nlong double asinl(long double);\n\ndouble      asinh(double);\nfloat       asinhf(float);\nlong double asinhl(long double);\n\ndouble      atan(double);\nfloat       atanf(float);\nlong double atanl(long double);\n\ndouble      atan2(double, double);\nfloat       atan2f(float, float);\nlong double atan2l(long double, long double);\n\ndouble      atanh(double);\nfloat       atanhf(float);\nlong double atanhl(long double);\n\ndouble      cbrt(double);\nfloat       cbrtf(float);\nlong double cbrtl(long double);\n\ndouble      ceil(double);\nfloat       ceilf(float);\nlong double ceill(long double);\n\ndouble      copysign(double, double);\nfloat       copysignf(float, float);\nlong double copysignl(long double, long double);\n\ndouble      cos(double);\nfloat       cosf(float);\nlong double cosl(long double);\n\ndouble      cosh(double);\nfloat       coshf(float);\nlong double coshl(long double);\n\ndouble      erf(double);\nfloat       erff(float);\nlong double erfl(long double);\n\ndouble      erfc(double);\nfloat       erfcf(float);\nlong double erfcl(long double);\n\ndouble      exp(double);\nfloat       expf(float);\nlong double expl(long double);\n\ndouble      exp2(double);\nfloat       exp2f(float);\nlong double exp2l(long double);\n\ndouble      expm1(double);\nfloat       expm1f(float);\nlong double expm1l(long double);\n\ndouble      fabs(double);\nfloat       fabsf(float);\nlong double fabsl(long double);\n\ndouble      fdim(double, double);\nfloat       fdimf(float, float);\nlong double fdiml(long double, long double);\n\ndouble      floor(double);\nfloat       floorf(float);\nlong double floorl(long double);\n\ndouble      fma(double, double, double);\nfloat       fmaf(float, float, float);\nlong double fmal(long double, long double, long double);\n\ndouble      fmax(double, double);\nfloat       fmaxf(float, float);\nlong double fmaxl(long double, long double);\n\ndouble      fmin(double, double);\nfloat       fminf(float, float);\nlong double fminl(long double, long double);\n\ndouble      fmod(double, double);\nfloat       fmodf(float, float);\nlong double fmodl(long double, long double);\n\ndouble      frexp(double, int *);\nfloat       frexpf(float, int *);\nlong double frexpl(long double, int *);\n\ndouble      hypot(double, double);\nfloat       hypotf(float, float);\nlong double hypotl(long double, long double);\n\nint         ilogb(double);\nint         ilogbf(float);\nint         ilogbl(long double);\n\ndouble      ldexp(double, int);\nfloat       ldexpf(float, int);\nlong double ldexpl(long double, int);\n\ndouble      lgamma(double);\nfloat       lgammaf(float);\nlong double lgammal(long double);\n\nlong long   llrint(double);\nlong long   llrintf(float);\nlong long   llrintl(long double);\n\nlong long   llround(double);\nlong long   llroundf(float);\nlong long   llroundl(long double);\n\ndouble      log(double);\nfloat       logf(float);\nlong double logl(long double);\n\ndouble      log10(double);\nfloat       log10f(float);\nlong double log10l(long double);\n\ndouble      log1p(double);\nfloat       log1pf(float);\nlong double log1pl(long double);\n\ndouble      log2(double);\nfloat       log2f(float);\nlong double log2l(long double);\n\ndouble      logb(double);\nfloat       logbf(float);\nlong double logbl(long double);\n\nlong        lrint(double);\nlong        lrintf(float);\nlong        lrintl(long double);\n\nlong        lround(double);\nlong        lroundf(float);\nlong        lroundl(long double);\n\ndouble      modf(double, double *);\nfloat       modff(float, float *);\nlong double modfl(long double, long double *);\n\ndouble      nan(const char *);\nfloat       nanf(const char *);\nlong double nanl(const char *);\n\ndouble      nearbyint(double);\nfloat       nearbyintf(float);\nlong double nearbyintl(long double);\n\ndouble      nextafter(double, double);\nfloat       nextafterf(float, float);\nlong double nextafterl(long double, long double);\n\ndouble      nexttoward(double, long double);\nfloat       nexttowardf(float, long double);\nlong double nexttowardl(long double, long double);\n\ndouble      pow(double, double);\nfloat       powf(float, float);\nlong double powl(long double, long double);\n\ndouble      remainder(double, double);\nfloat       remainderf(float, float);\nlong double remainderl(long double, long double);\n\ndouble      remquo(double, double, int *);\nfloat       remquof(float, float, int *);\nlong double remquol(long double, long double, int *);\n\ndouble      rint(double);\nfloat       rintf(float);\nlong double rintl(long double);\n\ndouble      round(double);\nfloat       roundf(float);\nlong double roundl(long double);\n\ndouble      scalbln(double, long);\nfloat       scalblnf(float, long);\nlong double scalblnl(long double, long);\n\ndouble      scalbn(double, int);\nfloat       scalbnf(float, int);\nlong double scalbnl(long double, int);\n\ndouble      sin(double);\nfloat       sinf(float);\nlong double sinl(long double);\n\ndouble      sinh(double);\nfloat       sinhf(float);\nlong double sinhl(long double);\n\ndouble      sqrt(double);\nfloat       sqrtf(float);\nlong double sqrtl(long double);\n\ndouble      tan(double);\nfloat       tanf(float);\nlong double tanl(long double);\n\ndouble      tanh(double);\nfloat       tanhf(float);\nlong double tanhl(long double);\n\ndouble      tgamma(double);\nfloat       tgammaf(float);\nlong double tgammal(long double);\n\ndouble      trunc(double);\nfloat       truncf(float);\nlong double truncl(long double);\n\n\n#if defined(_XOPEN_SOURCE) || defined(_BSD_SOURCE)\n#undef  MAXFLOAT\n#define MAXFLOAT        3.40282347e+38F\n#endif\n\n#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)\n#define M_E             2.7182818284590452354   /* e */\n#define M_LOG2E         1.4426950408889634074   /* log_2 e */\n#define M_LOG10E        0.43429448190325182765  /* log_10 e */\n#define M_LN2           0.69314718055994530942  /* log_e 2 */\n#define M_LN10          2.30258509299404568402  /* log_e 10 */\n#define M_PI            3.14159265358979323846  /* pi */\n#define M_PI_2          1.57079632679489661923  /* pi/2 */\n#define M_PI_4          0.78539816339744830962  /* pi/4 */\n#define M_1_PI          0.31830988618379067154  /* 1/pi */\n#define M_2_PI          0.63661977236758134308  /* 2/pi */\n#define M_2_SQRTPI      1.12837916709551257390  /* 2/sqrt(pi) */\n#define M_SQRT2         1.41421356237309504880  /* sqrt(2) */\n#define M_SQRT1_2       0.70710678118654752440  /* 1/sqrt(2) */\n\nextern int signgam;\n\ndouble      j0(double);\ndouble      j1(double);\ndouble      jn(int, double);\n\ndouble      y0(double);\ndouble      y1(double);\ndouble      yn(int, double);\n#endif\n\n#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)\n#define HUGE            3.40282347e+38F\n\ndouble      scalb(double, double);\nfloat       scalbf(float, float);\n\ndouble      significand(double);\nfloat       significandf(float);\n\ndouble      lgamma_r(double, int*);\nfloat       lgammaf_r(float, int*);\n\nfloat       j0f(float);\nfloat       j1f(float);\nfloat       jnf(int, float);\n\nfloat       y0f(float);\nfloat       y1f(float);\nfloat       ynf(int, float);\n#endif\n\n#ifdef _GNU_SOURCE\nlong double lgammal_r(long double, int*);\n\nvoid        sincos(double, double*, double*);\nvoid        sincosf(float, float*, float*);\nvoid        sincosl(long double, long double*, long double*);\n\ndouble      exp10(double);\nfloat       exp10f(float);\nlong double exp10l(long double);\n\ndouble      pow10(double);\nfloat       pow10f(float);\nlong double pow10l(long double);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n","/* \n * File:   extras.c\n * Author: stefano\n * \n * Extras.(h|c) contains a few utilities that are not strictly related to the\n * core functionality.\n */\n\n#include \"extras.h\"\n#include \"utils.h\"\n#include \"stdlib.h\"\n#include \"kernel.h\"\n#include <gsl/gsl_poly.h>\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n\n\n\ndouble K_E_n(const gsl_matrix* alle, double n, double sigma) {\n    double m_1 = MSUN_TO_MJUP(MGET(alle, 0, MASS));\n    double m_2 = MGET(alle, 1, MASS);\n    double m_3 = MGET(alle, 2, MASS);\n    double m_12 = m_1 + m_2;\n    \n    double a_i = MGET(alle, 1, SMA);\n    double a_o = MGET(alle, 2, SMA);\n    \n    double e_i = MGET(alle, 1, ECC);\n    double e_o = MGET(alle, 2, ECC);\n    \n    double xi = acosh(1/e_o) * sqrt(1-e_o*e_o);\n    double E_22 = 4.*SQRT_TWOPI/3. * pow(1-e_o*e_o, 0.75)/(e_o * e_o) * pow(sigma, 5./2.) * exp(-sigma*xi);\n    double I_22 = 9./4. * m_3 / m_12 * POW_3(a_i/a_o) * E_22;\n    \n    double e_i_ind = sqrt(e_i * e_i + I_22 * I_22);\n    double eps_o = sqrt(1-e_i*e_i);\n    \n    double e_eq;\n    if (e_i < 0.) {\n        e_eq = (5./4.) * e_o * m_3 * (m_1 - m_2) * SQR(a_i/a_o) * sigma /\n               (eps_o * fabs(m_1*m_2 - m_12*m_3 * (a_i/a_o) * eps_o * sigma));\n        \n    } else {\n        \n        double A = 0.75 * (m_3 / m_12) * POW_3(a_i/a_o) / POW_3(eps_o);\n        double B = 15./64. * (m_3 / m_12) * (m_1-m_2)/m_12 * POW_4(a_i/a_o) / POW_5(eps_o);\n        double C = 3./4. * (m_1 * m_2 / SQR(m_12)) * SQR(a_i/a_o) / POW_4(eps_o);\n        double D = 15./64. * (m_1 * m_2 / SQR(m_12)) * (m_1-m_2)/m_12 * POW_3(a_i/a_o) * (1+4*e_o * e_o)/(e_o * POW_6(eps_o));\n\n        double a[9] = {-B*B, 2*A*B, B*B + C*C - A*A, \n        -2*(A*B + 4*C*D), A*A + 3*C*C + 16*D*D,\n        -18*C*D, 9./4. * C*C + 24*D*D, -9*C*D, 9*D*D};\n        \n        gsl_poly_complex_workspace * w = gsl_poly_complex_workspace_alloc(9);\n        double z[16];\n        gsl_poly_complex_solve(a, 9, w, z);\n        \n        for (int i = 0; i < 16; i+=2)\n            if (z[i] > 0 && z[i] < 1) {\n                e_eq = z[i];\n                break;\n            }\n        \n        gsl_poly_complex_workspace_free(w);\n    }\n    \n    double alpha = fabs(1-e_i/e_eq);\n    double e_i_oct = (alpha < 1 ? (1+alpha) * e_eq : e_i + 2*e_eq);\n    \n    e_i = MAX(e_i_ind, e_i_oct);\n    double s = -3*e_i + 13./8. * POW_3(e_i) + 5./192. * POW_5(e_i) - 227./3072. * POW_7(e_i);\n    double F = E_22/(TWOPI * n);\n    double M_i = m_3 / (m_12 + m_3);\n    double M_o = (m_1 * m_2 / POW_2(m_12)) * pow(m_12 / (m_12+m_3), 2./3.);\n    double A_n = -9./2. * s * F * (M_i + M_o * pow(n, 2./3.));\n    \n    double E_n = 0.5 * POW_2(sigma-n) - 2.*A_n;\n    /*\n    PRINTNUM(A_n);\n    PRINTNUM(E_n);\n    PRINTNUM(I_22);\n    PRINTNUM(n);\n    PRINTNUM(sigma);\n    PRINTNUM(s);\n    PRINTNUM(F);\n    PRINTNUM(e_i);\n    PRINTNUM(e_i_oct);\n    PRINTNUM(e_i_ind);\n    PRINTNUM(e_eq);\n    */\n    return E_n; \n}\n\n/**\n * This function implements the stability criterion of Mardling, 2008a for coplanar,\n * three body systems. \n * @param alle A matrix of _all_ elements in hierarchical coordinates, as \n * returned by K_getAllElements_jacobi (or supplied by the user).\n * \n * @return One of T_INAPPLICABLE, T_STABLE or T_UNSTABLE. The routine returns T_INAPPLICABLE\n * if one of the following is true: (1) the system contains more of three bodies (returns\n * T_STABLE if two-body system); (2) the mass conditions for which n:1 resonances dominate\n * (m_2/m_1 > 0.01 && m_2/m_1 > 0.01 or m_2/m1 > 0.05 || m_3/m_1 > 0.05). The routine returns \n * T_UNSTABLE if the stability criterion (E_n < 0 and E_(n+1) < 0) is satisfied,\n * T_STABLE otherwise.\n */\nint K_isMstable_coplanar(const gsl_matrix* alle) {\n    \n    if (MROWS(alle) > 3)\n        return T_INAPPLICABLE;\n    \n    if (MROWS(alle) == 2)\n        return T_STABLE;\n    \n    double m_1 = MSUN_TO_MJUP(MGET(alle, 0, MASS));\n    double m_2 = MGET(alle, 1, MASS);\n    double m_3 = MGET(alle, 2, MASS);\n    \n    // outside mass criterion\n    if ((m_2 / m_1 < 0.01 || m_3 / m_1 < 0.01) && (m_2 / m_1 < 0.05 && m_3 / m_1 < 0.05))\n        return T_INAPPLICABLE;\n    \n    // Elements of inner and outer binary\n    double P_i = MGET(alle, 1, PER);\n    double P_o = MGET(alle, 2, PER);\n    double sigma = P_o/P_i;\n    double n = floor(sigma);\n    \n    double E_n = K_E_n(alle, n, sigma);\n    double E_n1 = K_E_n(alle, n+1, sigma);\n    \n    if (E_n < 0 && E_n1 < 0)\n        return T_UNSTABLE;\n    else\n        return T_STABLE;\n}\n\ndouble K_crossval_l1o(ok_kernel* k, int minalgo, int maxiter, double params[]) {\n    \n    int nd = K_getNdata(k);\n    \n    \n    int np = omp_get_max_threads();\n    ok_kernel* ks[np];\n    double lh[np];\n    ok_progress prog = k->progress;\n    \n    for (int p = 0; p < np; p++) {\n        ks[p] = K_clone(k);\n        ks[p]->progress = NULL;\n        lh[p] = 0.;\n    }\n    bool invalid = false;\n    \n    #pragma omp parallel for\n    for (int i = 0; i < nd; i++) {\n        if (invalid)\n            continue;\n        \n        int p = omp_get_thread_num();\n        gsl_matrix_memcpy(ks[p]->system->elements, k->system->elements);\n        gsl_vector_memcpy(ks[p]->params, k->params);\n        \n        K_calculate(ks[p]);\n        double err = ks[p]->compiled[i][T_ERR];\n        int set = (int) (ks[p]->compiled[i][T_SET]);\n        double n = K_getPar(ks[p], set + DATA_SETS_SIZE);\n        \n        \n        ks[p]->compiled[i][T_ERR] = 100000.;\n        \n        K_minimize(ks[p], minalgo, maxiter, params);\n        \n        double s = sqrt(err*err + n*n);\n        double diff = fabs(ks[p]->compiled[i][T_SVAL] - ks[p]->compiled[i][T_PRED]);\n        lh[p] += log10(diff/s);\n        ks[p]->compiled[i][T_ERR] = err;\n        \n        if (prog != NULL && omp_get_thread_num() == 0) {\n            int ret = prog(i * np, nd, ks[p],\n                    \"K_crossVal_l1o\");\n            if (ret == PROGRESS_STOP) {\n                invalid = true;\n            }\n        }\n    }\n \n    double lh2 = 0;\n    for (int p = 0; p < np; p++) {\n        lh2 += lh[p];\n        K_free(ks[p]);\n    }\n    if (invalid)\n        return -1;\n    \n    return fabs(lh2);\n}","//\n//  Integration.c\n//  Systemic Framework\n//\n//\n\n#include <gsl/gsl_matrix_double.h>\n#include <gsl/gsl_odeiv2.h>\n#include \"integration.h\"\n#include \"ode.h\"\n#include \"odex.h\"\n\n#ifndef JAVASCRIPT\n#include \"swift.h\"\n#endif\n\nint ok_last_error(ok_system* system) {\n    if (system->flag & INTEGRATION_FAILURE_CLOSE_ENCOUNTER)\n        return INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n    if (system->flag & INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR)\n        return INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n    \n    return INTEGRATION_SUCCESS;\n}\n\n\ndouble ok_min_distance = RJUP / AU;\nok_system* ok_alloc_system(int nplanets) {\n    ok_system* system = (ok_system*) malloc(sizeof(ok_system));\n    system->nplanets = nplanets;\n    system->epoch = INVALID_NUMBER;\n    system->time = INVALID_NUMBER;\n    system->elements = gsl_matrix_calloc(nplanets + 1, ELEMENTS_SIZE);\n    MSET(system->elements, 0, MASS, 1.);\n    system->xyz = NULL;\n    system->orbits = NULL;\n    system->flag = 0;\n    return system;\n}\n\nvoid ok_free_system(ok_system* system) {\n    if (system == NULL)\n        return;\n    \n    gsl_matrix_free(system->elements);\n    if (system->xyz != NULL)\n        gsl_matrix_free(system->xyz);\n    if (system->orbits != NULL)\n        gsl_matrix_free(system->orbits);\n    \n    free(system);\n}\n\nvoid ok_free_systems(ok_system** system, const unsigned int len) {\n    for (unsigned int i = 0; i < len; i++)\n        ok_free_system(system[i]);\n    free(system);\n}\n\nok_system* ok_copy_system(const ok_system* orig) {\n    ok_system* system = ok_alloc_system(orig->nplanets);\n    MATRIX_MEMCPY(system->elements, orig->elements);\n    if (orig->orbits != NULL)\n        system->orbits = ok_matrix_copy(orig->orbits);\n    if (orig->xyz != NULL)\n        system->xyz = ok_matrix_copy(orig->xyz);\n    system->epoch = orig->epoch;\n    system->time = orig->time;\n    system->flag = orig->flag;\n    return system;\n}\n\n\nvoid ok_copy_system_to(const ok_system* orig, ok_system* dest) {\n    MATRIX_MEMCPY(dest->elements, orig->elements);\n    if (orig->orbits != NULL) {\n        if (dest->orbits == NULL)\n            dest->orbits = ok_matrix_copy(orig->orbits);\n        else\n            MATRIX_MEMCPY(dest->orbits, orig->orbits);\n    }\n    if (orig->xyz != NULL) {\n        if (dest->xyz == NULL)\n            dest->xyz = ok_matrix_copy(orig->xyz);\n        else\n            MATRIX_MEMCPY(dest->xyz, orig->xyz);\n    }\n    dest->epoch = orig->epoch;\n    dest->time = orig->time;\n}\n\n\nvoid ok_resize_system(ok_system* system, const int npnew) {\n    \n    gsl_matrix* old = system->elements;\n    assert(old != NULL);\n    assert(npnew >= 1);\n    \n    gsl_matrix* new = gsl_matrix_calloc(npnew, ELEMENTS_SIZE); \n    for (int i = 0; i < min(npnew, old->size1); i++) {\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            MSET(new, i, j, MGET(old, i, j));\n    }\n    \n    gsl_matrix_free(old);\n    system->elements = new;\n}\n\n\ndouble ok_acalc(const double P, const double Mcenter, const double Mp) {\n    double a = cbrt(P * P * (Mcenter + Mp) / (4.*M_PI*M_PI));\n    return a;\n}\n\ndouble ok_pcalc(const double a, const double Mcenter, const double Mp) {\n    return sqrt(a * a * a / (Mcenter + Mp)) * 2. * M_PI;\n}\n\nvoid ok_setup(ok_system* system) {\n    system->flag &= ~(INTEGRATION_FAILURE_CLOSE_ENCOUNTER | INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR);\n    \n    if (system->orbits != NULL && MROWS(system->orbits) != system->nplanets + 1) {\n        gsl_matrix_free(system->orbits);\n        system->orbits = NULL;\n    }\n    if (system->orbits == NULL)\n        system->orbits = gsl_matrix_calloc(system->nplanets + 1, ELEMENTS_SIZE + 1);\n    \n    if (system->xyz != NULL && MROWS(system->xyz) != system->nplanets + 1) {\n        gsl_matrix_free(system->xyz);\n        system->xyz = NULL;\n    }\n    if (system->xyz == NULL)\n        system->xyz = gsl_matrix_calloc(system->nplanets + 1, 7);\n    \n    \n    // Copy elements matrix into orbits matrix (for instance, to carry on flags\n    // such as ORD)\n    MATRIX_MEMCPY(system->orbits, system->elements);\n    \n    double Mcenter = MSUN_TO_INT(MGET(system->elements, 0, MASS));\n\n    MSET(system->orbits, 0, MASS, Mcenter);\n    \n    for (int i = 1; i < system->nplanets + 1; i++) {\n        double mass = MJUP_TO_INT(MGET(system->elements, i, MASS));\n        double per = MGET(system->elements, i, PER);\n        \n        double a = ok_acalc(per, Mcenter, mass);\n        \n        double e = MGET(system->elements, i, ECC);\n        double lop = MGET(system->elements, i, LOP);\n        double ma = MGET(system->elements, i, MA);\n        double node = MGET(system->elements, i, NODE);\n        double inc = MGET(system->elements, i, INC);\n        \n        MSET(system->orbits, i, PER, per);\n        MSET(system->orbits, i, MASS, mass);\n        MSET(system->orbits, i, MA, TO_RAD(ma));\n        MSET(system->orbits, i, ECC, e);\n        MSET(system->orbits, i, LOP, TO_RAD(lop));\n        MSET(system->orbits, i, INC, TO_RAD(inc));\n        MSET(system->orbits, i, NODE, TO_RAD(node));\n        MSET(system->orbits, i, SMA, a);\n        \n        if (system->flag & JACOBI) {\n            Mcenter += mass;\n        }\n    }\n    \n    system->time = system->epoch;\n    ok_el2cart(system, system->xyz);\n}\n\n\n\nvoid ok_el2cart(ok_system* system, gsl_matrix* xyz) {\n    gsl_matrix_set_zero(xyz);\n    \n    double Mcent = MGET(system->orbits, 0, MASS);\n    MSET(xyz, 0, 0, Mcent);\n    \n    double xc[6] = {0., 0., 0., 0., 0., 0.};\n    \n    for (int i = 1; i < system->nplanets + 1; i++) {\n        \n        double mass = MGET(system->orbits, i, MASS);\n        \n        double ma = MGET(system->orbits, i, MA);\n        double lop = MGET(system->orbits, i, LOP);    \n        \n        double e = MGET(system->orbits, i, ECC);\n        double inc = MGET(system->orbits, i, INC);\n        double node = MGET(system->orbits, i, NODE);\n        double q = MGET(system->orbits, i, SMA) * (1. - e);\n        \n        double mu = mass + Mcent;\n        double x, y, z, u, v, w;\n        \n        mco_el2x__(mu, q, e, inc, lop, node, ma,\n                   &x, &y, &z, &u, &v, &w);\n        \n        if (fabs(y) < 1e-23) \n            y = 0.;\n        if (fabs(v) < 1e-23) \n            v = 0.;\n        \n        MSET(xyz, i, 0, mass);\n        MSET(xyz, i, X, x + xc[0]);\n        MSET(xyz, i, Y, y + xc[1]);\n        MSET(xyz, i, Z, z + xc[2]);\n        MSET(xyz, i, VX, u + xc[3]);\n        MSET(xyz, i, VY, v + xc[4]);\n        MSET(xyz, i, VZ, w + xc[5]);\n        \n        if (system->flag & JACOBI) {\n            xc[0] += (x * mass + xc[0] * Mcent)/(Mcent + mass);\n            xc[1] += (y * mass + xc[1] * Mcent)/(Mcent + mass);\n            xc[2] += (z * mass + xc[2] * Mcent)/(Mcent + mass);\n            xc[3] += (u * mass + xc[3] * Mcent)/(Mcent + mass);\n            xc[4] += (v * mass + xc[4] * Mcent)/(Mcent + mass);\n            xc[5] += (w * mass + xc[5] * Mcent)/(Mcent + mass);\n            Mcent += mass;\n        }\n    }\n    \n}\n\nvoid ok_to_cm(ok_system* system, gsl_matrix* xyz) {\n    double com[7] = {0.,0.,0.,0.,0.,0.,0.};\n    \n    for (int i = 0; i < system->nplanets + 1; i++) {\n        com[0] += MGET(xyz, i, 0);\n        for (int j = 1; j < 7; j++)\n            com[j] += MGET(xyz, i, 0) * MGET(xyz, i, j);\n    }\n    \n    for (int i = 0; i < system->nplanets + 1; i++) {\n        for (int j = 1; j < 7; j++)\n            MINC(xyz, i, j, - com[j]/com[0]);\n    }   \n}\n\nvoid ok_to_star(ok_system* system, gsl_matrix* xyz) {\n    for (int i = 1; i < system->nplanets + 1; i++)\n        for (int j = 1; j < 7; j++)\n            MINC(xyz, i, j, -MGET(xyz, 0, j));\n    for (int j = 1; j < 7; j++)\n        MSET(xyz, 0, j, 0.);\n}\n\nvoid ok_cart2el(ok_system* system, gsl_matrix* els, bool internal) {\n    \n    gsl_matrix* xyz = system->xyz;\n    double xc[6] = {MGET(xyz, 0, X), MGET(xyz, 0, Y), MGET(xyz, 0, Z),\n                MGET(xyz, 0, VX), MGET(xyz, 0, VY), MGET(xyz, 0, VZ)};\n    double Mcent = MGET(xyz, 0, 0);\n    \n    for (int i = 1; i < system->nplanets + 1; i++) {\n        double mass = MGET(xyz, i, 0);\n        double mu = mass + Mcent;\n        double x, y, z, u, v, w;\n        \n        x = MGET(xyz, i, X) - xc[0];\n        y = MGET(xyz, i, Y) - xc[1];\n        z = MGET(xyz, i, Z) - xc[2];\n        u = MGET(xyz, i, VX) - xc[3];\n        v = MGET(xyz, i, VY) - xc[4];\n        w = MGET(xyz, i, VZ) - xc[5];\n\n        double q, e, inc, p, n, l;\n        \n        mco_x2el__(&mu, &x, &y, &z, &u, &v, &w, &q, &e, &inc, &p, &n, &l);\n        \n        double a = q / (1-e);\n        double P = ok_pcalc(a, Mcent, mass);\n        \n        MSET(els, i, PER, P);\n        MSET(els, i, MASS, mass);\n        MSET(els, i, MA, l);\n        MSET(els, i, ECC, (e > 1e-6 ? e : 0.));\n        MSET(els, i, INC, inc);\n        MSET(els, i, NODE, n);\n        MSET(els, i, SMA, a);\n        MSET(els, i, LOP, p);\n        \n        if (system->flag & JACOBI) {\n            xc[0] = (xc[0] * Mcent + MGET(xyz, i, X) * mass) / (Mcent + mass);\n            xc[1] = (xc[1] * Mcent + MGET(xyz, i, Y) * mass) / (Mcent + mass);\n            xc[2] = (xc[2] * Mcent + MGET(xyz, i, Z) * mass) / (Mcent + mass);\n            xc[3] = (xc[3] * Mcent + MGET(xyz, i, VX) * mass) / (Mcent + mass);\n            xc[4] = (xc[4] * Mcent + MGET(xyz, i, VY) * mass) / (Mcent + mass);\n            xc[5] = (xc[5] * Mcent + MGET(xyz, i, VZ) * mass) / (Mcent + mass);\n            \n            Mcent += mass;   \n        }\n    }\n    \n}\n\nunsigned long int ok_force_counter = 0;\n\nint ok_force(double t, const double y[], double f[], void* params) {\n    ok_force_counter++;\n    ok_system* system = (ok_system*) params;\n    const int N = system->nplanets + 1;\n    \n    for (int i = 0; i < 7 * N; i++)\n        f[i] = 0.;\n    \n    for (int i = 0; i < N; i++) {\n        f[i * 7 + 1] = y[i * 7 + 4];\n        f[i * 7 + 2] = y[i * 7 + 5];\n        f[i * 7 + 3] = y[i * 7 + 6];\n        \n        for (int j = i + 1; j < N; j++) {\n            double m1 = y[i * 7];\n            double m2 = y[j * 7];\n            \n            double i_rsq = 1./(sqr(y[i * 7 + 1] - y[j * 7 + 1]) +\n                sqr(y[i * 7 + 2] - y[j * 7 + 2]) +\n                sqr(y[i * 7 + 3] - y[j * 7 + 3]));\n            \n            double i_r = sqrt(i_rsq);\n            \n            if (i_r < ok_min_distance) {\n                if (i == 0 || j == 0) {\n                    system->flag |= INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n                    return INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n                }\n                else {\n                    system->flag |= INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n                    return INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n                }\n            }\n            \n            double a1 = -m2 * i_rsq * i_r;\n            double a2 = -m1 * i_rsq * i_r;\n            \n            for (int d = 1; d <= 3; d++) {\n                double w = (y[i * 7 + d] - y[j * 7 + d]);\n                f[i * 7 + d + 3] += w * a1;\n                f[j * 7 + d + 3] -= w * a2;\n            }\n        }        \n    }\n\n    /*\n    static unsigned int calls = 0;\n    calls++;\n    if (calls % 1000000 == 0)\n        printf(\"rk: %u\\n\", calls);\n    */\n    \n    return INTEGRATION_SUCCESS;\n}\n\nint ok_force_on(double t, const double y[], double f[], void* params, int i) {\n    \n    ok_system* system = (ok_system*) params;\n    \n    const int N = system->nplanets + 1;\n    f[0] = f[1] = f[2] = 0.;\n    \n    for (int j = 0; j < N; j++) {\n        if (j == i)\n            continue;\n        \n        double m2 = y[j * 7];\n\n        double i_rsq = 1./(sqr(y[i * 7 + 1] - y[j * 7 + 1]) +\n            sqr(y[i * 7 + 2] - y[j * 7 + 2]) +\n            sqr(y[i * 7 + 3] - y[j * 7 + 3]));\n\n        double i_r = sqrt(i_rsq);\n\n        if (i_r < ok_min_distance) {\n            if (i == 0 || j == 0)\n                return INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n            else\n                return INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n        }\n\n        double a1 = -m2 * i_rsq * i_r;\n\n        for (int d = 1; d <= 3; d++) {\n            double w = (y[i * 7 + d] - y[j * 7 + d]);\n            f[d-1] += w * a1;\n        }\n    }        \n    \n    return INTEGRATION_SUCCESS;\n}\n\n\nint ok_force_jerk(double t, const double y[], double f[], double jerk[], void* params) {\n    ok_system* system = (ok_system*) params;\n    \n    const int N = system->nplanets + 1;\n    for (int i = 0; i < 7*N; i++) {\n        f[i] = 0.;\n        if (i < 3*N+1)\n            jerk[i] = 0.;\n    }\n    \n    double t_min = 0; \n    \n    for (int i = 0; i < N; i++) {\n        const double* xi = y + i*7;\n        double* fi = f + i*7;\n        fi[1] = xi[4];\n        fi[2] = xi[5];\n        fi[3] = xi[6];\n        \n        for (int j = i + 1; j < N; j++) {\n            const double* xj = y + j * 7;\n            double* fj = f + j*7;\n            const double i_rsq = 1./(sqr(xi[1] - xj[1]) +\n                sqr(xi[2] - xj[2]) +\n                sqr(xi[3] - xj[3]));\n            \n            const double vij2 = sqr(xi[4]-xj[4]) + sqr(xi[5]-xj[5]) + sqr(xi[6] - xj[6]);\n            const double i_r = sqrt(i_rsq);\n            const double i_r3 = i_rsq * i_r;\n            \n            if (i_r < ok_min_distance) {\n                if (i == 0 || j == 0) {\n                    system->flag |= INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n                    return INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR;\n                }\n                else {\n                    system->flag |= INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n                    return INTEGRATION_FAILURE_CLOSE_ENCOUNTER;\n                }\n            }\n            \n            const double a1 = -xj[0] * i_r3;\n            const double a2 = -xi[0] * i_r3;\n            \n            const double jw =  i_rsq * ((xi[1] - xj[1]) * (xi[4] - xj[4]) +\n                (xi[2]-xj[2]) * (xi[5]-xj[5]) + (xi[3]-xj[3]) * (xi[6]-xj[6]));\n            \n            for (int d = 1; d <= 3; d++) {\n                const double w = (xi[d] - xj[d]);\n                const double vd = (xi[d+3]-xj[d+3]);\n                fi[d + 3] += w * a1;\n                fj[d + 3] -= w * a2;\n                \n                jerk[i * 3 + d - 1] += a1 * (vd - 3.*jw * w);\n                jerk[j * 3 + d - 1] -= a2 * (vd - 3.*jw * w);\n            }\n            \n            t_min = MAX(MAX(MAX((i_rsq * vij2), t_min), -a1), -a2);\n        }\n    }\n    \n    for (int i = 0; i < N; i++)\n        t_min = MAX(t_min, \n                (sqr(jerk[i * 3]) + sqr(jerk[i * 3 + 1]) + sqr(jerk[i * 3 + 2]))/\n                (sqr(f[i*7 + 4]) + sqr(f[i * 7 + 5]) + sqr(f[i * 7 + 6])));\n    \n    jerk[3*N] = t_min;\n    /*\n    static unsigned int calls = 0;\n    calls++;\n    */\n    return GSL_SUCCESS;\n}\n\n\nint ok_star_force(double t, const double y[], double f[], void* params) {\n    ok_system* system = (ok_system*) params;\n    \n    const int N = system->nplanets + 1;\n    \n    for (int i = 0; i < 7 * N; i++)\n        f[i] = 0.;\n    \n    for (int i = 0; i < N; i++) {\n        f[i * 7 + 1] = y[i * 7 + 4];\n        f[i * 7 + 2] = y[i * 7 + 5];\n        f[i * 7 + 3] = y[i * 7 + 6];\n        \n        if (i != 0) {\n            double m2 = y[i * 7];\n            \n            double i_rsq = 1./(sqr(y[i * 7 + 1] - y[1]) +\n                sqr(y[i * 7 + 2] - y[2]) +\n                sqr(y[i * 7 + 3] - y[3]));\n            \n            double i_r = sqrt(i_rsq);\n            \n            if (i_r < ok_min_distance) {\n                return GSL_ERANGE;\n            }\n            \n            double a1 = -m2 * i_rsq * i_r;\n            \n            for (int d = 1; d <= 3; d++) {\n                double w = (y[i * 7 + d] - y[d]);\n                f[i * 7 + d + 3] += w * a1;\n            }\n        }        \n    }\n\n\n    return GSL_SUCCESS;\n}\n\nint ok_star_force_on(double t, const double y[], double f[], void* params, int i) {\n    if (i == 0) {\n        f[0] = f[1] = f[2] = 0.;\n        return INTEGRATION_SUCCESS;\n    }\n    \n    double m2 = y[i * 7];\n\n    double i_rsq = 1./(sqr(y[i * 7 + 1] - y[1]) +\n        sqr(y[i * 7 + 2] - y[2]) +\n        sqr(y[i * 7 + 3] - y[3]));\n\n    double i_r = sqrt(i_rsq);\n\n    if (i_r < ok_min_distance) {\n        return GSL_ERANGE;\n    }\n\n    double a1 = -m2 * i_rsq * i_r;\n\n    for (int d = 1; d <= 3; d++) {\n        double w = (y[i * 7 + d] - y[d]);\n        f[d-1] = w * a1;\n    }\n\n    return GSL_SUCCESS;\n}\n\nint ok_jac(double t, const double y[], double *dfdy, \n           double dfdt[], void *params) {\n    ok_system* system = (ok_system*) params;\n    const int N = system->nplanets + 1;\n    \n    gsl_matrix_view dfdy_mat = gsl_matrix_view_array (dfdy, 7 * N, 7 * N);\n    gsl_matrix * jac = &dfdy_mat.matrix; \n    gsl_matrix_set_zero(jac);\n    \n    for (int i = 0; i < N; i++) {\n        // the N * 7-th row [mass row] is always 0\n        \n        // df_x / dx = 0\n        // df_x_i / dv_i = 1        \n        MSET(jac, i * 7 + 1, i * 7 + 4, 1);\n        MSET(jac, i * 7 + 2, i * 7 + 5, 1);\n        MSET(jac, i * 7 + 3, i * 7 + 6, 1);        \n        \n        // df_v / dv = 0\n        // df_v_i / dx =\n        \n        for (int j = i+1; j < N; j++) {\n            const double inv_rij = 1./sqrt(sqr(y[i * 7 + 1] - y[j * 7 + 1]) + \n                                        sqr(y[i * 7 + 2] - y[j * 7 + 2]) + \n                                        sqr(y[i * 7 + 3] - y[j * 7 + 3]));\n            const double inv_rij_3 = inv_rij * inv_rij * inv_rij;\n            const double inv_rij_5 = inv_rij_3 * inv_rij * inv_rij;\n            \n            for (int m = 1; m <= 3; m++) \n                for (int n = 1; n <= 3; n++) {\n                    double term = - (y[i * 7 + m] - y[j * 7 + m])\n                         * (y[i * 7 + n] - y[j * 7 + n]) * inv_rij_5;\n                    \n                    if (m == n)\n                        term += - inv_rij_3;\n                    \n                    MINC(jac, i * 7 + m + 3, i * 7 + n, y[j * 7] * term);\n                    MINC(jac, j * 7 + m + 3, j * 7 + n, - y[i * 7] * term);   \n                }\n\n        }\n    }\n    return GSL_SUCCESS;\n}\n\nok_integrator_options defoptions = { 1e-13, 1e-13, 0.15, 1., 1e-6, 2, true, &ok_force, &ok_jac, &ok_force_jerk, NULL, NULL, NULL };\n\n/// This routine integrates the system in time. An array of snapshots taken at each time specified\n/// by the times vector is returned. \nok_system** ok_integrate_gsl(ok_system* initial, const gsl_vector* times, ok_integrator_options* options, const gsl_odeiv2_step_type * solver,\n        ok_system** bag, int* error) {\n    \n    // Check that the system has been set-up\n    assert(initial->xyz != NULL);\n    // Check input arguments\n    assert(times != NULL);\n    assert(solver != NULL);\n    \n    const double startTime = initial->epoch;\n    const int NDIMS = initial->nplanets + 1;\n    \n    // Allocate the return array of snapshots\n    const int SAMPLES = times->size;\n   \n    if (bag == NULL) {\n        bag = (ok_system**) calloc(SAMPLES, sizeof(ok_system*));\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i] = ok_copy_system(initial);\n            bag[i]->epoch = initial->epoch;\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    } else {\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i]->epoch = initial->epoch;\n            bag[i]->flag = initial->flag;\n            //MATRIX_MEMCPY(bag[i]->elements, initial->elements);\n            //MATRIX_MEMCPY(bag[i]->orbits, initial->orbits);\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    }\n\n    // Initialize the GSL structures to solve the ODE.\n    gsl_odeiv2_step *stepper = gsl_odeiv2_step_alloc(solver, NDIMS * 7);\n    gsl_odeiv2_control * control = gsl_odeiv2_control_standard_new(options->abs_acc, options->rel_acc, 1., 1.);\n    gsl_odeiv2_evolve * e = gsl_odeiv2_evolve_alloc (NDIMS * 7);\n    \n    gsl_odeiv2_system eqns;\n    eqns.dimension = NDIMS * 7;\n    eqns.function = options->force;\n    eqns.params = initial;\n    \n    // Allocates the temporary buffer to hold cartesian coordinates\n    double prevTime = startTime;\n    gsl_matrix* prevOrbits = initial->orbits;\n    \n    double h = 0.01;\n    \n    if (options->buffer == NULL || options->buffer->size < NDIMS*7) {\n        if (options->buffer != NULL)\n            gsl_vector_free(options->buffer);\n        options->buffer = gsl_vector_alloc(NDIMS*7);\n    }\n    \n    double* xyz = options->buffer->data;\n    MATRIX_MEMCPY_TOARRAY(xyz, initial->xyz);\n    \n    ok_progress progress = options->progress;\n    \n    // Loop through the times vector\n    for (int i = 0; i < SAMPLES; i++) {\n        double time = times->data[i];\n\n        // Integrate between prevTime and time\n        if (fabs(time - prevTime) > 1e-10) {\n            while (fabs(time - prevTime) > 1e-10) {\n                h = copysign(h, time-prevTime);\n                const int result = gsl_odeiv2_evolve_apply(e, control, stepper, &eqns, &prevTime, time, &h, xyz);\n                \n                if (result != GSL_SUCCESS) {\n                    if (i == 0) {\n                        if (error != NULL) {\n                            *error = ok_last_error(bag[i]);\n                        }\n                        \n                        for (int j = 0; j < SAMPLES; j++)\n                            ok_free_system(bag[i]);\n                        free(bag);\n                        \n                        \n                        gsl_odeiv2_control_free(control);\n                        gsl_odeiv2_evolve_free(e);\n                        gsl_odeiv2_step_free(stepper);\n\n                        \n                        return NULL;\n                    } else {\n                        if (error != NULL) {\n                            *error = ok_last_error(bag[i]);\n                        }\n                        \n                        for (int j = i - 1; j < SAMPLES; j++) {\n                            bag[j]->time = bag[j]->epoch = bag[i]->time;\n                            gsl_matrix_set_all(bag[j]->xyz, INVALID_NUMBER);\n                            gsl_matrix_set_all(bag[j]->orbits, INVALID_NUMBER);\n                        }\n                        \n                        gsl_odeiv2_control_free(control);\n                        gsl_odeiv2_evolve_free(e);\n                        gsl_odeiv2_step_free(stepper);\n                        \n                        \n                        return bag;\n                    } \n                }\n            }\n        } else {\n            if (i == 0)\n                MATRIX_MEMCPY_TOARRAY(xyz, initial->xyz);\n            else\n                MATRIX_MEMCPY_TOARRAY(xyz, bag[i-1]->xyz);\n        };\n        \n        \n        // Set up the return vector\n        bag[i]->time = bag[i]->epoch = time;\n       \n        MATRIX_MEMCPY_FROMARRAY(bag[i]->xyz, xyz);\n        if (options == NULL || options->calc_elements) {\n                MATRIX_MEMCPY(bag[i]->orbits, prevOrbits);\n                ok_cart2el(bag[i], bag[i]->orbits, true);\n        }\n        prevOrbits = bag[i]->orbits;\n        \n        \n        // Ensures that the force/jacobian routines are passed the most recent state of\n        // the system\n        eqns.params = bag[i];\n        prevTime = time;\n        \n        if (progress != NULL) {\n            \n            int ret = progress(i, SAMPLES, NULL, \"Integration\");\n            \n            if (ret == PROGRESS_STOP) {\n                for (int i = 0; i < SAMPLES; i++)\n                        ok_free_system(bag[i]);\n                \n                free(bag);\n                gsl_odeiv2_control_free(control);\n                gsl_odeiv2_evolve_free(e);\n                gsl_odeiv2_step_free(stepper);\n\n                if (error != NULL) {\n                    *error = INTEGRATION_FAILURE_STOPPED;\n                }\n                return NULL;\n            }\n        }\n    }\n    \n    gsl_odeiv2_control_free(control);\n    gsl_odeiv2_evolve_free(e);\n    gsl_odeiv2_step_free(stepper);\n    \n    if (error != NULL)\n        *error = INTEGRATION_SUCCESS;\n\n    return bag;\n}\n\nok_system** ok_integrate_kep(ok_system* initial, const gsl_vector* times, \n                             ok_integrator_options* options, ok_system** bag, int* error) {\n    \n    assert(initial->orbits != NULL);\n    \n    const double startTime = initial->epoch;\n    const int NDIMS = initial->nplanets + 1;\n    \n    // Allocate the return array of snapshots\n    const int SAMPLES = times->size;\n    if (bag == NULL) {\n        bag = (ok_system**) calloc(SAMPLES, sizeof(ok_system*));\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i] = ok_copy_system(initial);\n            bag[i]->epoch = initial->epoch;\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    } else {\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i]->epoch = initial->epoch;\n            bag[i]->flag = initial->flag;\n            MATRIX_MEMCPY(bag[i]->elements, initial->elements);\n            MATRIX_MEMCPY(bag[i]->orbits, initial->orbits);\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    }\n    \n    double prevTime = startTime;\n    ok_system* prevSystem = initial;\n    \n    double n[NDIMS];\n    for (int i = 1; i < NDIMS; i++)\n        n[i] = 2*M_PI/MGET(prevSystem->orbits, i, PER);\n    \n    // Loop through the times vector\n    for (int i = 0; i < SAMPLES; i++) {\n        \n        double dt = times->data[i] - prevTime;\n        for (int j = 1; j < NDIMS; j++) {\n            double ma = RADRANGE(MGET(prevSystem->orbits, j, MA) + n[j] * dt);\n            MSET(bag[i]->orbits, j, MA, ma);\n        }\n        \n        bag[i]->time = times->data[i];\n        bag[i]->epoch = bag[i]->time;\n        prevTime = times->data[i];\n        prevSystem = bag[i];\n        ok_el2cart(bag[i], bag[i]->xyz);\n    }\n    \n    if (error != NULL)\n        *error = INTEGRATION_SUCCESS;\n    \n    return bag;\n}\n\nok_integrator* ok_integrators[4];\n\nok_system** ok_integrate(ok_system* initial, const gsl_vector* times, ok_integrator_options* options, const int integrator,\n        ok_system** bag, int* error) {\n    // Check that the system has been set-up\n    assert(initial->xyz != NULL);\n    // Check input arguments\n    assert(times != NULL);\n    \n    assert(! IS_INVALID(initial->epoch));\n    assert(options != NULL);\n    \n    if (IS_INVALID(initial->time))\n        initial->time = initial->epoch;\n    \n    \n    switch (integrator) {\n        case KEPLER:\n            return ok_integrate_kep(initial, times, options, bag, error);\n            break;\n        case RK45:\n            return ok_integrate_gsl(initial, times, options, gsl_odeiv2_step_rkf45, bag, error);\n            break;\n        case RK89:\n            return ok_integrate_gsl(initial, times, options, gsl_odeiv2_step_rk8pd, bag, error);\n            break;\n#ifndef JAVASCRIPT\n        case ADAMS: \n            return ok_integrate_ode(initial, times, options, bag, error);\n        case BULIRSCHSTOER: \n            return ok_integrate_odex(initial, times, options, bag, error);\n        case SWIFTRMVS: \n            return ok_integrate_swift(initial, times, options, bag, error);\n#endif         \n    }\n    \n    return NULL;\n}\n\n\n\ndouble ok_get_rv(ok_system* sys) {\n    assert(sys->xyz != NULL);    \n    ok_to_cm(sys, sys->xyz);\n    double rv = -MGET(sys->xyz, 0, VZ);\n    rv = AUPDAY_TO_MPS(rv);\n    return rv;\n}\n\ngsl_matrix* ok_get_rvs(ok_system** sys, int len) {\n    gsl_matrix* ret = gsl_matrix_alloc(len, 2);\n    \n    for (int i = 0; i < len; i++) {\n        MSET(ret, i, 0, sys[i]->time);\n        MSET(ret, i, 1, ok_get_rv(sys[i]));\n    }\n    return ret;\n}\n\ngsl_matrix* ok_get_xyzs(ok_system** bag, int len) {\n    int N = bag[0]->nplanets + 1;\n    gsl_matrix* xyzs = gsl_matrix_calloc(len, 7 * N + 1);\n    \n    for (int i = 0; i < len; i++) {\n        assert(bag[i]->xyz != NULL);\n        \n        MSET(xyzs, i, 0, bag[i]->time);\n        \n        for (int j = 0; j < N; j++)\n            for (int p = 0; p < 7; p++)\n                MSET(xyzs, i, j * 7 + p + 1, MGET(bag[i]->xyz, j, p));\n    }\n    \n    return xyzs;\n}\n\ngsl_matrix* ok_get_els(ok_system** bag, int len, bool internal) {\n    int N = bag[0]->nplanets + 1;\n    gsl_matrix* els = gsl_matrix_calloc(len, N * ELEMENTS_SIZE + 1);\n    \n    for (int i = 0; i < len; i++) {\n        assert(bag[i]->orbits != NULL);\n        \n        MSET(els, i, 0, bag[i]->time);\n        \n        for (int j = 0; j < N; j++)\n            for (int p = 0; p < ELEMENTS_SIZE; p++) {\n                double v = MGET(bag[i]->orbits, j, p);\n                \n                if (p == MASS && !internal)\n                    v = INT_TO_MJUP(v);\n                else if ((p == MA || p == LOP || p == INC || p == NODE) && !internal)\n                    v = TO_DEG(v);\n                \n                MSET(els, i, j * ELEMENTS_SIZE + p + 1, v);\n            }\n    }\n    \n    return els;\n}\n\n\n\n/**\n * Returns the time of the transit closest to the time of the current state of the system for the specified planet.\n * @param state pointer to a ok_system structure containing cartesian coords + elements, time and epoch.\n * @param plidx index of the planet (1..n)\n * @param options NULL for the default integrator options, or pass a pointer to an ok_integrator_options structure\n * @param intMethod integration method (one of the builtin integrators: KEPLER, RK5, RK8, HERMITE, HERMITE_ACC, SWIFT_BS, SWIFT_RMVS or\n * a custom integrator)\n * @param eps tolerance on the time\n * @return Closest transit to the time specified in state\n */\nint ok_find_closest_transit(ok_system* state, const int plidx, ok_integrator_options* options, const int intMethod, const double eps, const int type, double* timeout, int* error) {\n    // Find planet tagged with the specified index (ORD column), since internally we might keep planets sorted\n    // by period.\n    \n    if (IS_INVALID(state->time) || IS_INVALID(state->epoch)) {\n        *(timeout) = INVALID_NUMBER;\n        return 0;\n    }\n    \n    int pidx = plidx;\n    int retval = OK_SUCCESS;\n    \n    ok_to_star(state, state->xyz);\n    options->iterations = 1;\n    \n    for (int i = 1; i < state->elements->size1; i++) {\n        if (pidx == (int) MGET(state->elements, i, ORD)) {\n            pidx = i;\n            break;\n        }\n    }\n    \n    double t;\n    \n\n    // Calculate approximate time of closest transit. Angles in the orbits matrix are in radians,\n    // with epoch stored in state->epoch.\n    double aop = MGET(state->orbits, pidx, LOP) - MGET(state->orbits, pidx, NODE);\n    double per = MGET(state->orbits, pidx, PER);\n    double n = 2*M_PI/per;\n    double tau = (n * state->time - MGET(state->orbits, pidx, MA))/n;\n    double e = MGET(state->orbits, pidx, ECC);\n\n    // Elliptic expansion; fail if e > 0.6. Should handle this case later.\n    if (e > 0.6) {\n        *timeout = INVALID_NUMBER;\n        return OK_NOCONV;\n    }\n\n    double ftra = RADRANGE(0.5 * M_PI - aop);\n    \n    if (type == TDS_SECONDARY)\n        ftra += M_PI;\n    \n    double M_1 = RADRANGE(ftra-2.*e*sin(ftra)+0.75*e*e*sin(2*ftra));\n    t = M_1/n + tau;\n\n    if (fabs(t - state->time - per) < fabs(t-state->time))\n        t -= per;\n    else if (fabs(t - state->time + per) < fabs(t-state->time))\n        t += per;\n    \n    if (IS_INVALID(t) || IS_INVALID(state->epoch)) {\n        *(timeout) = INVALID_NUMBER;\n        return 0;\n    }\n        \n    // Allocate working space\n    double fout[3];\n    \n    gsl_vector* times = gsl_vector_alloc(1);\n    \n    ok_system** bag = NULL;\n    VSET(times, 0, t);\n    bag = ok_integrate(state, times, options, intMethod, bag, error);\n    ok_system* buf = ok_copy_system(bag[0]);\n    \n    double diff = DBL_MAX;\n    int steps = 0;\n    \n    while (diff > eps) {\n        // Center on star\n        ok_to_star(buf, buf->xyz);\n        \n        // Calculate cartesian accelerations\n        if (intMethod != KEPLER)\n            ok_force_on(buf->time, buf->xyz->data, fout, buf, pidx);\n        else\n            ok_star_force_on(buf->time, buf->xyz->data, fout, buf, pidx);\n        \n        double rs_1 = MGET(buf->xyz, pidx, X) * MGET(buf->xyz, pidx, VX) +\n                MGET(buf->xyz, pidx, Y) * MGET(buf->xyz, pidx, VY);\n        double rs_2 = MGET(buf->xyz, pidx, VX) * MGET(buf->xyz, pidx, VX) +\n                MGET(buf->xyz, pidx, X) * fout[0] +\n                MGET(buf->xyz, pidx, VY) * MGET(buf->xyz, pidx, VY) +\n                MGET(buf->xyz, pidx, Y) * fout[1];\n        \n        double t_1 = t - rs_1/rs_2;\n        diff = fabs(t-t_1);\n        \n        t = t_1;\n        VSET(times, 0, t);\n        bag = ok_integrate(buf, times, options, intMethod, bag, error);\n        \n        // Set the new system t\n        ok_copy_system_to(bag[0], buf);\n        \n        \n        if (steps > 30) {\n            printf(\"breaking, %d %e %e %e %e\\n\", steps, t, sqrt(SQR(MGET(buf->xyz, pidx, X)) + SQR(MGET(buf->xyz, pidx, Y))), diff,\n                    MGET(buf->orbits, pidx, SMA));\n            retval = OK_NOCONV;\n            t = INVALID_NUMBER;\n            break;\n        }\n        \n        steps++;\n    };\n    \n    ok_free_system(buf);\n    ok_free_system(bag[0]);\n    ok_free_system(bag[1]);\n    free(bag);\n    gsl_vector_free(times);\n    options->iterations = 2;\n    *timeout = t;\n    \n    return retval;\n}\n\ngsl_vector* ok_find_transits(ok_system** bag, const int len, const int pidx, const int intMethod, const double eps, const int flag[], int* error) {\n    gsl_vector* times = gsl_vector_alloc(len);\n    ok_integrator_options o;\n    memcpy(&o, &defoptions, sizeof(ok_integrator_options));\n    o.calc_elements = false;\n    \n    for (int i = 0; i < len; i++) {\n        ok_find_closest_transit(bag[i], pidx, &o, intMethod, eps, (flag == NULL ? TDS_PRIMARY : flag[i]), &(times->data[i]), error);\n    }\n    return times;\n}\n","/*\n *  kernel.c\n *  Systemic2\n *\n *\n */\n\n#include <gsl/gsl_vector_double.h>\n#include <gsl/gsl_matrix_double.h>\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n#include <gsl/gsl_randist.h>\n#include \"mercury.h\"\n#include \"kernel.h\"\n#include \"integration.h\"\n#include \"utils.h\"\n#include \"gsl/gsl_matrix.h\"\n#include \"gsl/gsl_multimin.h\"\n#include \"gsl/gsl_rng.h\"\n#include \"simplex.h\"\n#include \"lm.h\"\n#include \"sa.h\"\n#include \"de.h\"\n#include \"time.h\"\n#include <libgen.h>\n\n\nok_minimizer ok_minimizers[] = { K_minimize_simplex, K_minimize_lm, K_minimize_de, K_minimize_sa, NULL, NULL, NULL, NULL };\nchar * ok_orb_labels[ELEMENTS_SIZE] =  { \"P\", \"M\", \"MA\", \"E\", \"LOP\", \"I\", \"NODE\", \"RADIUS\", \"ORD\",\n\"UNUSED1_\", \"UNUSED2_\", \"UNUSED3_\", \"UNUSED4_\"};\nchar * ok_all_orb_labels[ALL_ELEMENTS_SIZE] =  { \"P\", \"M\", \"MA\", \"E\", \"LOP\", \"I\", \"NODE\", \"RADIUS\", \"ORD\",\n\"UNUSED1_\", \"UNUSED2_\", \"UNUSED3_\", \"UNUSED4_\", \"SMA\", \"K\", \"TPERI\", \"TRUEANOM\", \"UNUSED5_\", \"UNUSED6_\", \"UNUSED7_\"};\n\n\ndouble ok_default_steps[ELEMENTS_SIZE] = {[PER] = 1e-3, [MASS] = 1e-3, [MA] = 1e-2,\n    [ECC] = 1e-2, [LOP] = 1e-2, [INC] = 1e-2, [NODE] = 1e-2, [RADIUS] = 1e-2, 0, 0, 0, 0, 0};\n\n/**\n * An internal function used to make sure the internal state of the kernel is\n * consistent. This is used, for instance, to:\n * - ensure the various matrices have the right sizes (e.g., the number of rows of \n * the minimization flags matrix and the number of rows of the elements have to be kept in\n * sync)\n * - sort planets, if needed (e.g. if the coordinate system is JACOBI, the bodies have\n * to be sorted by increasing periods)\n * - setting up the system member struct (which contains orbital elements, cartesian\n * coordinates, epoch)\n * - other bookkeeping.\n * \n * It is usually called by the other functions (e.g. K_setElement) to ensure the\n * kernel is in a consistent state.\n * \n * This function should not be used directly by the user or a binding, but it could\n * be useful when debugging.\n * \n * @param k The kernel to check.\n */\nvoid K_validate(ok_kernel* k);\n\n\n/**\n * Allocates a new kernel with 0 planets and an empty dataset.\n * @return A new kernel object.\n */\nok_kernel* K_alloc() {\n    ok_kernel* k = (ok_kernel*) malloc(sizeof (ok_kernel));\n    memset(k, 0, sizeof(ok_kernel));\n    k->chi2 = INVALID_NUMBER;\n    k->chi2_rvs = INVALID_NUMBER;\n    k->chi2_tts = INVALID_NUMBER;\n    k->chi2_other = INVALID_NUMBER;\n    k->rms_tts = INVALID_NUMBER;\n    k->jitter = INVALID_NUMBER;\n    k->rms = INVALID_NUMBER;\n    k->nsets = 0;\n    k->ndata = 0;\n    k->nrvs = 0;\n    k->ntts = 0;\n    k->last_error = 0;\n    k->intMethod = KEPLER;\n    k->Mstar = 1.;\n    k->minfunc = K_getChi2;\n    k->system = ok_alloc_system(0);\n    MSET(k->system->elements, 0, MASS, 1.);\n    k->compiled = NULL;\n    k->plRanges = (gsl_matrix**) calloc(2, sizeof(gsl_matrix*));\n    k->parRanges = (gsl_vector**) calloc(2, sizeof(gsl_vector*));\n    \n    k->times = NULL;\n    k->datasets = (gsl_matrix**) calloc(PARAMS_SIZE, sizeof (gsl_matrix*));\n    \n    for (int i = 0; i < DATA_SETS_SIZE; i++)\n        sprintf(k->datanames[i], \"data%d\", i+1);\n    \n    k->params = gsl_vector_calloc(PARAMS_SIZE);\n    \n    k->integration = NULL;\n    k->plFlags = NULL;\n    k->parFlags = gsl_vector_int_calloc(PARAMS_SIZE);\n    k->parSteps = gsl_vector_calloc(PARAMS_SIZE);\n    for (int i = 0; i < PARAMS_SIZE; i++)\n        VSET(k->parSteps, i, 1e-2);\n    for (int i = 0; i <= P_DATA_NOISE10; i++)\n        VSET(k->parSteps, i, 5e-2);\n    \n    k->intOptions = (ok_integrator_options*) malloc(sizeof(ok_integrator_options));\n    memcpy(k->intOptions, &defoptions, sizeof(ok_integrator_options));\n    k->intOptions->buffer = NULL;\n    k->intOptions->ibuffer = NULL;\n    k->intOptions->progress = NULL;\n    \n    k->flags = 0;\n\n    k->progress = NULL;\n    k->model_function = NULL;\n    \n    k->rng = gsl_rng_alloc(gsl_rng_default);\n    gsl_rng_set(k->rng, clock());\n    return k;\n}\n\n/**\n * Frees a kernel object allocated with K_alloc.\n * @param k The kernel object to be freed.\n */\nvoid K_free(ok_kernel* k) {\n    if (k == NULL)\n        return;\n    \n    if (! (k->flags & SHARE_FLAGS)) {\n        gsl_matrix_int_free(k->plFlags);\n        gsl_vector_int_free(k->parFlags);\n    }\n    if (! (k->flags & SHARE_STEPS)) {\n        gsl_matrix_free(k->plSteps);\n        gsl_vector_free(k->parSteps);\n    }\n    if (! (k->flags & SHARE_RANGES)) {\n        gsl_matrix_free(k->plRanges[0]);\n        gsl_matrix_free(k->plRanges[1]);\n        gsl_vector_free(k->parRanges[0]);\n        gsl_vector_free(k->parRanges[1]);\n        free(k->parRanges);\n        free(k->plRanges);\n    }\n    \n    if (! (k->flags & SHARE_DATA)) {\n        for (int i = 0; i < k->nsets; i++) {\n            gsl_matrix_free(k->datasets[i]);\n        }\n        free(k->datasets);\n        \n        gsl_vector_free(k->times);\n        \n        if (k->integration != NULL) {\n            for (int i = 0; i < k->integrationSamples; i++)\n                ok_free_system(k->integration[i]);\n            free(k->integration);\n        }\n        free(k->compiled);\n    }\n    if (k->intOptions->buffer != NULL)\n        gsl_vector_free(k->intOptions->buffer);\n    if (k->intOptions->ibuffer != NULL)\n        gsl_vector_int_free(k->intOptions->ibuffer);\n    \n    assert(! (k->system->flag & FREED));\n    k->system->flag = FREED;\n    ok_free_system(k->system);\n    gsl_vector_free(k->params);\n    gsl_rng_free(k->rng);\n    k->flags = FREED;\n    free(k->intOptions);\n    free(k);\n}\n\nint K_compile_sort(const void* elem1, const void* elem2) {\n    double* e1 = *(double**) elem1;\n    double* e2 = *(double**) elem2;\n    \n    return (e1[T_TIME] - e2[T_TIME] < 0 ? -1 : 1);\n}\n\n/**\n * Compiles the data by merging all datasets and sorting them by date; a pointer table\n * is returned, each entry pointing to a row of a dataset. Data from different datasets\n * is mixed.\n * @param k The kernel containing the datasets.\n * @return A (double**) pointer table, containing all the data points sorted by date\n */\ndouble** K_compileData(ok_kernel* k) {\n    if (k->nsets < 1) {\n        k->ndata = 0;\n        return NULL;\n    }\n    if (k->times != NULL)\n        gsl_vector_free(k->times);\n    \n    int ndata = 0;\n    int ncols = MCOLS(k->datasets[0]);\n\n    k->nrvs = 0;\n    k->ntts = 0;\n    \n    for (int i = 0; i < k->nsets; i++) {\n        ndata += MROWS(k->datasets[i]);\n        ncols = MIN(ncols, MCOLS(k->datasets[i]));\n        \n        if (MROWS(k->datasets[i]) > 0) {\n            \n            if ((int) MGET(k->datasets[i], 0, T_FLAG) == T_RV) {\n                k->nrvs+= MROWS(k->datasets[i]);\n            }\n            else if ((int) MGET(k->datasets[i], 0, T_FLAG) == T_TIMING)\n                k->ntts+= MROWS(k->datasets[i]);\n        }\n    }\n    \n    ncols++;\n\n    double** compiled = k->compiled;\n    if (k->compiled == NULL || k->ndata != ndata) {\n        compiled = (double**) malloc(sizeof(double*) * ndata);\n        free(k->compiled);\n    }\n    \n    int nr = 0;\n\n    for (int i = 0; i < k->nsets; i++) {\n        int rows = MROWS(k->datasets[i]);\n        for (int j = 0; j < rows; j++) {\n            compiled[nr] = gsl_matrix_ptr(k->datasets[i], j, 0);\n            compiled[nr][T_SET] = (double) i;\n            nr++;\n        }\n    }\n    \n    if (k->flags & BOOTSTRAP_DATA) {\n        k->compiled = (double**) malloc(sizeof(double*) * ndata);\n        for (int i = 0; i < ndata; i++) {\n            k->compiled[i] = compiled[gsl_rng_uniform_int(k->rng, ndata)];\n        }\n        free(compiled);\n        compiled = k->compiled;\n        k->flags &= ~BOOTSTRAP_DATA;\n    } else\n        k->compiled = compiled;\n    \n    qsort(compiled, ndata, sizeof(double*), K_compile_sort);\n    \n    k->times = gsl_vector_calloc(ndata);\n    for (int i = 0; i < ndata; i++) {\n        VSET(k->times, i, k->compiled[i][T_TIME]);\n    }\n    \n    if (IS_INVALID(k->system->epoch)) {\n        k->system->epoch = k->system->time = VGET(k->times, 0);\n    }\n    k->ndata = ndata;\n    \n    k->flags &= ~NEEDS_COMPILE;\n    return k->compiled;\n}\n\n/**\n * Adds a new data table (in the form of a matrix) to the list of datasets used \n * by the kernel.\n * @param k Kernel where the data table will be added\n * @param table A matrix containing several columns (depending on the type of data);\n * common columns are TIME (=0), VALUE (=1), SIGMA (=2). For RVs, for instance, this would\n * correspond to the time of observation, the measured radial velocity and the\n * error of the measurement. Note that the matrix is owned by the kernel after this call,\n * and might be freed or resized as needed.\n * @param name Name describing the dataset (e.g. \"AlphaCen_KECK\").\n * @param type Type of dataset. Can be one of T_RV, T_PHOTO (photometry) or T_TIMING\n * (a TTV dataset)\n * @return The matrix itself.\n */\ngsl_matrix* K_addDataTable(ok_kernel* k, gsl_matrix* table, const char* name, int type) {\n    if (MCOLS(table) < DATA_SIZE) {\n        table = ok_matrix_resize(table, MROWS(table), DATA_SIZE);\n    } \n    \n    k->datasets[k->nsets] = table;\n    strcpy(k->datanames[k->nsets], name);\n    \n    for (int i = 0; i < MROWS(table); i++)\n        MSET(table, i, T_FLAG, type);\n    \n    k->nsets++;\n    k->flags |= NEEDS_COMPILE;\n    if (type == T_RV)\n        VISET(k->parFlags, k->nsets - 1, ACTIVE | MINIMIZE);\n    else\n        VISET(k->parFlags, k->nsets - 1, ACTIVE);\n    return table;\n}\n\n/**\n * Adds a new data table, read from the file specified by \"path\". \n * @param k The kernel to receive the dataset\n * @param path Path to an ASCII file. The ASCII file should contain the data\n * separated by newlines; each column is separated by whitespace. Lines starting\n * with # are treated as comments.\n * @param type Type of dataset. Can be one of T_RV, T_PHOTO (photometry) or T_TIMING\n * (a TTV dataset)\n * @return A matrix containing the data read from the file. This matrix is owned\n * by the kernel, so make a copy if you need to hold on to it.\n */\ngsl_matrix* K_addDataFile(ok_kernel* k, const char* path, int type) {\n    FILE* fid = fopen(path, \"r\");\n    assert(fid != NULL);\n    if (fid == NULL)\n        return NULL;\n    \n    \n    k->datasets[k->nsets] = ok_read_table(fid);\n    \n    for (int i = 0; i < MROWS(k->datasets[k->nsets]); i++)\n        MSET(k->datasets[k->nsets], i, T_FLAG, type);\n    \n    if (type == T_TIMING) {\n        for (int i = 0; i < MROWS(k->datasets[k->nsets]); i++) {\n            MSET(k->datasets[k->nsets], i, T_TDS_FLAG, MGET(k->datasets[k->nsets], i,\n                    2));\n            MSET(k->datasets[k->nsets], i, T_ERR, MGET(k->datasets[k->nsets], i,\n                    T_VAL));\n            MSET(k->datasets[k->nsets], i, T_VAL, MGET(k->datasets[k->nsets], i,\n                    T_TIME)); \n        }\n    }\n    \n    k->nsets++;\n    fclose(fid);\n\n    k->flags |= NEEDS_COMPILE;\n    if (type == T_RV)\n        VISET(k->parFlags, k->nsets - 1, ACTIVE | MINIMIZE);\n    else\n        VISET(k->parFlags, k->nsets - 1, ACTIVE);\n    \n    VSET(k->parSteps, k->nsets - 1, 0.05);\n    VSET(k->params, k->nsets - 1, 0.);\n    strcpy(k->datanames[k->nsets-1], path);\n    \n    return k->datasets[k->nsets-1];\n}\n\n/**\n * Removes the idx-th dataset (shuffling datasets and parameter values as needed)\n * @param k The kernel containing the dataset\n * @param idx Index of the dataset\n */\nvoid K_removeData(ok_kernel* k, int idx) {\n    \n    if (idx == -1) {\n        for (int i = 0; i < k->nsets; i++) {\n            gsl_matrix_free(k->datasets[i]);\n            VSET(k->params, i, 0.);\n            k->parFlags->data[i] = 0.;\n        }\n        k->nsets = 0;\n        k->ndata = 0;\n        k->nrvs = 0;\n        k->ntts = 0;\n        k->flags |= NEEDS_COMPILE | NEEDS_SETUP;\n        return;\n    }\n    \n    gsl_matrix_free(k->datasets[idx]);\n    k->datasets[idx] = NULL;\n    sprintf(k->datanames[idx], \"data%d\", idx+1);\n    \n    for (int i = idx+1; i < k->nsets; i++) {\n        k->datasets[i-1] = k->datasets[i];\n        k->params->data[i-1] = k->params->data[i];\n        k->parFlags->data[i-1] = k->parFlags->data[i];\n        k->parSteps->data[i-1] = k->parSteps->data[i];\n        strcpy(k->datanames[i-1], k->datanames[i]);\n    }\n    k->parFlags->data[k->nsets-1] = 0;\n    k->parSteps->data[k->nsets-1] = 1e-2;\n    \n    k->nsets--;\n    k->flags |= NEEDS_COMPILE | NEEDS_SETUP;\n    K_validate(k);\n}\n\ngsl_matrix* K_getData(ok_kernel* k, int idx) {\n    return k->datasets[idx];\n}\n\nconst char* K_getDataName(ok_kernel* k, int idx) {\n    return k->datanames[idx];\n}\n\nint K_getDataType(ok_kernel* k, int idx) {\n    if (MROWS(k->datasets[idx]) == 0)\n        return T_RV;\n    else\n        return MGET(k->datasets[idx], 0, T_FLAG);\n}\n\nint K_getDataSize(ok_kernel* k, int idx) {\n    return MROWS(k->datasets[idx]); \n}\n\ngsl_matrix* K_getCompiledDataMatrix(ok_kernel* k) {\n    if (k->compiled == NULL)\n        K_compileData(k);\n    \n    gsl_matrix* res = gsl_matrix_alloc(k->ndata, DATA_SIZE);\n    \n    for (int i = 0; i < k->ndata; i++) {\n        for (int j = 0; j < DATA_SIZE; j++)\n            MSET(res, i, j, k->compiled[i][j]);\n    }\n    return res;\n}\n\nvoid K_setData(ok_kernel* k, int idx, gsl_matrix* data) {\n    data = ok_matrix_resize(data, MROWS(data), DATA_SIZE);\n    gsl_matrix_free(k->datasets[idx]);\n    k->datasets[idx] = data;\n    k->flags |= NEEDS_COMPILE | NEEDS_SETUP;\n    K_validate(k);\n}\n\nvoid K_addPlanet(ok_kernel* k, const double elements[]) {\n\n    k->system->nplanets++;\n    int row = k->system->nplanets;\n\n    ok_resize_system(k->system, k->system->nplanets + 1);\n\n    k->plFlags = ok_matrix_int_resize(k->plFlags, k->system->nplanets+1, MCOLS(k->system->elements));\n    k->plSteps = ok_matrix_resize(k->plSteps, k->system->nplanets+1, MCOLS(k->system->elements));\n    \n    MSET(k->system->elements, row, ORD, -1);\n    MSET(k->system->elements, row, INC, 90.);\n    \n    if (elements != NULL) {\n        int i = 0;\n        while (true) {\n            if (elements[i] == DONE)\n                break;\n            else\n                MSET(k->system->elements, row, (int) elements[i], elements[i+1]);\n            i+=2;\n        }\n    }\n\n    if (MGET(k->system->elements, row, ORD) < 0)\n        MSET(k->system->elements, row, ORD, row);\n    \n    \n    for (int i = 0; i < 5; i++) \n        MISET(k->plFlags, row, i, ACTIVE | MINIMIZE);\n    for (int i = 0; i < ELEMENTS_SIZE; i++) {\n        MSET(k->plSteps, row, i, ok_default_steps[i]);\n    }\n    \n    K_setElementRange(k, row, PER, 0.1, 1e4);\n    K_setElementRange(k, row, MASS, 1e-4, 2e3);\n    K_setElementRange(k, row, ECC, 0, 0.99);\n    \n    ok_sort_matrix(k->system->elements, ORD);\n    k->flags |= NEEDS_SETUP;\n    K_validate(k);\n}\n\n/**\n * Removes the idx-th body from the system (the 0-th body representing the central star).\n * Matrices are shuffled automatically to accomodate the deletion of the body.\n * @param k Kernel to be modified\n * @param idx Index of the body to be deleted\n */\n\nvoid K_removePlanet(ok_kernel* k, int idx) {\n    if (k->system->nplanets == 0)\n        return;\n    \n    if (idx == -1) {\n        while (k->system->nplanets > 0) {\n            K_removePlanet(k, 0);\n        }\n        k->flags |= NEEDS_SETUP;        \n        return;\n    }\n    \n    \n    \n    gsl_matrix_free(k->system->xyz);\n    k->system->xyz = NULL;\n    gsl_matrix_free(k->system->orbits);\n    k->system->orbits = NULL;\n    \n    \n    gsl_matrix* els = ok_matrix_remove_row(k->system->elements, idx);\n    gsl_matrix_free(k->system->elements);\n    k->system->elements = els;\n    \n    gsl_matrix_int* plFlags = ok_matrix_int_remove_row(k->plFlags, idx);\n    gsl_matrix_int_free(k->plFlags);\n    k->plFlags = plFlags;\n    \n    if (k->plRanges[0] != NULL) {\n        gsl_matrix* plRanges0 = ok_matrix_remove_row(k->plRanges[0], idx);\n        gsl_matrix_free(k->plRanges[0]);\n        k->plRanges[0] = plRanges0;\n        gsl_matrix* plRanges1 = ok_matrix_remove_row(k->plRanges[1], idx);\n        gsl_matrix_free(k->plRanges[1]);\n        k->plRanges[1] = plRanges1;\n    }\n    \n    for (int i = 0; i < k->system->elements->size1; i++)\n        MSET(k->system->elements, i, ORD, i);\n    \n    k->system->nplanets--;\n    k->flags |= NEEDS_SETUP;\n}\n\n/**\n * Sets the element specified by col (one of PER, MASS, ECC, MA,\n * LOP, INC, NODE, RADIUS, ECCANOMALY, TRUEANOMALY) to the specified value for the row-th body.\n * @param k Kernel to be modified\n * @param row Index of the planet (0-th body is the central star)\n * @param col Index of the element\n * @param value New value\n */\nvoid K_setElement(ok_kernel* k, int row, int col, double value) {\n    \n    if (row == -1) {\n        for (int i = 1; i < MROWS(k->system->elements); i++)\n            K_setElement(k, i, col, value);\n    } else {\n        if (col >= 0 && col < ELEMENTS_SIZE)\n            MSET(k->system->elements, row, col, value);\n        else if (col == TPERI) {\n            double M = 360./MGET(k->system->elements, row, PER) * (k->system->epoch - value);\n            MSET(k->system->elements, row, MA, M);\n        } else if (col == TRUEANOMALY) {\n            double e = MGET(k->system->elements, row, ECC);\n            double f = RADRANGE(TO_RAD(value));\n            double E = 2.*atan(sqrt((1-e)/(1+e)) * tan(0.5*f));\n            if (f > 0.5*M_PI && f < 1.5 * M_PI)\n                E += M_PI;\n            double M = E-e*sin(E);\n            MSET(k->system->elements, row, MA, TO_DEG(M));\n            \n        } else if (col == SEMIAMP) {\n            double per = MGET(k->system->elements, row, PER);\n            double K = value * 100;\n            double e = MGET(k->system->elements, row, ECC);\n            double Mstar = K_getMstar(k);\n            \n            if (k->system->flag & JACOBI)\n            for (int j = 1; j < row; j++)\n                if (MGET(k->system->elements, j, PER) < per)\n                    Mstar += MGET(k->system->elements, j, MASS) * MJUP;\n                \n            double P = MGET(k->system->elements, row, PER);\n            double sini = sin(TO_RAD(MGET(k->system->elements, row, INC)));\n            \n            double Mp = K * sqrt(1-e*e) / sini * pow(Mstar, 2./3.) * pow(P*DAY/(2*M_PI*GGRAV), 1./3.) / MJUP;\n            MSET(k->system->elements, row, MASS, Mp);\n        } else if (col == MEANLONGITUDE) {\n            MSET(k->system->elements, row, MA, value - MGET(k->system->elements, row, LOP));\n        } else if (col == SMA) {\n            \n            double mass = MGET(k->system->elements, row, MASS);\n            double a = value;\n            double per = MGET(k->system->elements, row, PER);\n            double dper;\n            double Mcent;\n            do {\n                Mcent = k->Mstar * MSUN;\n\n                if (k->system->flag & JACOBI) {\n                    for (int j = 1; j < row; j++)\n                        if (MGET(k->system->elements, j, PER) < per)\n                            Mcent += MGET(k->system->elements, j, MASS) * MJUP;\n                } else\n                    break;\n\n                double per_new = YEAR_TO_DAY(sqrt(a * a * a * MSUN / (Mcent + mass * MJUP)));\n                dper = per_new - per;\n                per = per_new;\n                \n            } while (dper > 1e-10);\n            \n            per = YEAR_TO_DAY(sqrt(a * a * a * MSUN / (Mcent + mass * MJUP)));\n            MSET(k->system->elements, row, PER, per);\n        }\n    }\n        \n    k->flags |= NEEDS_SETUP;\n    K_validate(k);\n}\n\n\n/**\n * Returns the element specified by col (one of PER, MASS, ECC, MA,\n * LOP, INC, NODE, RADIUS, ECCANOMALY, TRUEANOMALY) for the row-th body.\n * @param k Kernel to be modified\n * @param row Index of the planet (0-th body is the central star)\n * @param col Index of the element\n * @return Value of the element\n */\ndouble K_getElement(ok_kernel* k, int row, int col) {\n    K_validate(k);\n    if (col >= 0 && col < ELEMENTS_SIZE) {\n        return MGET(k->system->elements, row, col);\n    } else if (col == SMA) {\n        double Mcent = k->Mstar * MSUN;\n        double per = MGET(k->system->elements, row, PER);\n        double mass = MGET(k->system->elements, row, MASS);\n        \n        if (k->system->flag & JACOBI) {\n            for (int j = 1; j < row; j++)\n                if (MGET(k->system->elements, j, PER) < per)\n                    Mcent += MGET(k->system->elements, j, MASS) * MJUP;\n        }\n        \n        double a = ok_acalc(per, Mcent/MSUN * K2, mass * MJUP/MSUN * K2);\n        return a;\n    } else if (col == SEMIAMP) {\n        double Mcent = k->Mstar * MSUN;\n        double per = MGET(k->system->elements, row, PER);\n        double mass = MGET(k->system->elements, row, MASS);\n        double ecc = MGET(k->system->elements, row, ECC);\n        \n        if (k->system->flag & JACOBI) {\n            for (int j = 1; j < row; j++)\n                if (MGET(k->system->elements, j, PER) < per)\n                    Mcent += MGET(k->system->elements, j, MASS) * MJUP;\n        }\n        \n        double a = cbrt(DAY_TO_YEAR(per) * DAY_TO_YEAR(per) * (Mcent + mass)/MSUN);\n        double K = 2 * M_PI/per * mass * MJUP / Mcent * a / sqrt(1 - ecc*ecc);\n        return K * AU / (100.*DAY);\n\n    } else if (col == TPERI) {\n        return k->system->epoch - MGET(k->system->elements, row, MA) * MGET(k->system->elements, row, PER) / 360.;\n    } else if (col == TRUEANOMALY) {\n        double e = MGET(k->system->elements, row, ECC);\n        double ma = TO_RAD(MGET(k->system->elements, row, MA));\n        double E = mco_kep__(e, ma);\n        \n        double f = 2.*atan2(sqrt((1.+e)/(1.-e*cos(E))) * sin(0.5*E),\n                sqrt((1.-e)/(1-e*cos(E))) * cos(0.5*E));\n        return TO_DEG(f);\n    } else if (col == MEANLONGITUDE) {\n        return DEGRANGE(MGET(k->system->elements, row, MA) + MGET(k->system->elements, row, LOP));\n    }\n    return INVALID_NUMBER;\n}\n\n/**\n * Returns the whole matrix of orbital elements. This is still owned by the kernel;\n * therefore, it is best to make a copy before the kernel is modified.\n * @param k Kernel\n * @return A matrix of the elements used internally (PER, MASS, MA, ECC, LOP, INC,\n * NODE, RADIUS, plus other reserved values)\n */\ngsl_matrix* K_getElements(ok_kernel* k) {\n    K_validate(k);\n    return k->system->elements;\n}\n\n/**\n * Sets the orbital element matrix to the specified matrix. The matrix becomes\n * owned by the kernel.\n * @param k Kernel\n * @param elements A matrix of size nbody x ELEMENTS_SIZE (where nbody includes\n * the planets and the central star)\n */\nvoid K_setElements(ok_kernel* k, gsl_matrix* elements) {\n    if (elements != k->system->elements)\n        gsl_matrix_free(k->system->elements);\n    \n    k->system->nplanets = MROWS(elements) - 1;\n    k->system->elements = elements;\n    k->flags |= NEEDS_SETUP;\n    K_validate(k);\n}\n\n\n/**\n * Returns a matrix of the internal elements (like getElements), plus other derived\n * elements such as the semimajor axis (SMA), semiamplitude (K), true and eccentric\n * anomaly (TRUEANOMALY, ECCANOMALY) and others.\n * @param k Kernel\n * @return A matrix containing the orbital elements, augmented by additional\n * derived elements\n */\ngsl_matrix* K_getAllElements(ok_kernel* k) {\n    K_validate(k);\n    \n    gsl_matrix* ret = ok_matrix_copy(k->system->elements);\n    ret = ok_matrix_resize(ret, MROWS(k->system->elements), ALL_ELEMENTS_SIZE);\n    \n    for (int i = 0; i < MROWS(ret); i++)\n        for (int j = ELEMENTS_SIZE; j < ALL_ELEMENTS_SIZE; j++) {\n            MSET(ret, i, j, K_getElement(k, i, j));\n        }\n    \n    return ret;\n}\n\n\n/**\n * Sets the parameters of the kernel (the meaning of \"parameter\" depends on the index\n * of the parameter). Indices 0-6 are reserved for the datasets associated with the kernel;\n * for RV datasets, a parameter specifies a RV offset. Index TREND specifies a trend\n * subtracted from the compiled RV dataset (not yet implemented). \n * Index NOISE specifies an amount of jitter (currently used internally by the MCMC routine).\n * @param k Kernel\n * @param pars A vector of size DATA_SIZE (which is subsequently owned by the kernel)\n */\nvoid K_setPars(ok_kernel* k, gsl_vector* pars) {\n    if (pars != k->params)\n        gsl_vector_free(k->params);\n    k->params = ok_vector_resize(pars, PARAMS_SIZE);\n}\n\n/**\n * Returns a vector of parameters for the kernel (see K_setPars).\n * @param k\n * @return A vector of parameters\n */\ngsl_vector* K_getPars(ok_kernel* k) {\n    return k->params;\n}\n\n/**\n * Sets the idx-th parameter to the specified value.\n * @param k Kernel\n * @param idx Index\n * @param val The specified value\n */\n\nvoid K_setPar(ok_kernel* k, int idx, double val) {\n    if (idx == -1) {\n        for (int i = 0; i < k->params->size; i++)\n            VSET(k->params, i, val);\n    } else {\n        VSET(k->params, idx, val);\n    }\n}\n\n/**\n * Sets the idx-th parameter to the specified value.\n * @param k Kernel\n * @param idx Index\n * @return The current value\n */\ndouble K_getPar(ok_kernel* k, int idx) {\n    return VGET(k->params, idx);\n}\n\nvoid K_setParFlag(ok_kernel* k, int idx, int value) {\n    VSET(k->parFlags, idx, value);\n}\nint K_getParFlag(ok_kernel* k, int idx) {\n    return VGET(k->parFlags, idx);\n}\n\ndouble K_getParStep(ok_kernel* k, int idx) {\n    return VGET(k->parSteps, idx);\n}\n\nvoid K_setParStep(ok_kernel* k, int idx, double value) {\n    VSET(k->parSteps, idx, value);\n}\n\n\nvoid K_setParRange(ok_kernel* k, int par, double min, double max) {\n    if (k->parRanges[0] == NULL) {\n        k->parRanges[0] = gsl_vector_alloc(PARAMS_SIZE);\n        gsl_vector_set_all(k->parRanges[0], INVALID_NUMBER);\n    }\n    if (k->parRanges[1] == NULL) {\n        k->parRanges[1] = gsl_vector_alloc(PARAMS_SIZE);\n        gsl_vector_set_all(k->parRanges[1], INVALID_NUMBER);\n    }\n    K_validate(k);\n    \n    VSET(k->parRanges[0], par, min);\n    VSET(k->parRanges[1], par, max);\n}\n\nvoid K_getParRange(ok_kernel* k, int idx, double* min, double* max) {\n    K_validate(k);\n    \n    if (k->parRanges[0] == NULL)\n        *min = INVALID_NUMBER;\n    else\n        *min = VGET(k->parRanges[0], idx);\n    if (k->parRanges[1] == NULL)\n        *max = INVALID_NUMBER;\n    else\n        *max = VGET(k->parRanges[1], idx);\n}\n\nvoid K_validate(ok_kernel* k) {\n    \n    for (int i = k->nsets; i < DATA_SETS_SIZE; i++)\n        VSET(k->parFlags, i, 0);\n    \n    \n    if (k->flags & NEEDS_COMPILE) {\n        K_compileData(k);\n    }\n    \n    \n    if (k->plFlags == NULL || (MROWS(k->plFlags) != MROWS(k->system->elements))) {\n        k->plFlags = ok_matrix_int_resize(k->plFlags, MROWS(k->system->elements), MCOLS(k->system->elements));\n    }\n    \n    if ((k->plSteps == NULL) || MROWS(k->plSteps) != MROWS(k->system->elements)) {\n        k->plSteps = ok_matrix_resize(k->plSteps, MROWS(k->system->elements), MCOLS(k->system->elements));\n    } \n    \n    \n    if (k->plRanges[0] != NULL && MROWS(k->plRanges[0]) != MROWS(k->system->elements)) {\n        k->plRanges[0] = ok_matrix_resize_pad(k->plRanges[0], MROWS(k->system->elements), ELEMENTS_SIZE, INVALID_NUMBER);\n        k->plRanges[1] = ok_matrix_resize_pad(k->plRanges[1], MROWS(k->system->elements), ELEMENTS_SIZE, INVALID_NUMBER);\n    }\n    \n    if (k->parRanges[0] != NULL)\n        for (int i = 0; i < PARAMS_SIZE; i++) {\n            if (!IS_INVALID(VGET(k->parRanges[0], i)))\n                VSET(k->params, i, MAX(VGET(k->parRanges[0], i), VGET(k->params, i)));\n            if (!IS_INVALID(VGET(k->parRanges[1], i)))\n                VSET(k->params, i, MIN(VGET(k->parRanges[1], i), VGET(k->params, i)));\n        }\n    \n    \n    for (int i = 1; i < k->system->nplanets+1; i++) {\n        \n        double ecc = MGET(k->system->elements, i, ECC);\n        if (ecc < 0) {\n            MSET(k->system->elements, i, ECC, -ecc);\n            MINC(k->system->elements, i, MA, - 180.);\n            MINC(k->system->elements, i, LOP, + 180.);\n        }\n        \n        double mass = MGET(k->system->elements, i, MASS);\n        \n        if (mass < 0) {\n            MSET(k->system->elements, i, MASS, -mass);\n            MINC(k->system->elements, i, MA, -180.);\n        }\n        if (k->plRanges[0] != NULL) {\n            for (int j = 0; j < ELEMENTS_SIZE; j++) {\n                if (! IS_INVALID(MGET(k->plRanges[0], i, j)))\n                    MSET(k->system->elements, i, j, MAX(MGET(k->system->elements, i, j), MGET(k->plRanges[0], i, j)));\n                if (! IS_INVALID(MGET(k->plRanges[1], i, j)))\n                    MSET(k->system->elements, i, j, MIN(MGET(k->system->elements, i, j), MGET(k->plRanges[1], i, j)));\n            }       \n        }\n        \n    }\n    \n    for (int i = P_DATA_NOISE1; i <= P_DATA_NOISE10; i++)\n        VSET(k->params, i, fabs(VGET(k->params, i)));\n\n    MSET(k->system->elements, 0, MASS, k->Mstar);\n    \n    \n    // If the coordinate system is jacobian, ensure the bodies are sorted by period.\n    // If they were not sorted, then start a new setup (recalculate xyz coordinates + orbits).\n    if (k->system->flag & JACOBI) {\n        gsl_matrix* el = k->system->elements;\n        ok_sort_matrix(el, PER);\n        \n        for (int i = 0; i < k->system->nplanets + 1; i++)\n            if (MGET(k->system->elements, i, ORD) != i) {\n                k->flags |= NEEDS_SETUP;\n                MSET(k->system->elements, i, ORD, i);\n            }\n    }\n    \n    \n    \n    if (k->flags & NEEDS_SETUP)\n        ok_setup(k->system);\n}\n\nint K_getActiveElements(ok_kernel* k) {\n    int flags = 0;\n    for (int i = 0; i < MROWS(k->plFlags); i++)\n        for (int j = 0; j < MCOLS(k->plFlags); j++)\n            if (MIGET(k->plFlags, i, j) & ACTIVE)\n                flags++;\n\n    return flags;\n}\n\nint K_getActivePars(ok_kernel* k) {\n    int flags = 0;\n    for (int i = 0; i < k->parFlags->size; i++)\n        if (VIGET(k->parFlags, i) & ACTIVE)\n            flags++;\n\n    return flags;\n}\n\nok_kernel_minimizer_pars K_getMinimizedVariables(ok_kernel* k) {\n    ok_kernel_minimizer_pars mpars;\n    \n    mpars.npars = 0;\n    \n    // Count all the parameters to minimize on\n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            mpars.npars += (MIGET(k->plFlags, i, j) & MINIMIZE ? 1 : 0);\n    for (int i = 0; i < k->parFlags->size; i++)\n        mpars.npars += (VIGET(k->parFlags, i) & MINIMIZE ? 1 : 0);\n\n    double** pars = (double**) malloc(sizeof(double*) * mpars.npars);\n    double* steps = (double*) malloc(sizeof(double) * mpars.npars);\n    int* type = (int*) malloc(sizeof(int) * mpars.npars);\n    double* min = (double*) malloc(sizeof(double) * mpars.npars);\n    double* max = (double*) malloc(sizeof(double) * mpars.npars);\n    int idx = 0;\n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            if (MIGET(k->plFlags, i, j) & MINIMIZE) {\n                pars[idx] = gsl_matrix_ptr(k->system->elements, i, j);\n                steps[idx] = MGET(k->plSteps, i, j);\n                type[idx] = j;\n                K_getElementRange(k, i, j, &(min[idx]), &(max[idx]));\n                idx++;\n            }\n    for (int i = 0; i < k->parFlags->size; i++)\n        if (VIGET(k->parFlags, i) & MINIMIZE) {\n            pars[idx] = gsl_vector_ptr(k->params, i);\n            steps[idx] = VGET(k->parSteps, i);\n            type[idx] = -1;\n            K_getParRange(k, i, &(min[idx]), &(max[idx]));\n            idx++;\n        }\n    \n    mpars.pars = pars;\n    mpars.steps = steps;\n    mpars.type = type;\n    mpars.min = min;\n    mpars.max = max;\n    return mpars;\n}\n\nint K_getNrPars(ok_kernel* k) {\n    return K_getActivePars(k) + K_getActiveElements(k);\n}\n\nvoid K_calculate(ok_kernel* k) {\n    K_validate(k);\n\n    int ppars = K_getActiveElements(k);\n    int vpars = K_getActivePars(k);\n    \n    double pars = k->ndata - ppars - vpars;\n    k->nrpars = pars;\n    \n    bool integrate = (k->system->nplanets > 0);\n    \n    if (k->ndata <= 0)\n        return;\n    \n    if ((!integrate && k->integration != NULL) || ((k->integration != NULL) && (k->times->size != k->integrationSamples ||\n            MROWS(k->integration[0]->elements) != MROWS(k->system->elements)))) {\n        for (int i = 0; i < k->integrationSamples; i++)\n            ok_free_system(k->integration[i]);\n        free(k->integration);\n        k->integration = NULL;\n        k->integrationSamples = 0;\n        \n    }\n\n    for (int i = 0; i < k->ndata; i++) {\n        k->compiled[i][T_PRED] = 0.;\n        k->compiled[i][T_SCRATCH] = -1.;\n    }\n    \n    if (integrate) {\n        k->integration = ok_integrate(k->system, k->times, k->intOptions, k->intMethod, k->integration,\n                &k->last_error);\n    } \n    \n    k->chi2_rvs = 0.;\n    k->chi2_tts = 0.;\n    k->chi2_other = 0.;\n    \n    k->rms = 0.;\n    k->rms_tts = 0.;\n    k->jitter = 0.;\n    k->nrvs = 0;\n    k->ntts = 0;\n    \n    ok_integrator_options o;\n    memcpy(&o, k->intOptions, sizeof(ok_integrator_options));\n    o.calc_elements = false;\n    \n    \n    double** compiled = k->compiled;\n    int ndata = k->ndata;\n    double epoch = k->system->epoch;\n    \n    if (k->model_function != NULL)\n        k->model_function(k, compiled, ndata);\n    \n    for (int i = 0; i < ndata; i++) {\n        int set = (int) compiled[i][T_SET];\n        double n = K_getPar(k, set + DATA_SETS_SIZE);\n        \n        if ((int) compiled[i][T_FLAG] == T_RV) {\n            if ((int) compiled[i][T_SCRATCH] < 0)\n                compiled[i][T_PRED] += (integrate && k->integration != NULL ? ok_get_rv(k->integration[i]) : 0.0);\n            \n            compiled[i][T_SCRATCH] = 0;\n            int j = (int) compiled[i][T_SET];\n            compiled[i][T_SVAL] = compiled[i][T_VAL] - VGET(k->params, j) - VGET(k->params, P_RV_TREND) * (compiled[i][T_TIME] - epoch);\n            double diff = compiled[i][T_SVAL] - compiled[i][T_PRED];\n            double s = compiled[i][T_ERR];\n            \n            k->chi2_rvs += diff * diff / (s * s + n * n);\n            k->rms += diff * diff;\n            k->jitter += s*s;\n            k->nrvs ++;\n        } else if ((int) compiled[i][T_FLAG] == T_TIMING) {\n            int pidx = (int) compiled[i][T_TDS_PLANET];\n            compiled[i][T_SVAL] = compiled[i][T_VAL];\n             \n            if (pidx <= 0)\n                pidx = 1;\n            if (pidx >= k->system->nplanets + 1)\n                continue;\n            \n            if (integrate && k->integration != NULL && ((int) compiled[i][T_SCRATCH] < 0)) {\n                double to = 0.;\n                ok_find_closest_transit(k->integration[i],\n                    pidx, &o, k->intMethod, o.eps_tr, compiled[i][T_TDS_FLAG], &to, &k->last_error);\n                compiled[i][T_PRED] += to;\n            } \n            compiled[i][T_SCRATCH] = 0;\n            \n            double diff = compiled[i][T_SVAL] - compiled[i][T_PRED];\n            double s = compiled[i][T_ERR];\n            k->chi2_tts += diff * diff / (s * s + n * n);\n            k->rms_tts += diff * diff;\n            k->ntts ++;\n        } else if ((int) compiled[i][T_FLAG] == T_DUMMY) {\n            // do nothing\n        }\n        else {\n            double diff = compiled[i][T_SVAL] - compiled[i][T_PRED];\n            double s = compiled[i][T_ERR];\n            k->chi2_other += diff * diff / (s * s + n * n);\n        }\n    }\n    \n    k->chi2 = (k->chi2_rvs + k->chi2_tts + k->chi2_other) / pars;\n    k->rms = sqrt(k->rms / (double) k->nrvs);\n    k->rms_tts = sqrt(k->rms_tts / (double) k->ntts);\n    k->jitter = sqrt(k->rms * k->rms - k->jitter / (double) k->nrvs);\n    \n    k->integrationSamples = k->times->size;\n    k->flags &= ~NEEDS_COMPILE;\n    k->flags &= ~NEEDS_SETUP;\n}\n\nok_system** K_integrate(ok_kernel* k, gsl_vector* times, ok_system** bag, int* error) {\n    ok_setup(k->system);\n    return ok_integrate(k->system, times, k->intOptions, k->intMethod, bag, error);\n}\n\nok_system** K_integrateProgress(ok_kernel* k, gsl_vector* times, ok_system** bag, int* error) {\n    k->intOptions->progress = k->progress;\n    ok_system** bag2 = K_integrate(k, times, bag, error);\n    k->intOptions->progress = NULL;\n    \n    return bag2;\n}\n\nok_system** K_integrateRange(ok_kernel* k, double from, double to, unsigned int samples, ok_system** bag, int* error) {\n    gsl_vector* times = gsl_vector_alloc(samples);\n    for (int i = 0; i < samples; i++)\n        VSET(times, i, i * (to-from)/(samples-1) + from);\n    ok_system** sl = K_integrate(k, times, bag, error);\n    gsl_vector_free(times);\n    return sl;\n}\n\ngsl_matrix* K_integrateStellarVelocity(ok_kernel* k, double from, double to, unsigned int samples, ok_system** bag, int* error) {\n    ok_system** sl = K_integrateRange(k, from, to, samples, NULL, error);\n    gsl_matrix* m;\n    \n    if (sl == NULL && k->system->nplanets > 0)\n        return NULL;\n    else if (sl == NULL || k->system->nplanets == 0) {\n        m = gsl_matrix_calloc(samples, 2);\n        for (int i = 0; i < samples; i++) {\n            MSET(m, i, 0, i * (to-from)/(samples-1) + from);\n        }\n    }\n    else \n        m = ok_get_rvs(sl, samples);\n    \n    if (k->model_function != NULL) {\n        double** dr = (double**) malloc(samples * sizeof(double*));\n        for (int i = 0; i < samples; i++) {\n            dr[i] = (double*) malloc(DATA_SIZE * sizeof(double));\n            dr[i][0] = MGET(m, i, 0);\n            dr[i][T_SET] = -1;\n            dr[i][T_FLAG] = T_RV;\n            dr[i][T_PRED] = 0.;\n        }\n        \n        k->model_function(k, dr, samples);\n        \n        for (int i = 0; i < samples; i++) {\n            MSET(m, i, 1, MGET(m, i, 1) + dr[i][T_PRED]);\n            free(dr[i]);\n        }\n        free(dr);\n    }\n    \n    ok_free_systems(sl, samples);\n    return m;\n}\n\n\n\nK_GETSET_C(Mstar, Mstar, double)\nK_GETSETW_C(epoch, Epoch, double, k->system->epoch)\n\nK_GETSET_C(intOptions->abs_acc, IntAbsAcc, double)\nK_GETSET_C(intOptions->rel_acc, IntRelAcc, double)\nK_GETSET_C(intOptions->dt, IntDt, double)\n\nK_GET_C(chi2, Chi2, double)\n\ndouble K_getChi2_nr(ok_kernel* k) {\n    return k->chi2_rvs + k->chi2_tts + k->chi2_other;\n}\n\ndouble K_getLoglik(ok_kernel* k) {\n    double chi2 = k->chi2_rvs + k->chi2_tts + k->chi2_other;\n    \n    double A = 0;\n    for (int i = 0; i < k->ndata; i++) {\n        int set = (int) k->compiled[i][T_SET];\n        double n = VGET(k->params, set + DATA_SETS_SIZE);\n        \n        A += log(SQR(k->compiled[i][T_ERR]) + n*n);\n    }\n    \n    return 0.5 * A + 0.5*chi2;\n};\n\nK_GET_C(rms, Rms, double)\nK_GET_C(jitter, Jitter, double)\n\nK_GET_C(nrvs, Nrvs, unsigned int)\nK_GET_C(ntts, Ntts, unsigned int)\nK_GET_C(nsets, Nsets, unsigned int)\nK_GET_C(chi2_rvs, Chi2_rvs, double)\nK_GET_C(chi2_tts, Chi2_tts, double)        \nK_GET_C(rms_tts, Rms_tts, double)        \n\nvoid K_setMinFunc(ok_kernel* k, ok_callback f) {\n    if (f == NULL)\n        k->minfunc = K_getChi2;\n    else\n        k->minfunc = f;\n}\nK_GET_C(minfunc, MinFunc, ok_callback)\nK_GETSET_C(intMethod, IntMethod, int)\nK_GETSET_C(intOptions, IntOptions, ok_integrator_options*)\nK_GET_C(compiled, Compiled, double**)\nK_GETSET_C(flags, Flags, unsigned int)\nK_GETSET_C(progress, Progress, ok_progress)\nK_GETSET_C(model_function, CustomModelFunction, ok_model_function)\n\nK_GETSET_FREE_C(plSteps, ElementSteps, gsl_matrix*, gsl_matrix_free)\nK_GETSET_FREE_C(parSteps, ParSteps, gsl_vector*, gsl_vector_free)\nK_GETSET_FREE_C(plFlags, ElementFlags, gsl_matrix_int*, gsl_matrix_int_free)\nK_GETSET_FREE_C(parFlags, ParFlags, gsl_vector_int*, gsl_vector_int_free)\n\n\nvoid K_setElementFlag(ok_kernel* k, int row, int col, int value) {\n    K_validate(k);\n    MISET(k->plFlags, row, col, value);\n}\n\nint K_getElementFlag(ok_kernel* k, int row, int col) {\n    K_validate(k);\n    return MIGET(k->plFlags, row, col);\n}\n\nvoid K_setVoffFlag(ok_kernel* k, int idx, int value) {\n    K_validate(k);\n    VISET(k->parFlags, idx, value);\n}\n\nint K_getVoffFlag(ok_kernel* k, int idx) {\n    K_validate(k);\n    return VIGET(k->parFlags, idx);\n}\n\nvoid K_setElementStep(ok_kernel* k, int row, int col, double value) {\n    K_validate(k);\n    \n    if (row == -1 && col == -1 && IS_INVALID(value)) {\n        for (int i = 1; i < MROWS(k->system->elements); i++) \n            for (int j = 0; j < ELEMENTS_SIZE; j++)\n                MSET(k->plSteps, i, j, ok_default_steps[j]);\n        return;\n    }\n    \n    if (row == -1) {\n        for (int i = 1; i < MROWS(k->system->elements); i++)\n            MSET(k->plSteps, i, col, value);\n    } else\n        MSET(k->plSteps, row, col, value);\n}\n\ndouble K_getElementStep(ok_kernel* k, int row, int col) {\n    K_validate(k);\n    return MGET(k->plSteps, row, col);\n}\n\nvoid K_setElementRange(ok_kernel* k, int row, int col, double min, double max) {\n    if (k->plRanges[0] == NULL) {\n        k->plRanges[0] = gsl_matrix_alloc(MROWS(k->system->elements), ELEMENTS_SIZE);\n        gsl_matrix_set_all(k->plRanges[0], INVALID_NUMBER);\n    }\n    if (k->plRanges[1] == NULL) {\n        k->plRanges[1] = gsl_matrix_alloc(MROWS(k->system->elements), ELEMENTS_SIZE);\n        gsl_matrix_set_all(k->plRanges[1], INVALID_NUMBER);\n    }\n    K_validate(k);\n    \n    if (row == -1) {\n        for (int i = 1; i < MROWS(k->system->elements); i++) {\n            MSET(k->plRanges[0], i, col, min);\n            MSET(k->plRanges[1], i, col, max);\n        }\n    } else {\n        MSET(k->plRanges[0], row, col, min);\n        MSET(k->plRanges[1], row, col, max);\n    }\n}\n\nvoid K_getElementRange(ok_kernel* k, int row, int col, double* min, double* max) {\n    K_validate(k);\n    \n    if (k->plRanges[0] == NULL)\n        *min = INVALID_NUMBER;\n    else\n        *min = MGET(k->plRanges[0], row, col);\n    \n    if (k->plRanges[1] == NULL)\n        *max = INVALID_NUMBER;\n    else\n        *max = MGET(k->plRanges[1], row, col);\n}\n\nvoid K_setVoffStep(ok_kernel* k, int idx, double value) {\n    K_validate(k);\n    VSET(k->parSteps, idx, value);\n}\n\ndouble K_getVoffStep(ok_kernel* k, int idx) {\n    K_validate(k);\n    return VGET(k->parSteps, idx);\n}\n\nok_kernel* K_clone(ok_kernel* k) {\n    return K_cloneFlags(k, 0);\n}\n\nok_kernel* K_cloneFlags(ok_kernel* k, unsigned int flags) {\n    ok_kernel* k2 = (ok_kernel*) malloc(sizeof(ok_kernel));\n    memcpy(k2, k, sizeof(ok_kernel));\n    \n    if (! (flags & SHARE_DATA)) {\n        k2->datasets = (gsl_matrix**) malloc(sizeof(gsl_matrix*) * PARAMS_SIZE);\n\n        for (int i = 0; i < k->nsets; i++) {\n            k2->datasets[i] = ok_matrix_copy(k->datasets[i]);\n            strcpy(k2->datanames[i], k->datanames[i]);\n        }\n        \n        k2->compiled = NULL;\n        k2->flags |= NEEDS_COMPILE;\n        k2->times = NULL;\n        k2->integration = NULL;\n        k2->integrationSamples = -1;\n    }\n    if (!( flags & SHARE_RANGES)) {\n        k2->plRanges = (gsl_matrix**) calloc(2, sizeof(gsl_matrix*));\n        if (k->plRanges[0] != NULL) {\n            k2->plRanges[0] = ok_matrix_copy(k->plRanges[0]);\n            k2->plRanges[1] = ok_matrix_copy(k->plRanges[1]);\n        }\n        k2->parRanges = (gsl_vector**) calloc(2, sizeof(gsl_vector*));\n        if (k->parRanges[0] != NULL) {\n            k2->parRanges[0] = ok_vector_copy(k->parRanges[0]);\n            k2->parRanges[1] = ok_vector_copy(k->parRanges[1]);\n        }      \n    }\n    \n    if (! (flags & SHARE_STEPS)) {\n        k2->plSteps = ok_matrix_copy(k->plSteps);\n        k2->parSteps = ok_vector_copy(k->parSteps);\n    }\n    if (! (flags & SHARE_FLAGS)) {\n        k2->plFlags = ok_matrix_int_copy(k->plFlags);\n        k2->parFlags = ok_vector_int_copy(k->parFlags);\n    }\n    \n    k2->system = ok_copy_system(k->system);\n    \n    k2->params = ok_vector_copy(k->params);\n    \n    k2->system->epoch = k->system->epoch;\n    k2->system->time = k->system->time;\n    k2->tag = k->tag;\n    k2->rng = gsl_rng_alloc(gsl_rng_default);\n    gsl_rng_set(k2->rng, clock());\n    k2->flags |= flags; \n    k2->progress = k->progress;\n    k2->model_function = k->model_function;\n    k2->intOptions = (ok_integrator_options*) malloc(sizeof(ok_integrator_options));\n    memcpy(k2->intOptions, k->intOptions, sizeof(ok_integrator_options));\n    k2->intOptions->buffer = NULL;\n    k2->intOptions->ibuffer = NULL;\n    k2->intOptions->progress = NULL;\n    return k2;\n}\n\nint K_minimize(ok_kernel* k, int algo, int maxiter, double params[]) {\n    int ret = ok_minimizers[algo](k, maxiter, params);\n    \n    for (int i = 1; i < k->system->elements->size1; i++) {\n        MSET(k->system->elements, i, MA, DEGRANGE(MGET(k->system->elements, i, MA)));\n        MSET(k->system->elements, i, LOP, DEGRANGE(MGET(k->system->elements, i, LOP)));\n        MSET(k->system->elements, i, INC, DEGRANGE(MGET(k->system->elements, i, INC)));\n        MSET(k->system->elements, i, NODE, DEGRANGE(MGET(k->system->elements, i, NODE)));\n    }\n    \n    return ret;\n}\n\nint K_1dminimize(ok_kernel* k, int algo, int maxiter, int row, int column, double params[]) {\n    gsl_matrix_int* m = ok_matrix_int_copy(k->plFlags);\n    gsl_vector_int* p = ok_vector_int_copy(k->parFlags);\n    \n    for (int i = 0; i < m->size1; i++)\n        for (int j = 0; j < m->size2; j++)\n            MISET(m, i, j, MIGET(m, i, j) & ~MINIMIZE);\n    for (int i = 0; i < p->size; i++)\n        VISET(p, i, VIGET(p, i) & ~MINIMIZE);\n    \n    gsl_matrix_int* old_plFlags = k->plFlags;\n    gsl_vector_int* old_parFlags = k->parFlags;\n    \n    if (row > 0) {\n        MISET(m, row, column, ACTIVE | MINIMIZE);\n    } else if (row == -1) {\n        VISET(p, column, ACTIVE | MINIMIZE);\n    }\n    \n    \n    k->plFlags = m;\n    k->parFlags = p;\n    int ret = K_minimize(k, algo, maxiter, params);\n    k->plFlags = old_plFlags;\n    k->parFlags = old_parFlags;\n    gsl_matrix_int_free(m);\n    gsl_vector_int_free(p);\n    return ret;\n}\n\nvoid K_print(ok_kernel* k, FILE* f) {\n    f = (f == NULL ? stdout : f);\n    fprintf(f, \"Elements:\\n\");\n    ok_fprintf_matrix(k->system->elements, f, \"%e \");\n    fprintf(f, \"Data:\\n\");\n    for (int i = 0; i < k->nsets; i++) {\n        fprintf(f, \"data[%d] -> %e\\n\", i, k->params->data[i]);\n    }\n    fprintf(f, \"Orbits:\\n\");\n    ok_fprintf_matrix(k->system->orbits, f, \"%e \");\n    fprintf(f, \"XYZ:\\n\");\n    ok_fprintf_matrix(k->system->xyz, f, \"%e \");\n    fprintf(f, \"Compiled data:\\n\");\n    ok_fprintf_buf(k->compiled, f, \"%e \", k->ndata, DATA_SIZE);\n    fflush(f);\n}\n\n\n\nvoid K_save_old(ok_kernel* k, const char* stem) {\n    K_validate(k);\n    \n    \n    char* fitName = ok_str_cat(stem, \".fit\");\n    char dataName[k->nsets][255];\n    for (int i = 0; i < k->nsets; i++) {\n        sprintf(dataName[i], \"%s_%d.vels\", stem, i);\n    }\n    char* sysName = ok_str_cat(stem, \".sys\");\n    \n    FILE* fit = fopen(fitName, \"w\");\n    fprintf(fit, \"# InitialEpoch: %e\\n\\n\", k->system->epoch);\n    fprintf(fit, \"Components %d\\n\", k->system->nplanets-1);\n    fprintf(fit, \"PrimaryRVSet \\\"%s\\\"\\n\", dataName[0]);\n    fprintf(fit, \"OverallRVOffset %e\\n\", VGET(k->params, 0));\n    fprintf(fit, \"RelativeRVOffsets {\\n\");\n    for (int i = 1; i < k->nsets; i++)\n        fprintf(fit, \"\\t\\\"%s\\\" %e\\n\", dataName[i], VGET(k->params, 1));\n    fprintf(fit, \"\\t\\\"Trend\\\" %e\\n}\\n\", 0.);\n    \n    for (int i = 1; i < k->system->nplanets + 1; i++) {\n        fprintf(fit, \"\\\"\\\" {\\n\");\n        fprintf(fit, \"\\tPeriod %e\\n\", K_getElement(k, i, PER));\n        fprintf(fit, \"\\tMass %e\\n\", K_getElement(k, i, MASS));\n        fprintf(fit, \"\\tMeanAnomaly %e\\n\", K_getElement(k, i, MA));\n        fprintf(fit, \"\\tEccentricity %e\\n\", K_getElement(k, i, ECC));\n        fprintf(fit, \"\\tLongOfPericenter %e\\n\", K_getElement(k, i, LOP));\n        fprintf(fit, \"\\tInclination %e\\n\", K_getElement(k, i, INC));\n        fprintf(fit, \"\\tNode %e\\n\", K_getElement(k, i, NODE));\n        fprintf(fit, \"\\tRadius %e\\n\", K_getElement(k, i, RADIUS));\n        fprintf(fit, \"}\\n\");\n    }\n    fclose(fit);\n    \n    for (int i = 0; i < k->nsets; i++) {\n        FILE* vels = fopen(dataName[i], \"w\");\n        ok_fprintf_buf(k->compiled, vels, \"%e \", k->ndata, DATA_SIZE);\n        fclose(vels);\n    }\n    \n    FILE* sys = fopen(sysName, \"w\");\n    fprintf(sys, \"Data {\\n\");\n    for (int i = 0; i < k->nsets; i++)\n        fprintf(sys, \"\\tRV[] \\\"%s\\\"\\n\", dataName[i]);\n    fprintf(sys, \"}\\n\\\"%s\\\" {\\n Mass %e\\n}\\n\", stem, k->Mstar);\n    fclose(sys);\n    free(fitName);\n    free(sysName);\n}\n\n\nbool K_save(ok_kernel* k, FILE* fid) {\n    int digits = 15;\n    int fract = 15;\n    char fmt[] = \"%15.15e \";\n    \n    fid = (fid != NULL ? fid : stdout);\n    fprintf(fid, \"@Kernel\\n\\n\");\n    fprintf(fid, \"Epoch = %*.*e\\n\", digits, fract, k->system->epoch);\n    fprintf(fid, \"Mstar = %*.*e\\n\", digits, fract, k->Mstar);\n    fprintf(fid, \"Chi2 = %*.*e\\n\", digits, fract, k->chi2);\n    fprintf(fid, \"RMS = %*.*e\\n\", digits, fract, k->rms);\n    fprintf(fid, \"Jitter = %*.*e\\n\", digits, fract, k->jitter);\n    fprintf(fid, \"IntMethod = %d\\n\", k->intMethod);\n    fprintf(fid, \"Version = %.4f\\n\", SYSTEMIC_VERSION);\n    \n    fprintf(fid, \"\\nElements = %zu\\n\", k->system->elements->size1);\n    ok_fprintf_matrix(k->system->elements, fid, fmt);\n    \n    fprintf(fid, \"\\nParams = \\n\");\n    ok_fprintf_vector(k->params, fid, fmt);\n    \n    if (k->plFlags != NULL) {\n        fprintf(fid, \"\\nPlFlags = %zu\\n\", k->plFlags->size1);\n        ok_fprintf_matrix_int(k->plFlags, fid, \"%d \");\n    }\n    \n    fprintf(fid, \"\\nParFlags = \\n\");\n    ok_fprintf_vector_int(k->parFlags, fid, \"%d \");\n    \n    if (k->plSteps != NULL) {\n        fprintf(fid, \"\\nPlSteps = %zu\\n\", k->plSteps->size1);\n        ok_fprintf_matrix(k->plSteps, fid, fmt);\n    }\n    fprintf(fid, \"\\nParSteps = \\n\");\n    ok_fprintf_vector(k->parSteps, fid, fmt);\n    \n    \n    if (k->plRanges[0] != NULL) {\n        fprintf(fid, \"\\nPlRanges_min = %zu\\n\", k->plRanges[0]->size1);\n        ok_fprintf_matrix(k->plRanges[0], fid, fmt);\n    }\n    if (k->plRanges[1] != NULL) {\n        fprintf(fid, \"\\nPlRanges_max = %zu\\n\", k->plRanges[1]->size1);\n        ok_fprintf_matrix(k->plRanges[1], fid, fmt);\n    }\n    if (k->parRanges[0] != NULL) {\n        fprintf(fid, \"\\nParRanges_min =\\n\");\n        ok_fprintf_vector(k->parRanges[0], fid, fmt);\n    }\n    if (k->parRanges[1] != NULL) {\n        fprintf(fid, \"\\nParRanges_max =\\n\");\n        ok_fprintf_vector(k->parRanges[1], fid, fmt);\n    }\n    \n    for (int i = 0; i < k->nsets; i++) {\n        fprintf(fid, \"\\nData = %zu\\n\", k->datasets[i]->size1);\n        ok_fprintf_matrix(k->datasets[i], fid, fmt);\n    }\n    \n    fprintf(fid, \"Flags = %d\\n\", k->flags);\n    fprintf(fid, \"System_Flags = %d\\n\", k->system->flag);\n    \n    for (int i = 0; i < k->nsets; i++)\n        fprintf(fid, \"Data_Name = %s\\n\", \n                k->datanames[i]);\n    \n    fprintf(fid, \"\\n@End\\n\");\n    return true;\n}\n\nok_kernel* K_load(FILE* fid, int skip) {\n    fid = (fid != NULL ? fid : stdin);\n    char line[MAX_LINE];\n    for (int i = 0; i < skip; i++) {\n        while (fgets(line, sizeof(line), fid)) \n            if (strcmp(line, \"@End\\n\") == 0)\n                break;\n        if (feof(fid))\n            return NULL;\n    }\n    \n    bool found = false;\n    char* ret;\n    while (!found) {\n       while ((ret = fgets(line, sizeof(line), fid)) != NULL) {\n            if (strcmp(line, \"@Kernel\\n\") == 0) {\n                found = true;\n                break;\n            }\n            if (feof(fid))\n                return NULL;\n       }\n\n        if (ret == NULL) {\n            return NULL;\n        }\n            \n    }\n    \n    ok_kernel* k = K_alloc();\n    \n    \n    double v;\n    int r;\n    k->nsets = 0;\n    int data_name_counter = 0;\n    \n    while (true) {\n        if ((fgets(line, sizeof(line), fid) == NULL) || feof(fid) || strcmp(line, \"@End\\n\") == 0)\n            break;\n        char tag[100] = {0};\n        sscanf(line, \"%s =\", tag);\n        \n        if (strcmp(tag, \"Epoch\") == 0) {\n            sscanf(line, \"%*s = %le\", &v);\n            K_setEpoch(k, v);\n        } else if (strcmp(tag, \"Mstar\") == 0) {\n            sscanf(line, \"%*s = %le\", &v);\n            K_setMstar(k, v);\n        } else if (strcmp(tag, \"Flags\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            k->flags = r;\n        } else if (strcmp(tag, \"System_Flags\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            k->system->flag = r;\n        } else if (strcmp(tag, \"IntMethod\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            k->intMethod = r;\n        } else if (strcmp(tag, \"Elements\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix_free(k->system->elements);\n            k->system->elements = gsl_matrix_alloc(r, ELEMENTS_SIZE);\n            ok_fscanf_matrix(k->system->elements, fid);\n            k->system->nplanets = r - 1;\n        } else if (strcmp(tag, \"Params\") == 0) {\n            ok_fscanf_vector(k->params, fid);\n        } else if (strcmp(tag, \"PlSteps\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix* ps = gsl_matrix_alloc(r, ELEMENTS_SIZE);\n            ok_fscanf_matrix(ps, fid);\n            gsl_matrix_free(k->plSteps);\n            k->plSteps = ps;\n        } else if (strcmp(tag, \"ParSteps\") == 0) {\n            ok_fscanf_vector(k->parSteps, fid);\n        } else if (strcmp(tag, \"PlFlags\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix_int* plflags = gsl_matrix_int_alloc(r, ELEMENTS_SIZE);\n            ok_fscanf_matrix_int(plflags, fid);\n            gsl_matrix_int_free(k->plFlags);\n            k->plFlags = plflags;\n        } else if (strcmp(tag, \"ParFlags\") == 0) {\n            ok_fscanf_vector_int(k->parFlags, fid);\n        } else if (strcmp(tag, \"PlRanges_min\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix* pr = gsl_matrix_alloc(r, ELEMENTS_SIZE);\n            ok_fscanf_matrix(pr, fid);\n            k->plRanges[0] = pr;\n        } else if (strcmp(tag, \"PlRanges_max\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix* pr = gsl_matrix_alloc(r, ELEMENTS_SIZE);\n            ok_fscanf_matrix(pr, fid);\n            k->plRanges[1] = pr;\n        } else if (strcmp(tag, \"ParRanges_min\") == 0) {\n            gsl_vector* pr = gsl_vector_alloc(PARAMS_SIZE);\n            ok_fscanf_vector(pr, fid);\n            k->parRanges[0] = pr;\n        } else if (strcmp(tag, \"ParRanges_max\") == 0) {\n            gsl_vector* pr = gsl_vector_alloc(PARAMS_SIZE);\n            ok_fscanf_vector(pr, fid);\n            k->parRanges[1] = pr;\n        } else if (strcmp(tag, \"Data\") == 0) {\n            sscanf(line, \"%*s = %d\", &r);\n            gsl_matrix* d = gsl_matrix_alloc(r, DATA_SIZE);\n            ok_fscanf_matrix(d, fid);\n            k->datasets[k->nsets] = d;\n            k->nsets++;\n        } else if (strcmp(tag, \"Data_Name\") == 0) {\n            line[strlen(line)-1] = '\\0';\n            strcpy(k->datanames[data_name_counter], line + 12);\n            data_name_counter++;\n        }\n    }\n    \n    k->flags = NEEDS_SETUP | NEEDS_COMPILE;\n    K_validate(k);\n    \n    return k;\n    \n}\n\nbool K_addDataFromSystem(ok_kernel* k, const char* filename) {\n    K_removeData(k, -1);\n    \n    FILE* fid = fopen(filename, \"r\");\n    if (fid == NULL)\n        return false;\n    char line[MAX_LINE];\n    char token[MAX_LINE];\n    char value[MAX_LINE];\n    char path[MAX_LINE];\n    \n    char* fn = strdup(filename);\n    char* dn = dirname(fn);\n    \n    while (fgets(line, sizeof(line), fid) != 0) {\n        if (sscanf(line, \"%s\", token) == 1) {\n            if ((strcmp(token, \"RV[]\") == 0) || (strcmp(token, \"TD[]\") == 0)) {\n                if (sscanf(line, \"%*s %s\", value) == 1) {\n                    value[strlen(value)-1] = '\\0';\n                    \n                    char* df = value+1;\n                    char* ext = strrchr(df, '.');\n                    \n                    if (! ok_file_readable(df))\n                        sprintf(path, \"%s/%s\", dn, df);\n                    else\n                        strcpy(path, df);\n                    \n                    if (ok_file_readable(path)) {\n                        int type = T_RV;\n                        if (strcmp(ext, \".vels\") == 0)\n                            type = T_RV;\n                        else if (strcmp(ext, \".tds\") == 0)\n                            type = T_TIMING;\n                        \n                        K_addDataFile(k, path, type);\n                    }\n                    \n                }\n            } else if (strcmp(token, \"Mass\") == 0) {\n                double mass = 1.;\n                if (sscanf(line, \"%*s %le\", &mass) == 1) {\n                    K_setMstar(k, mass);\n                }\n            }\n        }\n    }\n    \n    free(fn);\n    return true;\n}\n\n\nvoid K_setSeed(ok_kernel* k, unsigned long int seed) {\n    gsl_rng_set(k->rng, seed);\n}\n\n\nunsigned int K_getNplanets(ok_kernel* k) {\n    return k->system->nplanets;\n}\n\nunsigned int K_getNdata(ok_kernel* k) {\n    K_validate(k);\n    return k->ndata;\n}\n\nvoid K_getRange(ok_kernel* k, double* from, double* to) {\n    K_compileData(k);\n    \n    if (k->ndata < 1) {\n        *from = INVALID_NUMBER;\n        *to = INVALID_NUMBER;\n    } else {\n        *from = k->compiled[0][0];\n        *to = k->compiled[k->ndata-1][0];\n    }\n}\n\n/*\ngsl_matrix* K_combineData(ok_kernel* k, const int data_type) {\n    gsl_matrix* filt;\n    double** cd = K_compileData(k);\n    \n    if (data_type >= 0) \n        filt = ok_matrix_buf_filter(cd, k->ndata, DATA_SIZE, T_FLAG, data_type);\n    else {\n        filt = gsl_matrix_alloc(k->ndata, DATA_SIZE);\n        \n        for (int i = 0; i < k->ndata; i++)\n            for (int j = 0; j < DATA_SIZE; j++)\n                MSET(filt, i, j, cd[i][j]);\n    }\n    if (filt == NULL)\n        return NULL;\n    \n    double* means = (double*) calloc(k->nsets, sizeof(double));\n    double* n = (double*) calloc(k->nsets, sizeof(double));\n    for (int i = 0; i < filt->size1; i++) {\n        int set = (int) MGET(filt, i, T_SET);\n        means[set] += MGET(filt, i, T_VAL);\n        n[set] += 1.;\n    }\n    \n    \n    for (int i = 0; i < filt->size1; i++) {\n        double val = MGET(filt, i, T_VAL);\n        double pred = MGET(filt, i, T_PRED);\n        int set = (int) MGET(filt, i, T_SET);\n        MSET(filt, i, T_PRED, val - pred);\n    }\n    return filt;\n}\n*/\n\ngsl_matrix* K_getXYZ(ok_kernel* k) {\n    K_validate(k);\n    return k->system->xyz;\n}\n\n/**\n * Sets the type of coordinates for this kernel. This will influence how orbital\n * elements get converted into cartesian coordinates, and vice versa. By default,\n * the coordinate system is ASTROCENTRIC.\n * @param k Kernel to modify\n * @param type One of ASTROCENTRIC or JACOBI.\n */\nvoid K_setElementType(ok_kernel* k, int type) {\n    int flag = k->system->flag;\n    if (type == JACOBI) {\n        k->system->flag |= JACOBI;\n    } else {\n        k->system->flag &= ~JACOBI; \n    }\n    if (flag != k->system->flag)\n        K_validate(k);\n}\n\n\n/**\n * Returns the coordinate type used by the kernel (one of ASTROCENTRIC or JACOBI).\n * @param k A kernel \n * @return The coordinate type used by the kernel (one of ASTROCENTRIC or JACOBI).\n */\nint K_getElementType(ok_kernel* k) {\n    if (k->system->flag & JACOBI)\n        return JACOBI;\n    else\n        return ASTROCENTRIC;\n}\n\n/**\n * Perturbs the parameters (orbital elements + pars) of the specified kernel \n * that are flagged MINIMIZE with a gaussian rng with variance given by the \n * corresponding step.\n * @param k\n */\nvoid K_perturb(ok_kernel* k) {\n    for (int i = 0; i < ELEMENTS_SIZE; i++)\n        for (int j = 0; j < K_getNplanets(k) + 1; j++) {\n            if (MGET(k->plFlags, j, i) & MINIMIZE) {\n                double step = gsl_ran_gaussian(k->rng, MGET(k->plSteps, j, i));\n                MINC(k->system->elements, j, i, step);\n            }\n        }\n    for (int i = 0; i < PARAMS_SIZE; i++)\n        if (VGET(k->parFlags, i) & MINIMIZE) {\n            double step = VGET(k->parSteps, i);\n            VINC(k->params, i, gsl_ran_gaussian(k->rng, step));\n        }\n    K_validate(k);\n}\n\n\n\nvoid* ok_bridge_kernel_buf(void* buf, int n, ok_kernel* k) {\n    if (buf == NULL) {\n        return (malloc(sizeof(ok_kernel*) * n));\n    } else if (n < 0) {\n        free(buf);\n        buf = NULL;\n    } else {\n        ((ok_kernel**)buf)[n] = k;\n    }\n    return buf;\n}","\n#include \"kl.h\"\n#include \"kernel.h\"\n#include \"integration.h\"\n#include \"gsl/gsl_vector.h\"\n#include \"gsl/gsl_statistics.h\"\n#include \"gsl/gsl_sort_vector.h\"\n/*\n * ok_list is an object containing a list of orbital elements and \n * parameters. It is conceptually similar to an array of ok_kernel* \n * objects, except that it does not duplicate all the data associated\n * with each ok_kernel* object to avoid wasting memory (this is important,\n * for instance, when returning a chain of states from MCMC, when you\n * can have millions of objects!). They are typically returned by\n * the MCMC or bootstrap algorithms.\n * \n */\n\n/**\n * Returns a new ok_list of size size, using the specified kernel as a\n * prototype.\n * @param size size of the list\n * @param prototype prototype kernel.\n * @return a freshly allocated list.\n */\n\nok_list* KL_alloc(const int size, ok_kernel* prototype) {\n    ok_list* kl = (ok_list*) malloc(sizeof(ok_list));\n   \n    kl->prototype = prototype;\n    kl->kernels = (ok_list_item**) calloc(size, sizeof(ok_list_item*));\n    kl->size = size;\n    kl->diags = NULL;\n    \n    return kl;\n}\n\n/**\n * Appends two lists together (the src list to the end of the dest list).\n * The src list is subsequently freed.\n * \n * @param dest List to append to\n * @param src List to be appended\n */\n\nvoid KL_append(ok_list* dest, ok_list* src) {\n    if (dest->prototype != src->prototype) \n        K_free(src->prototype);\n    \n    int size = dest->size + src->size;\n    \n    ok_list_item** destItems = dest->kernels;\n    dest->kernels = (ok_list_item**) calloc(size, sizeof(ok_list_item*));\n    \n    for (int i = 0; i < dest->size; i++)\n        dest->kernels[i] = destItems[i];\n    for (int i = 0; i < src->size; i++)\n        dest->kernels[i+dest->size] = src->kernels[i];\n    \n    dest->size = size;\n    \n    free(src->kernels);\n    free(src);\n}\n\n/**\n * Frees a list.\n * \n * @param kl list to be freed\n */\nvoid KL_free(ok_list* kl) {\n    if (kl == NULL)\n        return;\n    \n    for (int i = 0; i < kl->size; i++) {\n        free(kl->kernels[i]);\n    }\n    \n    if (kl->prototype != NULL)\n        K_free(kl->prototype);\n    if (kl->kernels != NULL)\n        free(kl->kernels);\n    free(kl);\n}\n\n\n/**\n * Loads a list previously saved to a file using KL_save.\n * \n * @param fid opened file handle \n * @param skip set to 0\n * @return a list containing the data read from the file\n */\nok_list* KL_load(FILE* fid, int skip) {\n    char line[18192];\n    int np = -1;\n\n    int trials = -1;\n    double Mstar = 0.;\n    double epoch = 0.;\n    \n    for (int i = 0; i < skip; i++) {\n        while (fgets(line, sizeof(line), fid)) \n            if (strcmp(line, \"#End\\n\") == 0)\n                break;\n        if (feof(fid))\n            return NULL;\n    }\n    \n    bool found = false;\n    char* ret = NULL;\n    \n    while (!found) {\n       while ((ret = fgets(line, sizeof(line), fid)) != NULL) {\n            if (strcmp(line, \"#KernelList\\n\") == 0) {\n                found = true;\n                break;\n            }\n            if (feof(fid))\n                return NULL;\n       }\n\n        if (ret == NULL) {\n            return NULL;\n        }\n            \n    }\n    \n    ok_list* kl = NULL;\n    \n    while (true) {\n        //long int ft = ftell(fid);\n        if ((fgets(line, sizeof(line), fid) == NULL) || feof(fid))\n            break;\n        \n        if (line[0] == '#') {\n            char tag[100] = {0};\n            sscanf(line + 2, \"%s = \", tag);\n            \n            if (strcmp(tag, \"Planets\") == 0) {\n                sscanf(line + 2, \"%*s = %d\", &np);\n            } else if (strcmp(tag, \"Trials\") == 0) {\n                sscanf(line + 2, \"%*s = %d\", &trials);\n                kl = KL_alloc(trials, NULL);\n            } else if (strcmp(tag, \"Epoch\") == 0) {\n                sscanf(line + 2, \"%*s = %le\", &epoch);\n            } else if (strcmp(tag, \"Mstar\") == 0) {\n                sscanf(line + 2, \"%*s = %le\", &Mstar);\n            } else if (strcmp(tag, \"Type\") == 0) {\n                sscanf(line + 2, \"%*s = %d\", &(kl->type));\n            }\n            \n        } else {\n            \n            kl->prototype = K_alloc(np);\n            K_setEpoch(kl->prototype, epoch);\n            K_setMstar(kl->prototype, Mstar);\n            \n            \n            for (int tr = 0; tr < trials; tr++) {\n                gsl_matrix* elements = gsl_matrix_calloc(np+1, ALL_ELEMENTS_SIZE);\n                gsl_vector* pars = gsl_vector_calloc(PARAMS_SIZE);\n                \n                \n                   for (int i = 0; i < ALL_ELEMENTS_SIZE; i++) {\n                       for (int j = 1; j <= np; j++) {\n                            double v = 1e-10;\n                            fscanf(fid, \"%le\", &v);\n                            MSET(elements, j, i, v);\n                        }\n                    }\n                \n                \n                for (int i = 0; i < PARAMS_SIZE; i++) {\n                    double v;\n                    fscanf(fid, \"%le\", &v);\n                    VSET(pars, i, v);\n                }\n\n                double merit;\n                fscanf(fid, \"%le\", &merit);\n                \n                ok_list_item* it = KL_set(kl, tr, elements, pars, merit, 0);\n                fscanf(fid, \"%le\", &it->merit_li);\n                fscanf(fid, \"%le\", &it->merit_pr);\n                double tag;\n                fscanf(fid, \"%le\", &tag);\n                it->tag = (int) tag;\n                \n            }\n            break;\n        }\n    }\n    \n    return kl;\n}\n\n/**\n * Sets the idx-th element of the list kl to the following values.\n * \n * @param kl List \n * @param idx Index of the list element to be modified\n * @param elements Orbital elements (matrix) for the idx-th element\n * @param pars Parameters (vector) for the idx-th element\n * @param merit Merit value for the idx-th element\n * @param tag A tag value (can be used by the user to distinguish elements)\n * @return The item just modified\n */\nok_list_item* KL_set(ok_list* kl, const int idx, gsl_matrix* elements, gsl_vector* pars, double merit, int tag) {\n    assert(idx < kl->size);\n    if (kl->kernels[idx] != NULL) {\n        gsl_matrix_free(kl->kernels[idx]->elements);\n        gsl_vector_free(kl->kernels[idx]->params);\n        free(kl->kernels[idx]);\n    }\n    \n    ok_list_item* it = (ok_list_item*) malloc(sizeof(ok_list_item));\n    it->elements = elements;\n    it->params = pars;\n    it->merit = merit;\n    it->tag = tag;\n    kl->kernels[idx] = it;\n    return it;\n}\n\n/**\n * Returns a vector of the orbital element el for planet pl, built from\n * the list\n * @param kl\n * @param pl\n * @param el\n * @return \n */\ngsl_vector* KL_getElements(const ok_list* kl, const int pl, const int el) {\n    gsl_vector* v = gsl_vector_alloc(kl->size);\n    \n    for (int i = 0; i < kl->size; i++)\n        VSET(v, i, MGET(kl->kernels[i]->elements, pl, el));\n    return v;\n}\n/**\n * Returns a vector of the vo-th parameter, built from\n * the list\n * @param kl\n * @param pl\n * @param el\n * @return \n */\ngsl_vector* KL_getPars(const ok_list* kl, const int vo) {\n    gsl_vector* v = gsl_vector_alloc(kl->size);\n    \n    for (int i = 0; i < kl->size; i++)\n        VSET(v, i, VGET(kl->kernels[i]->params, vo));\n    \n    return v;\n}\n\n/**\n * Get a summary statistic for the orbital elements; for instance,\n * the median value calculated over all the elements of the list.\n * @param kl List\n * @param what Can be one of: STAT_MEAN, STAT_MEDIAN, STAT_STDDEV, STAT_MAD. \n *      Summary statistic is calculated correctly for angle parameters.\n * @return A matrix whose entries are the summary statistic for the \n * corresponding orbital element.\n */\ngsl_matrix* KL_getElementsStats(const ok_list* kl, const int what) {\n    \n    int npl = MROWS(kl->kernels[0]->elements);\n    if (npl == 0)\n        return NULL;\n    \n    gsl_vector* v = gsl_vector_alloc(kl->size);\n    \n    gsl_matrix* m = gsl_matrix_alloc(npl, ALL_ELEMENTS_SIZE);\n    gsl_matrix_set_all(m, 0.);\n    \n    \n    for (int i = 0; i < npl; i++)\n            for (int j = 0; j < ALL_ELEMENTS_SIZE; j++) {\n                for (int n = 0; n < kl->size; n++) {\n                    VSET(v, n, MGET(kl->kernels[n]->elements, i, j));\n                }\n                \n                switch (what) {\n                    case STAT_MEAN:\n                        if (j == MA || j == LOP || j == INC || j == NODE || j == TRUEANOMALY)\n                            MSET(m, i, j, ok_average_angle(v->data, v->size, false));\n                        else\n                            MSET(m, i, j, gsl_stats_mean(v->data, 1, v->size));\n                        break;\n                    case STAT_STDDEV:\n                        if (j == MA || j == LOP || j == INC || j == NODE || j == TRUEANOMALY) {\n                            MSET(m, i, j, ok_stddev_angle(v->data, v->size, false));\n                        }\n                        else\n                            MSET(m, i, j, gsl_stats_sd(v->data, 1, v->size));\n                        break;\n                    case STAT_MEDIAN:\n                        if (j == MA || j == LOP || j == INC || j == NODE || j == TRUEANOMALY)\n                            MSET(m, i, j, ok_median_angle(v->data, v->size, false));\n                        else {\n                            gsl_sort_vector(v);\n                            MSET(m, i, j, gsl_stats_median_from_sorted_data(v->data, 1, v->size));\n                        }\n                        break;\n                    case STAT_MAD:\n                        if (j == MA || j == LOP || j == INC || j == NODE || j == TRUEANOMALY) {\n                            double med = ok_median_angle(v->data, v->size, false);\n                            MSET(m, i, j, 1.4826 * ok_mad_angle(v->data, v->size, med, false));\n                        } else {\n                            gsl_sort_vector(v);\n                            double med = gsl_stats_median_from_sorted_data(v->data, 1, v->size);\n                            \n                            MSET(m, i, j, 1.4826 * ok_mad(v->data, v->size, med));\n                        }\n                        break;\n                    default:\n                        // percentiles\n                        gsl_sort_vector(v);\n                        MSET(m, i, j, gsl_stats_quantile_from_sorted_data(v->data, 1, v->size, (double)(what)/100.));\n                };\n            }\n    gsl_vector_free(v);\n    return m;\n}\n\n/**\n * Get a summary statistic for the parameters; for instance,\n * the median value calculated over all the elements of the list.\n * @param kl List\n * @param what Can be one of: STAT_MEAN, STAT_MEDIAN, STAT_STDDEV, STAT_MAD. \n * @return A vector whose entries are the summary statistic for the \n * corresponding orbital parameter.\n */\ngsl_vector* KL_getParsStats(const ok_list* kl, const int what) {\n\n    gsl_vector* v = gsl_vector_alloc(kl->size);\n    gsl_vector* ret = gsl_vector_calloc(PARAMS_SIZE + 1);\n    \n    \n    for (int j = 0; j < PARAMS_SIZE + 1; j++) {\n        if (j == PARAMS_SIZE)\n                for (int n = 0; n < kl->size; n++) {\n                        VSET(v, n, kl->kernels[n]->merit);\n                }\n        else\n                for (int n = 0; n < kl->size; n++) {\n                        VSET(v, n, VGET(kl->kernels[n]->params, j));\n                }\n\n        switch (what) {\n            case STAT_MEAN:\n                VSET(ret, j, gsl_stats_mean(v->data, 1, v->size));\n                break;\n            case STAT_STDDEV:\n                VSET(ret, j, gsl_stats_sd(v->data, 1, v->size));\n                break;\n            case STAT_MEDIAN:\n                gsl_sort_vector(v);\n                VSET(ret, j, gsl_stats_median_from_sorted_data(v->data, 1, v->size));\n                break;\n            case STAT_MAD:\n                gsl_sort_vector(v);\n                double med = gsl_stats_median_from_sorted_data(v->data, 1, v->size);\n                VSET(ret, j, 1.4826 * ok_mad(v->data, v->size, med));\n                break;\n            default:\n                // percentiles\n                gsl_sort_vector(v);\n                VSET(v , j, gsl_stats_quantile_from_sorted_data(v->data, 1, v->size, (double)(what)/100.));\n        };\n    };\n            \n    gsl_vector_free(v);\n    return ret;\n}\n\nint KL_getSize(const ok_list* kl) {\n    return kl->size;\n}\n\nint KL_getNplanets(const ok_list* kl) {\n    return MROWS(kl->kernels[0]->elements)-1;\n}\n\n\nvoid KL_removeAtIndex(ok_list* kl, const int idx) {\n    gsl_matrix_free(kl->kernels[idx]->elements);\n    gsl_vector_free(kl->kernels[idx]->params);\n    free(kl->kernels[idx]);\n    \n    for (int i = idx + 1; i < kl->size; i++)\n        kl->kernels[i-1] = kl->kernels[i];\n    kl->size--;\n}\n\nvoid KL_fprintf(const ok_list* kl, FILE* out, const char* fmt, const char* lfmt) {\n    lfmt = (lfmt != NULL ? lfmt : \"%10s%d\");\n    \n    int np = MROWS(kl->kernels[0]->elements)-1;\n    int vo = PARAMS_SIZE;\n    \n    fprintf(out, \"# Planets = %d\\n\", np);\n    fprintf(out, \"# Trials = %d\\n\", kl->size);\n    fprintf(out, \"# Mstar = %e\\n\", K_getMstar(kl->prototype));\n    fprintf(out, \"# Epoch = %e\\n\", K_getEpoch(kl->prototype));\n    \n    \n    \n    for (int i = 0; i < ALL_ELEMENTS_SIZE; i++)\n        for (int j = 1; j <= np; j++)\n            fprintf(out, lfmt, ok_all_orb_labels[i], j);\n    for (int i = 0; i < vo; i++)\n        fprintf(out, lfmt, \"PARAM\", i);\n    fprintf(out, \"\\n\");\n    \n    for (int m = 0; m < kl->size; m++) {\n\n        gsl_matrix* ae = kl->kernels[m]->elements;\n        for (int i = 0; i < ALL_ELEMENTS_SIZE; i++)\n            for (int j = 1; j <= np; j++)\n                fprintf(out, fmt, MGET(ae, j, i));\n        \n        for (int i = 0; i < vo; i++)\n            fprintf(out, fmt, VGET(kl->kernels[m]->params, i));\n        \n        fprintf(out, fmt, kl->kernels[m]->merit);\n        fprintf(out, fmt, kl->kernels[m]->merit_pr);\n        fprintf(out, fmt, kl->kernels[m]->merit_li);\n        fprintf(out, fmt, kl->kernels[m]->tag);\n        fprintf(out, \" \\n\");\n        \n    }\n    \n}\n\n/**\n * Save list to a file\n * @param kl List\n * @param out File handle (already opened for writing)\n */\nvoid KL_save(const ok_list* kl, FILE* out) {\n    fprintf(out, \"#KernelList\\n\");\n    KL_fprintf(kl, out, \"%10.8e \", \"%18s%d\");\n    fprintf(out, \"#End\\n\");\n}\n\n/**\n * Flattens a list into a double array. Used by the R wrapper.\n * @param kl\n * @param out\n */\nvoid KL_to_ptr(const ok_list* kl, double* out) {\n    int idx = 0;\n    int np = KL_getNplanets(kl);\n    \n    for (int row = 0; row < kl->size; row++) {\n        for (int i = 1; i <= np; i++) {\n            for (int j = 0; j < ALL_ELEMENTS_SIZE; j++)\n                out[idx++] = MGET(kl->kernels[row]->elements, i, j);\n        }\n        \n        \n        for (int i = 0; i < PARAMS_SIZE; i++)\n            out[idx++] = VGET(kl->kernels[row]->params, i);\n        \n        out[idx++] = kl->kernels[row]->merit;\n        out[idx++] = kl->kernels[row]->merit_pr;\n        out[idx++] = kl->kernels[row]->merit_li;\n    }\n}\n\n","#include <gsl/gsl_multifit_nlin.h>\n\n#include \"math.h\"\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n#include \"utils.h\"\n\n#include \"kernel.h\"\n\n#include <gsl/gsl_vector.h>\n#include <gsl/gsl_vector_int.h>\n\n#define PARTYPE_PAR -1\n#define STEP_EPS (sqrt(1e-20))\n\ntypedef struct  {\n    ok_kernel* k;\n    double** pars;\n    double* best;\n    double* stepscale;\n    double** compiled;\n    double* f0;\n    double* f1;\n    double* f2;\n    double* f3;\n    \n    int* parstype;\n    unsigned int ndata;\n    unsigned int iterations;\n    unsigned int every;\n    unsigned int maxiterations;\n    unsigned int status;\n    unsigned int npars;\n    double min_chi;\n    double st;\n    \n    bool high_df;\n} ok_lm_params;\n\n\n\nstatic inline void K_lm_calc(ok_kernel* k, double* f, const int ndata, const double** compiled, ok_lm_params* params) {\n    k->flags |= NEEDS_SETUP;\n    K_calculate(k);\n\n    \n    for (int i = 0; i < k->ndata; i++) {\n        const double* comprow = compiled[i];\n        int set = (int) comprow[T_SET];\n        double n = K_getPar(k, set + DATA_SETS_SIZE);\n        \n        double diff = (comprow[T_PRED] - comprow[T_SVAL]);\n        double s = comprow[T_ERR];\n        \n        if (((int) comprow[T_FLAG]) == T_RV && n > 1e-12)\n            f[i] = diff / sqrt(s*s + n*n);\n        else \n            f[i] = diff / s;   \n    }\n    \n    if (k->chi2 < params->min_chi) {\n        params->min_chi = k->chi2;\n        for (int i = 0; i < params->npars; i++)\n            params->best[i] = *(params->pars[i]);\n    }\n}\n\nint K_lm_f(const gsl_vector* x, void* params, gsl_vector* f) {\n    ok_lm_params* sp = (ok_lm_params*) params;\n    \n    if (sp->status != PROGRESS_CONTINUE) {\n        for (int i = 0; i < f->size; i++)\n            f->data[i] = INVALID_NUMBER;\n        return GSL_EINVAL;\n    }\n        \n    ok_kernel* k = sp->k;\n    \n    double** pars = sp->pars;\n    double** compiled = sp->compiled;\n    unsigned int ndata = sp->ndata;\n    \n    for (int i = 0; i < x->size; i++)\n        *(pars[i]) = x->data[i];\n    \n    K_lm_calc(k, f->data, ndata, (const double**) compiled, sp);\n    \n    sp->iterations++;\n    \n    if (sp->iterations % sp->every == 0 && k->progress != NULL) {\n        k->chi2 = sp->min_chi;\n        if ((k->progress)(sp->iterations, sp->maxiterations, k, __func__) != PROGRESS_CONTINUE) {\n            sp->status = PROGRESS_STOP;\n            for (int i = 0; i < ndata; i++)\n                f->data[i] = INVALID_NUMBER;\n            return GSL_EINVAL;\n        }\n    }\n    \n    return GSL_SUCCESS;\n}\n\nint K_lm_jac(const gsl_vector * x, void * params, gsl_matrix * J) {\n    ok_lm_params* sp = (ok_lm_params*) params;\n    \n    if (sp->status != PROGRESS_CONTINUE) {\n        for (int i = 0; i < J->size1*J->size2; i++)\n            J->data[i] = INVALID_NUMBER;\n        return GSL_SUCCESS;\n    }\n    \n    double* inp = x->data;\n    double* jac = J->data;\n    int m = x->size;\n    \n    ok_kernel* k = sp->k;\n    double** pars = sp->pars;\n    double* scale = sp->stepscale;\n    int* parstype = sp->parstype;\n    int ndata = sp->ndata;\n    double** compiled = sp->compiled;\n    double* f0 = sp->f0;\n    double* f1 = sp->f1;\n    double* f2 = sp->f2;\n    double* f3 = sp->f3;\n    \n    for (int i = 0; i < m; i++)\n        *(pars[i]) = inp[i];\n    \n    \n    for (int j = 0; j < m; j++) {\n        // Forward differences\n        if ((parstype[j] == ECC || parstype[j] == MASS) && (inp[j] - 2. * scale[j] < 0)) {\n            *(pars[j]) = inp[j];\n            K_lm_calc(k, f0, ndata, (const double**) compiled, sp);\n\n            *(pars[j]) = inp[j] + scale[j];\n            K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n            *(pars[j]) = inp[j] + 2 * scale[j];\n            K_lm_calc(k, f2, ndata, (const double**) compiled, sp);\n\n            for (int i = 0; i < ndata; i++) {\n                jac[i * m + j] = (-0.5 * f2[i] + 2 * f1[i] - 1.5 *  f0[i]) / (scale[j]);\n            }\n            \n            *(pars[j]) = inp[j];\n        } else {\n        // Central differences\n            if (sp->high_df) {\n                *(pars[j]) = inp[j] - 2.*scale[j];\n                K_lm_calc(k, f0, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] - scale[j];\n                K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] + scale[j];\n                K_lm_calc(k, f2, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] + 2.*scale[j];\n                K_lm_calc(k, f3, ndata, (const double**) compiled, sp);\n\n                for (int i = 0; i < ndata; i++) {\n                    jac[i * m + j] = ( f0[i] + 8.* f2[i] -  8.*f1[i] - f3[i]) /  (12.*scale[j]);\n                }\n            } else {\n                *(pars[j]) = inp[j] - scale[j];\n                K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] + scale[j];\n                K_lm_calc(k, f2, ndata, (const double**) compiled, sp);\n\n                for (int i = 0; i < ndata; i++) {\n                    jac[i * m + j] = (f2[i]-f1[i]) / (double) (2*scale[j]);\n                }\n            }\n            \n            *(pars[j]) = inp[j];\n        }\n         \n    }\n    \n    sp->iterations++;\n    \n    if (sp->iterations % sp->every == 0 && k->progress != NULL) {\n        k->chi2 = sp->min_chi;\n        if ((k->progress)(sp->iterations, sp->maxiterations, k, __func__) != PROGRESS_CONTINUE) {\n            sp->status = PROGRESS_STOP;\n            for (int i = 0; i < J->size1*J->size2; i++)\n                jac[i] = INVALID_NUMBER;\n            return GSL_EINVAL;\n        }\n    }\n    \n    return GSL_SUCCESS;\n}\n\nint K_lm_fdf(const gsl_vector * x, void * params, gsl_vector* f, gsl_matrix * J) {\n    ok_lm_params* sp = (ok_lm_params*) params;\n    \n    if (sp->status != PROGRESS_CONTINUE) {\n        for (int i = 0; i < J->size1*J->size2; i++)\n            J->data[i] = INVALID_NUMBER;\n        return GSL_SUCCESS;\n    }\n    \n    double* inp = x->data;\n    double* jac = J->data;\n    int m = x->size;\n    \n    ok_kernel* k = sp->k;\n    double** pars = sp->pars;\n    double* scale = sp->stepscale;\n    int* parstype = sp->parstype;\n    int ndata = sp->ndata;\n    double** compiled = sp->compiled;\n    double* f0 = sp->f0;\n    double* f1 = sp->f1;\n    double* f2 = sp->f2;\n    double* f3 = sp->f3;\n    \n    for (int i = 0; i < m; i++)\n        *(pars[i]) = inp[i];\n    \n    K_lm_calc(k, f->data, ndata, (const double**) compiled, sp);\n    \n    for (int j = 0; j < m; j++) {\n        // Forward differences\n        if ((parstype[j] == ECC || parstype[j] == MASS) && (inp[j] - 2. * scale[j] < 0)) {\n            \n            *(pars[j]) = inp[j] + scale[j];\n            K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n            *(pars[j]) = inp[j] + 2 * scale[j];\n            K_lm_calc(k, f2, ndata, (const double**) compiled, sp);\n\n            for (int i = 0; i < ndata; i++) {\n                jac[i * m + j] = (-0.5 *  f2[i] + 2 *  f1[i] - 1.5 *  f->data[i]) / ( scale[j]);\n            }\n            \n            *(pars[j]) = inp[j];\n        } else {\n        // Central differences\n            if (sp->high_df) {\n                *(pars[j]) = inp[j] - 2.*scale[j];\n                K_lm_calc(k, f0, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] - scale[j];\n                K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] + scale[j];\n                K_lm_calc(k, f2, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] + 2.*scale[j];\n                K_lm_calc(k, f3, ndata, (const double**) compiled, sp);\n\n                for (int i = 0; i < ndata; i++) {\n                    jac[i * m + j] = (f0[i] + 8.* f2[i] -  8.*f1[i] -  f3[i]) /  (12.*scale[j]);\n                }\n            } else {\n                *(pars[j]) = inp[j] + scale[j];\n                K_lm_calc(k, f0, ndata, (const double**) compiled, sp);\n\n                *(pars[j]) = inp[j] - scale[j];\n                K_lm_calc(k, f1, ndata, (const double**) compiled, sp);\n\n                for (int i = 0; i < ndata; i++) {\n                    jac[i * m + j] = (f0[i]-f1[i]) / (2.*scale[j]);\n                }\n            }\n            \n            *(pars[j]) = inp[j];\n        }\n    }\n    \n    sp->iterations++;\n    \n    if (sp->iterations % sp->every == 0 && k->progress != NULL) {\n        k->chi2 = sp->min_chi;\n        if ((k->progress)(sp->iterations, sp->maxiterations, k, __func__) != PROGRESS_CONTINUE) {\n            sp->status = PROGRESS_STOP;\n            for (int i = 0; i < J->size1*J->size2; i++)\n                jac[i] = INVALID_NUMBER;\n            return GSL_EINVAL;\n        }\n    }\n    \n    return GSL_SUCCESS;\n}\n\nint K_minimize_lm(ok_kernel* k, int maxiter, double params[]) {\n    double min_chi_par = 1e-4;\n    K_calculate(k);\n    double prev_chi2 = k->chi2;\n    bool high_df = false;\n    int max_iter_at_scale = 200;\n    double initial_st = 1.;\n    \n    int max_kt = 1;\n    for (int i = 0; i < k->ndata; i++)\n        if (k->compiled[i][T_FLAG] == T_TIMING) {\n            high_df = true;\n            max_kt = 2;\n            max_iter_at_scale = 500;\n            break;\n        }\n    \n    if (params != NULL) {\n        int i = 0;\n        while (true) {\n            if (params[i] == DONE)\n                break;\n            if (params[i] == OPT_LM_MINCHI_PAR) \n                min_chi_par = params[i+1];\n            else if (params[i] == OPT_LM_HIGH_DF) \n                high_df = !((int) params[i+1] == 0);\n            else if (params[i] == OPT_LM_MAX_ITER_AT_SCALE) \n                max_iter_at_scale = (int) params[i+1];\n            else if (params[i] == OPT_LM_INITIAL_SCALE)\n                initial_st = params[i+1];\n            i+=2;\n        }\n    }\n    unsigned int npars = 0;\n    \n    // Count all the parameters to minimize on\n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            npars += (MIGET(k->plFlags, i, j) & MINIMIZE ? 1 : 0);\n    for (int i = 0; i < k->parFlags->size; i++)\n        npars += (VIGET(k->parFlags, i) & MINIMIZE ? 1 : 0);\n\n    if (npars == 0)\n        return 0;\n    \n    // Create a pointer table (flat array -> matrices)\n    double** pars = (double**) malloc(sizeof(double*) * npars);\n    double prevpars[npars];\n    \n    double* steps = (double*) malloc(npars * sizeof(double));\n    double* stepscale = (double*) malloc(npars * sizeof(double));\n    int* parstype = (int*) malloc(npars * sizeof(int));\n    \n    gsl_vector* x = gsl_vector_alloc(npars);\n    \n    \n    int idx = 0;\n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            if (MIGET(k->plFlags, i, j) & MINIMIZE) {\n                pars[idx] = gsl_matrix_ptr(k->system->elements, i, j);\n                x->data[idx] = MGET(k->system->elements, i, j);\n                prevpars[idx] = x->data[idx];\n                steps[idx] = stepscale[idx] = MGET(k->plSteps, i, j);\n                parstype[idx] = j;\n                \n                if (steps[idx] < 1e-10) {\n                    printf(\"Warning: step for element %d of planet %d is <= 0\\n\", j, i);\n                }\n                \n                idx++;\n            }\n\n    for (int i = 0; i < k->parFlags->size; i++)\n        if (VIGET(k->parFlags, i) & MINIMIZE) {\n            pars[idx] = gsl_vector_ptr(k->params, i);\n            x->data[idx] = VGET(k->params, i);\n            prevpars[idx] = x->data[idx];\n            steps[idx] = stepscale[idx] = VGET(k->parSteps, i);\n            parstype[idx] = PARTYPE_PAR;\n            \n            if (steps[idx] < 1e-10)\n                printf(\"Warning: step for parameter %d is <= 0\\n\", i);\n            \n            idx++;\n        }\n        \n    \n    \n    gsl_multifit_fdfsolver * s\n        = gsl_multifit_fdfsolver_alloc (gsl_multifit_fdfsolver_lmsder, k->ndata, npars);\n    \n    \n    \n    \n    ok_lm_params sp;\n    sp.k = k;\n    sp.pars = pars;\n    sp.best = (double*) malloc(sizeof(double) * npars);\n    sp.stepscale = stepscale;\n    sp.compiled = k->compiled;\n    sp.f0 = (double*) malloc(sizeof(double)*k->ndata);\n    sp.f1 = (double*) malloc(sizeof(double)*k->ndata);\n    sp.f2 = (double*) malloc(sizeof(double)*k->ndata);\n    sp.f3 = (double*) malloc(sizeof(double)*k->ndata);\n    sp.parstype = parstype;\n    sp.ndata = k->ndata;\n    sp.iterations = 0;\n    sp.maxiterations = maxiter;\n    sp.npars = npars;\n    sp.every = (k->intMethod == KEPLER ? 10 : 1);\n    sp.status = PROGRESS_CONTINUE;\n    sp.high_df = high_df;\n    sp.min_chi = k->chi2;\n    sp.st = initial_st;\n    \n    for (int i = 0; i < npars; i++)\n        sp.best[i] = *(pars[i]);\n    \n    gsl_multifit_function_fdf fdf;\n    fdf.f = &K_lm_f;\n    fdf.df = &K_lm_jac;\n    fdf.fdf = &K_lm_fdf;\n    fdf.n = k->ndata;\n    fdf.p = npars;\n    fdf.params = &sp;\n    \n    gsl_multifit_fdfsolver_set (s, &fdf, x);\n    \n    bool improved = true;\n    int status = 0;\n    int kt = 0;\n    int tot_iter = 0;\n    int iter_at_scale = 0;\n    \n    \n    bool last_ditch = false;\n    while (improved || last_ditch) {\n        k->flags |= NEEDS_SETUP;\n        iter_at_scale = 0;\n        \n        while (true) {\n            double chi2 = sp.min_chi;\n            int status = gsl_multifit_fdfsolver_iterate (s);\n\n            iter_at_scale++;\n            tot_iter++;\n            if (chi2 - sp.min_chi > min_chi_par)\n                iter_at_scale = 0;\n            \n            if (status || iter_at_scale > max_iter_at_scale) {\n                break;\n            }\n        }\n        \n        gsl_multifit_fdfsolver_set (s, &fdf, x);\n        \n        \n        for (int i = 0; i < npars; i++) {\n            *(pars[i]) = sp.best[i];\n            x->data[i] = sp.best[i];\n        }\n        \n        k->flags |= NEEDS_SETUP;\n        K_calculate(k);\n        \n        if (fabs(prev_chi2 - sp.min_chi)/fabs(sp.min_chi) > 1e-2 && iter_at_scale > 1) {\n            kt = 0;\n            last_ditch = false;\n        } else {\n            sp.st *= 0.1;\n        }\n        \n        improved = (kt < max_kt || fabs(sp.min_chi - prev_chi2)/fabs(sp.min_chi) > 1e-2);\n        \n        if (last_ditch)\n            break;\n        \n        if (! improved && kt <= 3) {\n            last_ditch = true;\n            sp.st *= 0.1;\n        }\n        \n        kt++;\n        //printf(\"-> %d %d %d %e %e, last_ditch=%d\\n\", iter_at_scale, kt, improved, sp.st, sp.min_chi, last_ditch);\n        prev_chi2 = k->chi2;\n        \n        for (int idx = 0; idx < npars; idx++)\n            stepscale[idx] = steps[idx] * sp.st;\n        \n        if (sp.iterations > maxiter || sp.st < 1e-12)\n            break;\n    }\n    \n    for (int i = 0; i < npars; i++) {\n        *(pars[i]) = sp.best[i];\n        x->data[i] = sp.best[i];\n    }\n\n    k->flags |= NEEDS_SETUP;\n    K_calculate(k);\n\n    \n    free(sp.stepscale);\n    free(sp.f0);\n    free(sp.f1);\n    free(sp.f2);\n    free(sp.f3);\n    free(sp.pars);\n    free(sp.parstype);\n    free(sp.best);\n    \n    if (sp.status == PROGRESS_STOP)\n        return PROGRESS_STOP;\n    else \n        return status;\n   \n}\n","#include <gsl/gsl_statistics_double.h>\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n\n#include \"mcmc.h\"\n#include \"gsl/gsl_matrix.h\"\n#include \"gsl/gsl_randist.h\"\n#include \"math.h\"\n#include \"assert.h\"\n#include \"kl.h\"\n\n#define ASSERTDO(x, action) if (!(x)) { action; assert((x)); } \n\n double K_getElMin(ok_kernel* k, int row, int column, double defMin) {\n    double min, max;\n    K_getElementRange(k, row, column, &min, &max);\n    return (IS_INVALID(min) ? defMin : min);\n}\n\n double K_getElMax(ok_kernel* k, int row, int column, double defMax) {\n    double min, max;\n    K_getElementRange(k, row, column, &min, &max);\n    return (IS_INVALID(max) ? defMax : max);\n}\n\n\n double K_getParMin(ok_kernel* k, int column, double defMin) {\n    double min, max;\n    K_getParRange(k, column, &min, &max);\n    return (IS_INVALID(min) ? defMin : min);\n}\n\n double K_getParMax(ok_kernel* k, int column, double defMax) {\n    double min, max;\n    K_getParRange(k, column, &min, &max);\n    return (IS_INVALID(max) ? defMax : max);\n}\n\n#define UNIFORM_PAR_PRIOR(PAR, DMIN, DMAX) \\\n        if (K_getElementFlag(k, i, PAR) & MINIMIZE) { \\\n                double Pmin = K_getElMin(k, i, PAR, DMIN); \\\n                double Pmax = K_getElMax(k, i, PAR, DMAX); \\\n                prior /= (Pmax - Pmin); \\\n        } \\\n\ndouble K_default_prior(ok_kernel* k) {\n    double prior = 1;\n    \n    for (int i = 1; i < MROWS(k->system->elements); i++) { \n        if (K_getElementFlag(k, i, PER) & MINIMIZE) {\n            double Pmin = K_getElMin(k, i, PER, 0.2);\n            double Pmax = K_getElMax(k, i, PER, 20000.);\n            \n            prior /= (MGET(k->system->elements, i, PER) + Pmin) * log(Pmax/Pmin);\n        }\n        if (K_getElementFlag(k, i, MASS) & MINIMIZE) {\n            double Mmin = K_getElMin(k, i, MASS, 1e-5);\n            double Mmax = K_getElMax(k, i, MASS, 50.);\n            \n            prior /= (MGET(k->system->elements, i, MASS) + Mmin) * log(Mmax/Mmin);\n        }\n        \n        UNIFORM_PAR_PRIOR(MA, 0, 2*M_PI);\n        UNIFORM_PAR_PRIOR(INC, 0, 2*M_PI);\n        UNIFORM_PAR_PRIOR(NODE, 0, 2*M_PI);\n        UNIFORM_PAR_PRIOR(LOP, 0, 2*M_PI);\n        UNIFORM_PAR_PRIOR(ECC, 0, 0.99);\n    }\n    \n    for (int i = P_DATA1; i <= P_DATA10; i++)\n        prior /= K_getParMax(k, i, 1000.)-K_getParMin(k, i, -1000.);\n    \n    for (int i = P_DATA_NOISE1; i <= P_DATA_NOISE10; i++) {\n        if (K_getParFlag(k, i) & MINIMIZE) {\n            double smax = K_getParMax(k, i, 20.);\n            prior /= (fabs(k->params->data[i]) + 0.3) * log((0.3 + smax)/0.3);\n        }\n    }\n    return prior;\n}\n\n\n#define LOG_2PI 1.83787707\nvoid K_mcmc_merit_default(ok_kernel* k, double* ret) {\n    k->flags |= NEEDS_SETUP;\n    K_calculate(k);\n    \n    double chi2 = K_getChi2_nr(k);\n    \n    double prior = K_default_prior(k);\n    double A = 0;\n    for (int i = 0; i < k->ndata; i++) {\n        int set = (int) k->compiled[i][T_SET];\n        double n = K_getPar(k, set + DATA_SETS_SIZE);\n        \n        A += log(SQR(k->compiled[i][T_ERR]) + n*n);\n    }\n    \n    ret[0] = -0.5 * A - 0.5*chi2 - 0.5 * (double) k->ndata * LOG_2PI;\n    ret[1] = log(prior);\n}\n\n#define STATE_STEPS 0\n#define STATE_MAIN 1\n#define STATE_SKIP 2\n\n/**\n * Launches multiple parallel MCMC chains until convergence is achieved; returns a kernel list. The steps are automatically\n * derived by the routine to have a 44% acceptance rate on each minimized parameter. \n * \n * @param k Kernel to be used as the starting point. Set minimization flag to MINIMIZE to decide what parameters to vary.\n * @param nchains Number of chains to run in parallel. The ensemble of chains is used to determine convergence\n * @param ntemps Number of temperatures to run in parallel. \n * @param skip Skip the first 'skip' elements of the chain\n * @param discard Only retain every 'discard'-th element of the chain; the others will be discarded\n * @param params Additional parameters \n * @param Rstop Chains are considered converged when R < Rstop (usually < 1.2)\n * @param merit_function A function that returns the log of the merit of a given step; set to NULL for default. The default merit function\n * returns log(1/sqrt(A)) - 0.5*chi^2 + log(prior). \n * @return A chain of systems \n */\nok_list* K_mcmc_mult(ok_kernel** k, unsigned int nchains, unsigned int ntemps, unsigned int skip, unsigned int discard, const double params[], double Rstop, ok_callback2 merit_function) {\n    int Nsteps = 40000;\n    int Nmin = 5000;\n    \n    int Nstop = -1;\n    \n    double tempfac = (1. - 0.1) / ntemps;\n    int verbose = 0;\n    \n    assert(nchains >= 1);\n    assert(ntemps >= 1);\n    \n    \n    ok_list* kls[nchains][ntemps];\n    \n    ok_progress progress = k[0]->progress;\n    \n    double R_single = -1;\n    bool return_all = true;\n    double acc_ratio = 0.44;\n    \n    bool skip_steps = false;\n    \n    int optIdx = 0;\n    while (params != NULL) {\n\n        if (params[optIdx] == DONE)\n                break;\n        else if (params[optIdx] == OPT_MCMC_RSTOP_SINGLE) {\n            R_single = params[optIdx+ 1];\n        } else if (params[optIdx] == OPT_MCMC_RETURN_ALL) {\n            return_all = !(params[optIdx+ 1] == 0.);\n        } else if (params[optIdx] == OPT_MCMC_NSTOP) {\n            Nstop = params[optIdx+1];\n        } else if (params[optIdx] == OPT_MCMC_NMIN) {\n            Nmin = params[optIdx+1];\n        } else if (params[optIdx] == OPT_MCMC_TEMPFAC) {\n            tempfac = params[optIdx + 1];\n        } else if (params[optIdx] == OPT_MCMC_VERBOSE_DIAGS) {\n            verbose = (int) params[optIdx + 1];\n        } else if (params[optIdx] == OPT_MCMC_ACCRATIO) {\n            acc_ratio = params[optIdx+1];\n        } else if (params[optIdx] == OPT_MCMC_SKIP_STEPS) {\n            skip_steps = ((int) params[optIdx+1]) != 0;\n        }\n        optIdx += 2;\n    }\n    \n     \n    double glOpts[ntemps][9];\n    glOpts[0][0] = OPT_MCMC_BETA;\n    glOpts[0][1] = 1.;\n    glOpts[0][2] = OPT_MCMC_VERBOSE_DIAGS;\n    glOpts[0][3] = verbose;\n    glOpts[0][4] = OPT_MCMC_ACCRATIO;\n    glOpts[0][5] = acc_ratio;\n    glOpts[0][6] = OPT_MCMC_SKIP_STEPS;\n    glOpts[0][7] = (skip_steps ? 1 : 0);\n    glOpts[0][8] = DONE;\n    \n    for (int i = 1; i < ntemps; i++) {\n        glOpts[i][0] = OPT_MCMC_BETA;\n        glOpts[i][1] = glOpts[i-1][1] - tempfac;\n        glOpts[i][2] = OPT_MCMC_VERBOSE_DIAGS;\n        glOpts[i][3] = verbose;\n        glOpts[i][4] = OPT_MCMC_ACCRATIO;\n        glOpts[i][5] = acc_ratio;\n        glOpts[0][6] = OPT_MCMC_SKIP_STEPS;\n        glOpts[0][7] = (skip_steps ? 1 : 0);\n        glOpts[i][8] = DONE;\n    };\n    bool stopped = false;\n    \n    #pragma omp parallel for\n    for (int n = 0; n < nchains; n++) {\n        ok_kernel* k2 = K_clone(k[n]);\n        \n        K_calculate(k2);\n        int flag;\n        for (int j = 0; j < ntemps; j++) {\n            kls[n][j] = K_mcmc_single(k2, 1, 0, discard, glOpts[j], NULL, merit_function, n,\n                    &flag);\n            kls[n][j]->prototype = k2;\n            kls[n][j]->kernels[0]->elements = K_getAllElements(k[n]);\n            kls[n][j]->kernels[0]->params = ok_vector_copy(k[n]->params);\n            \n            if (flag != PROGRESS_CONTINUE)\n                stopped=true;\n        }\n        if (stopped)\n            continue;\n    }\n    \n    \n    bool conv = false;\n    bool conv_single = false;\n    \n    int iter = 0;\n    \n    int npars = 0;\n    \n    for (int i = 1; i < k[0]->system->nplanets+1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++) \n            if (K_getElementFlag(k[0], i, j) & MINIMIZE)\n                npars++;\n        \n    for (int i = 0; i < PARAMS_SIZE; i++)\n        if (K_getParFlag(k[0], i) & MINIMIZE)\n            npars++;\n    \n    double devs[npars][nchains];\n    double avgs[npars][nchains];\n    double devs_90[npars][nchains];\n    double avgs_90[npars][nchains];\n    \n    double devs_2[npars][nchains];\n    double avgs_2[npars][nchains];\n    \n    double W[npars];\n    double B[npars];\n    double R[npars];\n    \n    double W_90[npars];\n    double B_90[npars];\n    double R_90[npars];\n    \n    bool isAngle[npars];\n    \n    for (int i = 0; i < npars; i++)\n        isAngle[i] = false;\n    \n    int np = 0;\n    for (int i = 1; i < k[0]->system->nplanets+1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++) \n                if (K_getElementFlag(k[0], i, j) & MINIMIZE) {\n                    isAngle[np] = (j == MA || j == LOP || j == INC || j == NODE || j == TRUEANOMALY);\n                    np++;\n                }\n    \n    double Rmax = 0;\n    double Rmax_90 = 0;\n    double Rsingle_max = 0;\n    while ((! (conv || conv_single)) || (Nmin > kls[0][0]->size)) {\n        Rmax = 0.;\n        Rmax_90 = 0.;\n        Rsingle_max = 0.;\n        bool stopped = false;\n        #pragma omp parallel for \n        for (int n = 0; n < nchains * ntemps; n++) {\n            \n            int ntem = n % ntemps;\n            int ncha = n - (n % ntemps);\n            int flag;\n            ok_list* kl = K_mcmc_single(kls[ncha][0]->prototype, Nsteps, (iter == 0 ? skip : 0),\n                    discard, glOpts[ntem], kls[ncha][ntem], merit_function, ncha, &flag);\n            \n            if (flag != PROGRESS_CONTINUE)\n                stopped = true;\n            if (stopped)\n                continue;\n            KL_append(kls[ncha][ntem], kl);\n            \n        }\n        \n        if (stopped)\n            break;\n        \n        #pragma omp parallel for\n        for (int n = 0; n < nchains; n++) {\n            int size = kls[n][0]->size;\n            \n            gsl_matrix* dev = KL_getElementsStats(kls[n][0], STAT_STDDEV);\n            gsl_vector* dev_p = KL_getParsStats(kls[n][0], STAT_STDDEV);\n            gsl_matrix* avg = KL_getElementsStats(kls[n][0], STAT_MEAN);\n            gsl_vector* avg_p = KL_getParsStats(kls[n][0], STAT_MEAN);\n            \n            int np = 0;\n            for (int i = 1; i < k[0]->system->nplanets+1; i++)\n                for (int j = 0; j < ELEMENTS_SIZE; j++) \n                        if (K_getElementFlag(k[0], i, j) & MINIMIZE) {\n                            devs[np][n] = MGET(dev, i, j);\n                            avgs[np][n] = MGET(avg, i, j);\n                            np++;\n                        }\n             for (int i = 0; i < PARAMS_SIZE; i++)\n                if (K_getParFlag(k[0], i) & MINIMIZE) {\n                    devs[np][n] = VGET(dev_p, i);\n                    avgs[np][n] = VGET(avg_p, i);                 \n                    np++;\n                }\n            \n            kls[n][0]->size = (int) (0.9 * size);\n            \n            gsl_matrix* dev_90 = KL_getElementsStats(kls[n][0], STAT_STDDEV);\n            gsl_vector* dev_90_p = KL_getParsStats(kls[n][0], STAT_STDDEV);\n            gsl_matrix* avg_90 = KL_getElementsStats(kls[n][0], STAT_MEAN);\n            gsl_vector* avg_90_p = KL_getParsStats(kls[n][0], STAT_MEAN);\n            \n            np = 0;\n            for (int i = 1; i < k[0]->system->nplanets+1; i++)\n                for (int j = 0; j < ELEMENTS_SIZE; j++) \n                        if (K_getElementFlag(k[0], i, j) & MINIMIZE) {\n                            devs_90[np][n] = MGET(dev_90, i, j);\n                            avgs_90[np][n] = MGET(avg_90, i, j);\n                            np++;\n                        }\n             for (int i = 0; i < PARAMS_SIZE; i++)\n                if (K_getParFlag(k[0], i) & MINIMIZE) {\n                    devs_90[np][n] = VGET(dev_90_p, i);\n                    avgs_90[np][n] = VGET(avg_90_p, i);                 \n                    np++;\n                }\n            \n            kls[n][0]->size = (int) (0.5 * size);\n            \n            gsl_matrix* dev_2 = KL_getElementsStats(kls[n][0], STAT_STDDEV);\n            gsl_vector* dev_p_2 = KL_getParsStats(kls[n][0], STAT_STDDEV);\n            gsl_matrix* avg_2 = KL_getElementsStats(kls[n][0], STAT_MEAN);\n            gsl_vector* avg_p_2 = KL_getParsStats(kls[n][0], STAT_MEAN);\n            \n            \n            np = 0;\n            for (int i = 1; i < k[0]->system->nplanets+1; i++)\n                for (int j = 0; j < ELEMENTS_SIZE; j++) \n                        if (K_getElementFlag(k[0], i, j) & MINIMIZE) {\n                            devs_2[np][n] = MGET(dev_2, i, j);\n                            avgs_2[np][n] = MGET(avg_2, i, j);\n                            np++;\n                        }\n             for (int i = 0; i < PARAMS_SIZE; i++)\n                if (K_getParFlag(k[0], i) & MINIMIZE) {\n                    devs_2[np][n] = VGET(dev_p_2, i);\n                    avgs_2[np][n] = VGET(avg_p_2, i);                 \n                    np++;\n                }\n            \n            kls[n][0]->size = size;\n            \n            gsl_matrix_free(dev);\n            gsl_vector_free(dev_p);\n            gsl_matrix_free(avg);\n            gsl_vector_free(avg_p);\n            \n            gsl_matrix_free(dev_2);\n            gsl_vector_free(dev_p_2);\n            gsl_matrix_free(avg_2);\n            gsl_vector_free(avg_p_2);   \n            \n            gsl_matrix_free(dev_90);\n            gsl_vector_free(dev_90_p);\n            gsl_matrix_free(avg_90);\n            gsl_vector_free(avg_90_p);   \n        }\n        \n        Nsteps = discard * 500;\n        conv = true;\n        conv_single = (R_single < 0 ? false : true);\n        \n        int conv_params = 0;\n        int conv_single_param = -1;\n        int conv_single_chain = -1;\n        \n        for (int np = 0; np < npars; np++) {\n            if (isAngle[np]) {\n                W[np] = ok_average_angle(devs[np], nchains, false);\n                B[np] = ok_stddev_angle(avgs[np], nchains, false);\n                W_90[np] = ok_average_angle(devs_90[np], nchains, false);\n                B_90[np] = ok_stddev_angle(avgs_90[np], nchains, false);\n            } else {\n                W[np] = gsl_stats_mean(devs[np], 1, nchains);\n                B[np] = gsl_stats_sd(avgs[np], 1, nchains);\n                W_90[np] = gsl_stats_mean(devs_90[np], 1, nchains);\n                B_90[np] = gsl_stats_sd(avgs_90[np], 1, nchains);\n            }\n            \n            R[np] = sqrt((W[np] + B[np])/W[np]);\n            R_90[np] = sqrt((W_90[np] + B_90[np])/W_90[np]);\n            \n            Rmax = MAX(Rmax, R[np]);\n            Rmax_90 = MAX(Rmax_90, R_90[np]);\n            \n            if (R[np] < Rstop && R_90[np] < Rstop)\n                conv_params++;\n            \n            \n            for (int j = 0; j < nchains; j++) {\n                double R_single_dev = fabs(1 - fabs(devs[np][j] / devs_2[np][j]));\n                \n                \n                if (R_single_dev > Rsingle_max) {\n                    conv_single_param = np;\n                    conv_single_chain = j;\n                }\n                Rsingle_max = MAX(Rsingle_max, R_single_dev);\n            }\n            \n            \n            conv = conv && (R[np] < Rstop) && (R_90[np] < Rstop);\n        } \n        \n        if (R_single > 0)\n                conv_single = Rsingle_max < R_single;\n        \n        if (progress != NULL) {\n            char prog[400];\n            sprintf(prog, \"[%d] R = %.3e [%.3e], Rsingle_max = %.3e [par = %d, chain = %d], Rstop = %.2e\", kls[0][0]->size, Rmax, Rmax_90, Rsingle_max, conv_single_param, conv_single_chain, Rstop);\n            \n            double p = 10000.*(1-fabs(Rmax-Rstop)/Rstop);\n            \n            int progret = progress((int)p, 10000, NULL, prog);\n            \n            if (progret == PROGRESS_STOP)\n                conv = true;\n        }\n        \n        if (verbose > 1) {\n            printf(\"Rmax = %e [Rmax_90 = %e], Rsingle_max = %e, Chain length = %d\\n\", Rmax, Rmax_90, Rsingle_max, kls[0][0]->size);\n        }\n        \n        if (kls[0][0]->size > Nstop && Nstop > 0) {\n            conv = true;\n        }\n        \n        if (ntemps > 1) {\n            for (int n = 0; n < nchains; n++) {\n                int j = gsl_rng_uniform_int(k[0]->rng, ntemps - 1);\n                \n                double beta_j = glOpts[j][1];\n                double beta_j1 = glOpts[j+1][1];\n                \n                double li_j = kls[n][j]->kernels[kls[n][j]->size-1]->merit_li;\n                double li_j1 = kls[n][j+1]->kernels[kls[n][j+1]->size-1]->merit_li;\n                \n                double r = (beta_j * li_j1 + beta_j1 * li_j - beta_j * li_j - beta_j1 * li_j1);\n                \n                assert(!isnan(r));\n                \n                static int iter = 0;\n                if (j == 0) iter++;\n                \n                \n                if ((r > 0) || (gsl_rng_uniform(k[0]->rng) < MIN(exp(r), 1))) {\n                    ok_list_item* it = kls[n][j]->kernels[kls[n][j]->size-1];\n                    \n                    kls[n][j]->kernels[kls[n][j]->size-1] = kls[n][j+1]->kernels[kls[n][j+1]->size-1];\n                    kls[n][j+1]->kernels[kls[n][j+1]->size-1] = it;\n                }\n            }\n        }\n        \n        \n        iter++;\n    }\n    \n    if (verbose > 0) {\n        printf(\"Final length: %d, final R_max = %e, final Rsingle_max = %e\\n\",\n                kls[0][0]->size, Rmax, Rsingle_max);\n    }\n    \n    if (return_all) {\n        for (int i = 1; i < nchains; i++) {\n            KL_append(kls[0][0], kls[i][0]);\n            for (int j = 1; j < ntemps; j++)\n                KL_free(kls[i][j]);\n        }\n    } else {\n        for (int i = 1; i < nchains; i++)\n            for (int j = 0; j < ntemps; j++)\n                KL_free(kls[i][j]);\n    }\n    \n    return kls[0][0];\n}\n\nok_list* K_mcmc_single(ok_kernel* k2, unsigned int nsteps, unsigned int skip, unsigned int discard, const double dparams[], ok_list* cont, ok_callback2 merit_function, int tag,\n        int* flag) {\n    \n    \n    gsl_matrix* plSteps = k2->plSteps;\n    gsl_vector* parSteps = k2->parSteps;\n    gsl_matrix_int* plFlags = k2->plFlags;\n    gsl_vector_int* parFlags = k2->parFlags;\n    \n    gsl_matrix* oldEls;\n    gsl_vector* oldPars;\n    \n    if (cont != NULL && cont->size > 0) {\n        oldEls = ok_matrix_copy_sub(cont->kernels[cont->size-1]->elements, \n                0, MROWS(cont->kernels[cont->size-1]->elements),\n                0, ELEMENTS_SIZE);\n        \n        oldPars = ok_vector_copy(cont->kernels[cont->size-1]->params);\n        MATRIX_MEMCPY(k2->system->elements, oldEls);\n        VECTOR_MEMCPY(k2->params, oldPars);\n        k2->flags |= NEEDS_SETUP;\n    } else {\n        oldEls = ok_matrix_copy(K_getElements(k2));\n        oldPars = ok_vector_copy(k2->params);\n    }\n    \n    bool skipStepsConvergence = false;\n    int optIdx = 0;\n    double beta = 1.;\n    int verbose = 2;\n    double acc_ratio = 0.25;\n    int progress_every = (k2->intMethod == KEPLER ? 2000 : 2);\n    long max_steps = -1;\n    \n    while (dparams != NULL) {\n        if (dparams[optIdx] == DONE)\n            break;\n        else if (dparams[optIdx] == OPT_MCMC_SKIP_STEPS) {\n            skipStepsConvergence = ((int) dparams[optIdx + 1]) != 0;\n        }\n        else if (dparams[optIdx] == OPT_MCMC_BETA)\n            beta = dparams[optIdx + 1];\n        else if (dparams[optIdx] == OPT_MCMC_VERBOSE_DIAGS)\n            verbose = dparams[optIdx + 1];\n        else if (dparams[optIdx] == OPT_MCMC_ACCRATIO)\n            acc_ratio = dparams[optIdx + 1];\n        \n        optIdx += 2;\n    }\n   \n    \n    int nbodies = plSteps->size1;\n    int npar = 0;\n        \n    for (int j = ELEMENTS_SIZE; j < nbodies * ELEMENTS_SIZE; j++)\n        if (plFlags->data[j] & MINIMIZE)\n            npar++;\n    \n    for (int j = 0; j < PARAMS_SIZE; j++)\n        if (parFlags->data[j] & MINIMIZE)\n            npar++;\n    \n    double acc = 0;\n    double acc_par[npar];\n    memset(acc_par, 0, sizeof(double) * npar);\n    double n_par[npar];\n    memset(n_par, 0, sizeof(double) * npar);\n    bool conv_par[npar];\n    \n    double* steps[npar];\n    if (discard < 0)\n        discard = 10*npar;\n    \n    ok_list* kl = KL_alloc((int)(MAX(nsteps/discard, 1)), NULL);\n    \n    int kpar = 0;\n    for (int j = ELEMENTS_SIZE; j < nbodies * ELEMENTS_SIZE; j++)\n        if (plFlags->data[j] & MINIMIZE) {\n            steps[kpar] = &(plSteps->data[j]);\n            conv_par[kpar] = false;\n            kpar++;\n        }\n    for (int j = 0; j < PARAMS_SIZE; j++)\n        if (parFlags->data[j] & MINIMIZE) {\n            steps[kpar] = &(parSteps->data[j]);\n            conv_par[kpar] = false;\n            kpar++;\n        }\n    \n    double prevMerit[2];\n    double merit[2];\n    \n    \n    (merit_function == NULL ? K_mcmc_merit_default(k2, prevMerit) : merit_function(k2, prevMerit));\n    double prevChi = K_getChi2_nr(k2);\n    \n    int state = ((cont == NULL && !skipStepsConvergence) ? STATE_STEPS : STATE_SKIP);\n    \n    ok_list_item* it = KL_set(kl, 0, K_getAllElements(k2), ok_vector_copy(oldPars), prevMerit[0]+prevMerit[1], tag);\n    it->merit_pr = prevMerit[1];\n    it->merit_li = prevMerit[0];\n    \n    ok_progress progress = k2->progress;\n    *flag = PROGRESS_CONTINUE;\n    \n    int it_idx = 0;\n    \n    for (unsigned int i = 0; (i <= nsteps) || (state != STATE_MAIN); i++) {\n        int sub = 0;\n        if (state == STATE_STEPS) {\n            sub = gsl_rng_uniform_int(k2->rng, npar);\n            n_par[sub] += 1.;\n        }\n        \n        int par = 0;\n        bool invalid = false;\n\n        for (int pl = 1; pl < nbodies; pl++) {\n            for (int j = 0; j < ELEMENTS_SIZE; j++) {\n                if (MIGET(plFlags, pl, j) & MINIMIZE) {\n                    \n                    if (state == STATE_MAIN || state == STATE_SKIP || (state == STATE_STEPS && par == sub))\n                        MSET(k2->system->elements, pl, j, MGET(oldEls, pl, j) + gsl_ran_gaussian(k2->rng, MGET(plSteps, pl, j)));\n\n                    if ((j == MA) || (j == LOP) || (j == INC) || (j == NODE)) {\n                        MSET(k2->system->elements, pl, j, DEGRANGE(MGET(k2->system->elements, pl, j)));\n                    }\n\n                    if (k2->plRanges[0] != NULL) {\n                        if ((! IS_INVALID(MGET(k2->plRanges[0], pl, j))) && (MGET(k2->system->elements, pl, j) < MGET(k2->plRanges[0], pl, j)))\n                            invalid = true;\n                        if ((! IS_INVALID(MGET(k2->plRanges[1], pl, j))) && (MGET(k2->system->elements, pl, j) > MGET(k2->plRanges[1], pl, j)))\n                            invalid = true;\n                    }\n\n                    par++;\n                }\n            }\n        }\n        \n        for (int j = 0; j < PARAMS_SIZE; j++) {\n            if (parFlags->data[j] & MINIMIZE) {\n                if (state == STATE_MAIN || state == STATE_SKIP || (state == STATE_STEPS && par == sub))\n                    k2->params->data[j] = oldPars->data[j] + gsl_ran_gaussian(k2->rng, parSteps->data[j]); \n\n                if (j >= P_DATA_NOISE1 && j <= P_DATA_NOISE10)\n                    k2->params->data[j] = fabs(k2->params->data[j]);\n                \n                if (k2->parRanges[0] != NULL) {\n                    if (! IS_INVALID(VGET(k2->parRanges[0], j)) && k2->params->data[j] < k2->parRanges[0]->data[j])\n                        invalid = true;\n                    if (! IS_INVALID(VGET(k2->parRanges[1], j)) && k2->params->data[j] > k2->parRanges[1]->data[j])\n                        invalid = true;\n                }\n                par++;\n            }\n        }\n\n        \n        if (invalid) {\n            if (i % discard == 0 && state == STATE_MAIN) {\n                MATRIX_MEMCPY(k2->system->elements, oldEls);\n                VECTOR_MEMCPY(k2->params, oldPars);\n                \n                k2->flags |= NEEDS_SETUP;\n                it = KL_set(kl, it_idx, K_getAllElements(k2), ok_vector_copy(oldPars), prevMerit[0]+prevMerit[1], tag);\n                it->merit_pr = prevMerit[1];\n                it->merit_li = prevMerit[0];\n                it_idx++;\n            }\n            continue;\n        }\n\n        k2->flags |= NEEDS_SETUP;\n        \n        (merit_function == NULL ? K_mcmc_merit_default(k2, merit) : merit_function(k2, merit));\n        ASSERTDO(!isnan(merit[0]), ok_fprintf_matrix(k2->system->elements, stdout, \"%e \"));\n        ASSERTDO(!isnan(merit[1]), ok_fprintf_matrix(k2->system->elements, stdout, \"%e \"));\n        \n        assert(!isinf(merit[0]));\n        assert(!isinf(merit[1]));\n\n        double al = MIN(exp(merit[1]-prevMerit[1] + beta * (merit[0] - prevMerit[0])), 1.);\n        double u = gsl_rng_uniform(k2->rng);\n\n        if (i % 500 == 0 && verbose > 1 && omp_get_thread_num() == 0 && state != STATE_STEPS) {\n            static double maxP = -1;\n            maxP = MAX(maxP, MGET(k2->system->elements, 1, PER));\n            \n            printf(\"%e %e %e %e %e %e %e %e %e %e %e d = %d\\n\", merit[0], prevMerit[0], \n                    beta, prevChi, K_getChi2_nr(k2), u, al, \n                    VGET(k2->params, P_DATA_NOISE1), \n                    MGET(k2->system->elements, 1, PER), \n                    maxP, \n                    *steps[sub], discard);\n            fflush(stdout);\n            \n        }\n        \n        if (u < al) {\n            prevMerit[0] = merit[0];\n            prevMerit[1] = merit[1];\n            prevChi = K_getChi2_nr(k2);\n            \n            MATRIX_MEMCPY(oldEls, k2->system->elements);\n            VECTOR_MEMCPY(oldPars, k2->params);\n            \n            acc += 1.;\n            \n            if (state == STATE_STEPS) {\n                acc_par[sub] += 1.;\n            }\n            \n            k2->flags |= NEEDS_SETUP;\n        } else {\n            MATRIX_MEMCPY(k2->system->elements, oldEls);\n            VECTOR_MEMCPY(k2->params, oldPars);\n            \n            k2->flags |= NEEDS_SETUP;\n        }\n\n        if (i % discard == 0 && state == STATE_MAIN) {\n            if (it_idx >= kl->size) {\n                break;\n            }\n            it = KL_set(kl, it_idx, K_getAllElements(k2), ok_vector_copy(oldPars), prevMerit[0] + prevMerit[1], tag);\n            it->merit_pr = prevMerit[1];\n            it->merit_li = prevMerit[0];\n            it_idx++;\n        }\n        \n        if (state == STATE_SKIP && i > skip) {\n            i = 0;\n            state = STATE_MAIN;\n        }\n\n        int n_conv = 0;\n        \n        \n        if (n_par[sub] > 2000 && state == STATE_STEPS) {\n            if (*steps[sub] < 1e-9)\n                *steps[sub] = 1e-9;\n            \n            double oldstep = *steps[sub];\n            \n            \n            double v = (acc_par[sub]/n_par[sub])/acc_ratio;\n            v = MIN(v, 5);\n            \n            *(steps[sub]) *= 0.5 * (1 + v);\n            \n            \n            if (verbose > 2 && omp_get_thread_num() == 0) {\n                printf(\"%d %e -> %e [%e]\\n\", sub, oldstep, *steps[sub], (acc_par[sub]/n_par[sub]));\n                fflush(stdout);\n            }\n            if (fabs(acc_par[sub]/n_par[sub] - acc_ratio) < 0.01) {\n                conv_par[sub] = true;\n            }\n            \n            bool conv = true;\n            for (int kpar = 0; kpar < npar; kpar++) {\n                conv = conv && conv_par[kpar];\n                n_conv++;\n            }\n            \n            if (conv) {\n                i = 0;\n                state = STATE_SKIP;\n            }\n            \n            \n            \n            acc_par[sub] = n_par[sub] = 0.;\n        }\n        \n        if (progress != NULL && (i % progress_every == 0) && omp_get_thread_num() == 0) {\n            int ret;\n            if (state == STATE_STEPS) {\n                char msg[500];\n                double acc_max = 0;\n                for (int i = 0; i < npar; i++)\n                        acc_max = MAX(fabs(acc_par[i]/n_par[i]),\n                                acc_max);\n                sprintf(msg, \"Computing step sizes [%.2f->%.2f]\",\n                        acc_max, acc_ratio);\n                ret = progress(n_conv, npar, NULL, msg);\n            } else\n                ret = progress(i, nsteps, NULL, \"\");\n            *flag = ret;\n            if (ret == PROGRESS_STOP)\n                break;\n        }\n    }\n    \n    gsl_matrix_free(oldEls);\n    gsl_vector_free(oldPars);\n    \n    return kl;\n}\n","\n/* This is a hand-optimized version of mercury.f's orbit routines */\n\n#include \"f2c.h\"\n#include <math.h>\n#include \"stdio.h\"\n/* Table of constant values */\n\nstatic doublereal c_b2 = 1.;\nstatic doublereal c_b4 = 6.2831853071795862;\nstatic integer c__9 = 9;\nstatic integer c__1 = 1;\nstatic doublereal c_b14 = .3333333333333333;\nstatic integer c__5 = 5;\nstatic doublereal c_b34 = .33333333333333331;\n\n\n#define mco_sine__(x, sx, cx) { sx = sin((*x)); cx = cos((*x)); }\n#define mco_sine_noptr__(x, sx, cx) { sx = sin((x)); cx = cos((x)); }\n\n#define pi 3.14159265e+00\n#define twopi 6.2831853072e+00\n#define piby2 1.57079633e+00\n/*\ndoublereal mco_kep__(doublereal e, doublereal M) {\n        //represent function and its derivatives\n        double f, f1, f2, f3;\n        double d1, d2, d3;\n        double accuracy_rel = 1e-7;\n        double accuracy_abs = 1e-23;\n        if (e == 0.) {\n            return M;\n        }\n        double E = M + .85 * e;\n        if (M > pi) {\n            E = M - .85 * e;\n        }\n        f = E - e * sin(E) - M;\n        while (fabs(f / M) > accuracy_rel && fabs(f) > accuracy_abs) {\n            f1 = 1 - e * cos(E);\n            f2 = -1 * f - M + E;\n            f3 = -1 * f1 + 1;\n            d1 = -1 * f / f1;\n            d2 = -1 * f / (f1 + .5 * d1 * f2);\n            d3 = -1 * f / (f1 + .5 * d2 * f2 + d2 * d2 * f3 / 6);\n            E = E + d3;\n            f = E - e * sin(E) - M;\n        }\n        return E;\n    }\n\n*/\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/*      MCO_KEP.FOR    (ErikSoft  7 July 1999) */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/* Author: John E. Chambers */\n\n/* Solves Kepler's equation for eccentricities less than one. */\n/* Algorithm from A. Nijenhuis (1991) Cel. Mech. Dyn. Astron. 51, 319-330. */\n\n/*  e = eccentricity */\n/*  l = mean anomaly      (radians) */\n/*  u = eccentric anomaly (   \"   ) */\n\n/* ------------------------------------------------------------------------------ */\n\n/*<       function mco_kep (e,oldl) >*/\ndoublereal mco_kep__(doublereal e, doublereal oldl)\n{\n    /* System generated locals */\n    doublereal ret_val;\n    \n    /* Builtin functions */\n    double sqrt(doublereal), log(doublereal), exp(doublereal);\n    \n    /* Local variables */\n    doublereal l, p, q, x, f0, f1, f2, f3, p2, u1, u2, x2, z1, z2, z3, \n    cc, sn, ss;\n    logical big;\n    doublereal ome, dsn;\n    logical bigg, flag__;\n    doublereal sign;\n    \n    /*<       implicit none >*/\n    \n    /* Input/Outout */\n    /*<       real*8 oldl,e,mco_kep >*/\n    \n    /* Local */\n    /*<       real*8 l,pi,twopi,piby2,u1,u2,ome,sign >*/\n    /*<       real*8 x,x2,sn,dsn,z1,z2,z3,f0,f1,f2,f3 >*/\n    /*<       real*8 p,q,p2,ss,cc >*/\n    /*<       logical flag,big,bigg >*/\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    \n    /* Reduce mean anomaly to lie in the range 0 < l < pi */\n    /*<       if (oldl.ge.0) then >*/\n    if (oldl >= 0.) {\n        /*<         l = mod(oldl, twopi) >*/\n        l = fmod(oldl, twopi);\n        /*<       else >*/\n    } else {\n        /*<         l = mod(oldl, twopi) + twopi >*/\n        l = fmod(oldl, twopi) + twopi;\n        /*<       end if >*/\n    }\n    /*<       sign = 1.d0 >*/\n    sign = 1.;\n    /*<       if (l.gt.pi) then >*/\n    if (l > pi) {\n        /*<         l = twopi - l >*/\n        l = twopi - l;\n        /*<         sign = -1.d0 >*/\n        sign = -1.;\n        /*<       end if >*/\n    }\n    \n    /*<       ome = 1.d0 - e >*/\n    ome = 1. - e;\n    \n    /*<       if (l.ge..45d0.or.e.lt..55d0) then >*/\n    if (l >= .45 || e < .55) {\n        \n        /* Regions A,B or C in Nijenhuis */\n        /* ----------------------------- */\n        \n        /* Rough starting value for eccentric anomaly */\n        /*<         if (l.lt.ome) then >*/\n        if (l < ome) {\n            /*<           u1 = ome >*/\n            u1 = ome;\n            /*<         else >*/\n        } else {\n            /*<           if (l.gt.(pi-1.d0-e)) then >*/\n            if (l > pi - 1. - e) {\n                /*<             u1 = (l+e*pi)/(1.d0+e) >*/\n                u1 = (l + e * pi) / (e + 1.);\n                /*<           else >*/\n            } else {\n                /*<             u1 = l + e >*/\n                u1 = l + e;\n                /*<           end if >*/\n            }\n            /*<         end if >*/\n        }\n        \n        /* Improved value using Halley's method */\n        /*<         flag = u1.gt.piby2 >*/\n        flag__ = u1 > piby2;\n        /*<         if (flag) then >*/\n        if (flag__) {\n            /*<           x = pi - u1 >*/\n            x = pi - u1;\n            /*<         else >*/\n        } else {\n            /*<           x = u1 >*/\n            x = u1;\n            /*<         end if >*/\n        }\n        /*<         x2 = x*x >*/\n        x2 = x * x;\n        /*<         sn = x*(1.d0 + x2*(-.16605 + x2*.00761) ) >*/\n        sn = x * (x2 * (x2 * .00761 - .16605) + 1.);\n        /*<         dsn = 1.d0 + x2*(-.49815 + x2*.03805) >*/\n        dsn = x2 * (x2 * .03805 - .49815) + 1.;\n        /*<         if (flag) dsn = -dsn >*/\n        if (flag__) {\n            dsn = -dsn;\n        }\n        /*<         f2 = e*sn >*/\n        f2 = e * sn;\n        /*<         f0 = u1 - f2 - l >*/\n        f0 = u1 - f2 - l;\n        /*<         f1 = 1.d0 - e*dsn >*/\n        f1 = 1. - e * dsn;\n        /*<         u2 = u1 - f0/(f1 - .5d0*f0*f2/f1) >*/\n        u2 = u1 - f0 / (f1 - f0 * .5 * f2 / f1);\n        /*<       else >*/\n    } else {\n        \n        /* Region D in Nijenhuis */\n        /* --------------------- */\n        \n        /* Rough starting value for eccentric anomaly */\n        /*<         z1 = 4.d0*e + .5d0 >*/\n        z1 = e * 4. + .5;\n        /*<         p = ome / z1 >*/\n        p = ome / z1;\n        /*<         q = .5d0 * l / z1 >*/\n        q = l * .5 / z1;\n        /*<         p2 = p*p >*/\n        p2 = p * p;\n        /*<         z2 = exp( log( dsqrt( p2*p + q*q ) + q )/1.5 ) >*/\n        z2 = exp(log(sqrt(p2 * p + q * q) + q) / 1.5);\n        /*<         u1 = 2.d0*q / ( z2 + p + p2/z2 ) >*/\n        u1 = q * 2. / (z2 + p + p2 / z2);\n\n        /* Improved value using Newton's method */\n        /*<         z2 = u1*u1 >*/\n        z2 = u1 * u1;\n        /*<         z3 = z2*z2 >*/\n        z3 = z2 * z2;\n        /*<         u2 = u1 - .075d0*u1*z3 / (ome + z1*z2 + .375d0*z3) >*/\n        u2 = u1 - u1 * .075 * z3 / (ome + z1 * z2 + z3 * .375);\n        /*<         u2 = l + e*u2*( 3.d0 - 4.d0*u2*u2 ) >*/\n        u2 = l + e * u2 * (3. - u2 * 4. * u2);\n        /*<       end if >*/\n    }\n    \n    /* Accurate value using 3rd-order version of Newton's method */\n    /* N.B. Keep cos(u2) rather than sqrt( 1-sin^2(u2) ) to maintain accuracy! */\n    \n    /* First get accurate values for u2 - sin(u2) and 1 - cos(u2) */\n    /*<       bigg = (u2.gt.piby2) >*/\n    bigg = u2 > piby2;\n    /*<       if (bigg) then >*/\n    if (bigg) {\n        /*<         z3 = pi - u2 >*/\n        z3 = pi - u2;\n        /*<       else >*/\n    } else {\n        /*<         z3 = u2 >*/\n        z3 = u2;\n        /*<       end if >*/\n    }\n    \n    /*<       big = (z3.gt.(.5d0*piby2)) >*/\n    big = z3 > (piby2 * .5);\n    /*<       if (big) then >*/\n    if (big) {\n        /*<         x = piby2 - z3 >*/\n        x = piby2 - z3;\n        /*<       else >*/\n    } else {\n        /*<         x = z3 >*/\n        x = z3;\n        /*<       end if >*/\n    }\n    \n    /*<       x2 = x*x >*/\n    x2 = x * x;\n    /*<       ss = 1.d0 >*/\n    ss = 1.;\n    /*<       cc = 1.d0 >*/\n    cc = 1.;\n    \n    /*<        >*/\n    ss = x * x2 / 6. * (1. - x2 / 20. * (1. - x2 / 42. * (1. - x2 / \n                                                               72. * (1. - x2 / 110. * (1. - x2 / 156. * (1. - x2 / 210. *\n                                                                                                               (1. - x2 / 272.)))))));\n    /*<        >*/\n    cc = x2 / 2. * (1. - x2 / 12. * (1. - x2 / 30. * (1. - x2 / 56. * (\n                                                                              1. - x2 / 90. * (1. - x2 / 132. * (1. - x2 / 182. * (1. - \n                                                                                                                                         x2 / 240. * (1. - x2 / 306.))))))));\n    \n    /*<       if (big) then >*/\n    if (big) {\n        /*<         z1 = cc + z3 - 1.d0 >*/\n        z1 = cc + z3 - 1.;\n        /*<         z2 = ss + z3 + 1.d0 - piby2 >*/\n        z2 = ss + z3 + 1. - piby2;\n        /*<       else >*/\n    } else {\n        /*<         z1 = ss >*/\n        z1 = ss;\n        /*<         z2 = cc >*/\n        z2 = cc;\n        /*<       end if >*/\n    }\n    \n    /*<       if (bigg) then >*/\n    if (bigg) {\n        /*<         z1 = 2.d0*u2 + z1 - pi >*/\n        z1 = u2 * 2. + z1 - pi;\n        /*<         z2 = 2.d0 - z2 >*/\n        z2 = 2. - z2;\n        /*<       end if >*/\n    }\n    \n    /*<       f0 = l - u2*ome - e*z1 >*/\n    f0 = l - u2 * ome - e * z1;\n    /*<       f1 = ome + e*z2 >*/\n    f1 = ome + e * z2;\n    /*<       f2 = .5d0*e*(u2-z1) >*/\n    f2 = e * .5 * (u2 - z1);\n    /*<       f3 = e/6.d0*(1.d0-z2) >*/\n    f3 = e / 6. * (1. - z2);\n    /*<       z1 = f0/f1 >*/\n    z1 = f0 / f1;\n    /*<       z2 = f0/(f2*z1+f1) >*/\n    z2 = f0 / (f2 * z1 + f1);\n    /*<       mco_kep = sign*( u2 + f0/((f3*z1+f2)*z2+f1) ) >*/\n    ret_val = sign * (u2 + f0 / ((f3 * z1 + f2) * z2 + f1));\n    \n    /*<       return >*/\n    return ret_val;\n    /*<       end >*/\n} /* mco_kep__ */\n\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/*      MCO_X2EL.FOR    (ErikSoft  6 May 2000) */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/* Author: John E. Chambers */\n\n/* Calculates Keplerian orbital elements given relative coordinates and */\n/* velocities, and MU = G times the sum of the masses. */\n\n/* The elements are: q = perihelion distance */\n/*                   e = eccentricity */\n/*                   i = inclination */\n/*                   p = longitude of perihelion (NOT argument of perihelion!!) */\n/*                   n = longitude of ascending node */\n/*                   l = mean anomaly (or mean longitude if e < 1.e-8) */\n\n/* ------------------------------------------------------------------------------ */\n\n/*<       subroutine mco_x2el (mu,x,y,z,u,v,w,q,e,i,p,n,l) >*/\n/* Subroutine */ int mco_x2el__(doublereal *mu, doublereal *x, doublereal *y, \n                                doublereal *z__, doublereal *u, doublereal *v, doublereal *w, \n                                doublereal *q, doublereal *e, doublereal *i__, doublereal *p, \n                                doublereal *n, doublereal *l)\n{\n    /* System generated locals */\n    doublereal d__1;\n    \n    /* Builtin functions */\n    double sqrt(doublereal), acos(doublereal), atan2(doublereal, doublereal), \n    d_sign(doublereal *, doublereal *), sin(doublereal), log(\n                                                             doublereal), sinh(doublereal), d_mod(doublereal *, doublereal *);\n    \n    /* Local variables */\n    doublereal f, h__, r__, s, h2, v2, ce, cf, ci, hx, hy, hz, to, rv, \n    tmp2, bige, temp, true__;\n    \n    \n    /*<       implicit none >*/\n    /*<       integer NMAX, CMAX, NMESS >*/\n    /*<       real*8 HUGE >*/\n    /*<       parameter (NMAX = 2000) >*/\n    /*<       parameter (CMAX = 50) >*/\n    /*<       parameter (NMESS = 200) >*/\n    /*<       parameter (HUGE = 9.9d29) >*/\n    /* Constants: */\n    \n    /* DR = conversion factor from degrees to radians */\n    /* K2 = Gaussian gravitational constant squared */\n    /* AU = astronomical unit in cm */\n    /* MSUN = mass of the Sun in g */\n    \n    /*<       real*8 PI,TWOPI,PIBY2,DR,K2,AU,MSUN >*/\n    \n    /*<       parameter (PI = 3.141592653589793d0) >*/\n    /*<       parameter (TWOPI = PI * 2.d0) >*/\n    /*<       parameter (PIBY2 = PI * .5d0) >*/\n    /*<       parameter (DR = PI / 180.d0) >*/\n    /*<       parameter (K2 = 2.959122082855911d-4) >*/\n    /*<       parameter (AU = 1.4959787e13) >*/\n    /*<       parameter (MSUN = 1.9891e33) >*/\n    \n    /* Input/Output */\n    /*<       real*8 mu,q,e,i,p,n,l,x,y,z,u,v,w >*/\n    \n    /* Local */\n    /*<       real*8 hx,hy,hz,h2,h,v2,r,rv,s,true >*/\n    /*<       real*8 ci,to,temp,tmp2,bige,f,cf,ce >*/\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /*<       hx = y * w  -  z * v >*/\n    hx = *y * *w - *z__ * *v;\n    /*<       hy = z * u  -  x * w >*/\n    hy = *z__ * *u - *x * *w;\n    /*<       hz = x * v  -  y * u >*/\n    hz = *x * *v - *y * *u;\n    /*<       h2 = hx*hx + hy*hy + hz*hz >*/\n    h2 = hx * hx + hy * hy + hz * hz;\n    /*<       v2 = u * u  +  v * v  +  w * w >*/\n    v2 = *u * *u + *v * *v + *w * *w;\n    /*<       rv = x * u  +  y * v  +  z * w >*/\n    rv = *x * *u + *y * *v + *z__ * *w;\n    /*<       r = sqrt(x*x + y*y + z*z) >*/\n    r__ = sqrt(*x * *x + *y * *y + *z__ * *z__);\n    /*<       h = sqrt(h2) >*/\n    h__ = sqrt(h2);\n    /*<       s = h2 / mu >*/\n    s = h2 / *mu;\n    \n    /* Inclination and node */\n    /*<       ci = hz / h >*/\n    ci = hz / h__;\n    /*<       if (abs(ci).lt.1) then >*/\n    if (abs(ci) < 1.) {\n        /*<         i = acos (ci) >*/\n        *i__ = acos(ci);\n        /*<         n = atan2 (hx,-hy) >*/\n        *n = atan2(hx, -hy);\n        /*<         if (n.lt.0) n = n + TWOPI >*/\n        if (*n < 0.) {\n            *n += 6.2831853071795862;\n        }\n        /*<       else >*/\n    } else {\n        /*<         if (ci.gt.0) i = 0.d0 >*/\n        if (ci > 0.) {\n            *i__ = 0.;\n        }\n        /*<         if (ci.lt.0) i = PI >*/\n        if (ci < 0.) {\n            *i__ = 3.141592653589793;\n        }\n        /*<         n = 0.d0 >*/\n        *n = 0.;\n        /*<       end if >*/\n    }\n    \n    /* Eccentricity and perihelion distance */\n    /*<       temp = 1.d0 + s*(v2/mu - 2.d0/r) >*/\n    temp = s * (v2 / *mu - 2. / r__) + 1.;\n    /*<       if (temp.le.0) then >*/\n    if (temp <= 0.) {\n        /*<         e = 0.d0 >*/\n        *e = 0.;\n        /*<       else >*/\n    } else {\n        /*<         e = sqrt (temp) >*/\n        *e = sqrt(temp);\n        /*<       end if >*/\n    }\n    /*<       q = s / (1.d0 + e) >*/\n    *q = s / (*e + 1.);\n    \n    /* True longitude */\n    /*<       if (hy.ne.0) then >*/\n    if (hy != 0.) {\n        /*<         to = -hx/hy >*/\n        to = -hx / hy;\n        /*<         temp = (1.d0 - ci) * to >*/\n        temp = (1. - ci) * to;\n        /*<         tmp2 = to * to >*/\n        tmp2 = to * to;\n        /*<         true = atan2((y*(1.d0+tmp2*ci)-x*temp),(x*(tmp2+ci)-y*temp)) >*/\n        true__ = atan2(*y * (tmp2 * ci + 1.) - *x * temp, *x * (tmp2 + ci) - *\n                       y * temp);\n        /*<       else >*/\n    } else {\n        /*<         true = atan2(y * ci, x) >*/\n        true__ = atan2(*y * ci, *x);\n        /*<       end if >*/\n    }\n    /*<       if (ci.lt.0) true = true + PI >*/\n    if (ci < 0.) {\n        true__ += 3.141592653589793;\n    }\n    \n    /*<       if (e.lt.1.d-8) then >*/\n    if (*e < 1e-6) {\n        /*<         p = 0.d0 >*/\n        *p = 0.;\n        /*<         l = true >*/\n        *l = true__;\n        /*<       else >*/\n    } else {\n        /*<         ce = (v2*r - mu) / (e*mu) >*/\n        ce = (v2 * r__ - *mu) / (*e * *mu);\n        \n        /* Mean anomaly for ellipse */\n        /*<         if (e.lt.1) then >*/\n        if (*e < 1.) {\n            /*<           if (abs(ce).gt.1) ce = sign(1.d0,ce) >*/\n            if (abs(ce) > 1.) {\n                ce = d_sign(&c_b2, &ce);\n            }\n            /*<           bige = acos(ce) >*/\n            bige = acos(ce);\n            /*<           if (rv.lt.0) bige = TWOPI - bige >*/\n            if (rv < 0.) {\n                bige = 6.2831853071795862 - bige;\n            }\n            /*<           l = bige - e*sin(bige) >*/\n            *l = bige - *e * sin(bige);\n            /*<         else >*/\n        } else {\n            \n            /* Mean anomaly for hyperbola */\n            /*<           if (ce.lt.1) ce = 1.d0 >*/\n            if (ce < 1.) {\n                ce = 1.;\n            }\n            /*<           bige = log( ce + sqrt(ce*ce-1.d0) ) >*/\n            bige = log(ce + sqrt(ce * ce - 1.));\n            /*<           if (rv.lt.0) bige = TWOPI - bige >*/\n            if (rv < 0.) {\n                bige = 6.2831853071795862 - bige;\n            }\n            /*<           l = e*sinh(bige) - bige >*/\n            *l = *e * sinh(bige) - bige;\n            /*<         end if >*/\n        }\n        \n        /* Longitude of perihelion */\n        /*<         cf = (s - r) / (e*r) >*/\n        cf = (s - r__) / (*e * r__);\n        /*<         if (abs(cf).gt.1) cf = sign(1.d0,cf) >*/\n        if (abs(cf) > 1.) {\n            cf = d_sign(&c_b2, &cf);\n        }\n        /*<         f = acos(cf) >*/\n        f = acos(cf);\n        /*<         if (rv.lt.0) f = TWOPI - f >*/\n        if (rv < 0.) {\n            f = 6.2831853071795862 - f;\n        }\n        /*<         p = true - f >*/\n        *p = true__ - f;\n        /*<         p = mod (p + TWOPI + TWOPI, TWOPI) >*/\n        d__1 = *p + 6.2831853071795862 + 6.2831853071795862;\n        *p = d_mod(&d__1, &c_b4);\n        /*<       end if >*/\n    }\n    \n    /*<       if (l.lt.0) l = l + TWOPI >*/\n    if (*l < 0.) {\n        *l += 6.2831853071795862;\n    }\n    /*<       if (l.gt.TWOPI) l = mod (l, TWOPI) >*/\n    if (*l > 6.2831853071795862) {\n        *l = d_mod(l, &c_b4);\n    }\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /*<       return >*/\n    return 0;\n    /*<       end >*/\n} /* mco_x2el__ */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/*      MCO_SINE.FOR    (ErikSoft  17 April 1997) */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/* Author: John E. Chambers */\n\n/* Calculates sin and cos of an angle X (in radians). */\n\n/* ------------------------------------------------------------------------------ */\n\n/*<       subroutine mco_sine (x,sx,cx) >*/\n\n                   \n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/*      MCO_SINH.FOR    (ErikSoft  12 June 1998) */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/* Calculates sinh and cosh of an angle X (in radians) */\n\n/* ------------------------------------------------------------------------------ */\n\n/*<       subroutine mco_sinh (x,sx,cx) >*/\n/* Subroutine */ int mco_sinh__(doublereal *x, doublereal *sx, doublereal *cx)\n{\n    /* Builtin functions */\n    double sinh(doublereal), sqrt(doublereal);\n    \n    \n    /*<       implicit none >*/\n    \n    /* Input/Output */\n    /*<       real*8 x,sx,cx >*/\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /*<       sx = sinh(x) >*/\n    *sx = sinh(*x);\n    /*<       cx = sqrt (1.d0 + sx*sx) >*/\n    *cx = sqrt(*sx * *sx + 1.);\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /*<       return >*/\n    return 0;\n    /*<       end >*/\n} /* mco_sinh__ */\n\n/* ********************************************************************** */\n/*                    ORBEL_FGET.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Solves Kepler's eqn. for hyperbola using hybrid approach. */\n\n/*             Input: */\n/*                           e ==> eccentricity anomaly. (real scalar) */\n/*                        capn ==> hyperbola mean anomaly. (real scalar) */\n/*             Returns: */\n/*                  orbel_fget ==>  eccentric anomaly. (real scalar) */\n\n/*     ALGORITHM: Based on pp. 70-72 of Fitzpatrick's book \"Principles of */\n/*           Cel. Mech. \".  Quartic convergence from Danby's book. */\n/*     REMARKS: */\n/*     AUTHOR: M. Duncan */\n/*     DATE WRITTEN: May 11, 1992. */\n/*     REVISIONS: 2/26/93 hfl */\n/* ********************************************************************** */\n/*< \treal*8 function orbel_fget(e,capn) >*/\ndoublereal orbel_fget__(doublereal *e, doublereal *capn)\n{\n    /* System generated locals */\n    doublereal ret_val;\n    \n    /* Builtin functions */\n    double log(doublereal);\n    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), \n    e_wsle(void);\n    \n    /* Local variables */\n    doublereal f;\n    integer i__;\n    doublereal x, fp, dx, ech, esh, chx, fpp, tmp, shx, fppp;\n    extern /* Subroutine */ int orbel_schget__(doublereal *, doublereal *, \n                                               doublereal *);\n    \n    /* Fortran I/O blocks */\n    cilist io___60 = { 0, 6, 0, 0, 0 };\n    \n    \n    /*<         implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*< \treal*8 e,capn >*/\n    /* ...  Internals: */\n    /*< \tinteger i,IMAX >*/\n    /*< \treal*8 tmp,x,shx,chx >*/\n    /*< \treal*8 esh,ech,f,fp,fpp,fppp,dx >*/\n    /*< \tPARAMETER (IMAX = 10) >*/\n    /* ---- */\n    /* ...  Executable code */\n    /* Function to solve \"Kepler's eqn\" for F (here called */\n    /* x) for given e and CAPN. */\n    /*  begin with a guess proposed by Danby */\n    /*< \tif( capn .lt. 0.d0) then >*/\n    if (*capn < 0.) {\n        /*< \t   tmp = -2.d0*capn/e + 1.8d0 >*/\n        tmp = *capn * -2. / *e + 1.8;\n        /*< \t   x = -log(tmp) >*/\n        x = -log(tmp);\n        /*< \telse >*/\n    } else {\n        /*< \t   tmp = +2.d0*capn/e + 1.8d0 >*/\n        tmp = *capn * 2. / *e + 1.8;\n        /*< \t   x = log( tmp) >*/\n        x = log(tmp);\n        /*< \tendif >*/\n    }\n    /*< \torbel_fget = x >*/\n    ret_val = x;\n    /*< \tdo i = 1,IMAX >*/\n    for (i__ = 1; i__ <= 10; ++i__) {\n        /*< \t  call orbel_schget(x,shx,chx) >*/\n        orbel_schget__(&x, &shx, &chx);\n        /*< \t  esh = e*shx >*/\n        esh = *e * shx;\n        /*< \t  ech = e*chx >*/\n        ech = *e * chx;\n        /*< \t  f = esh - x - capn >*/\n        f = esh - x - *capn;\n        /* \t  write(6,*) 'i,x,f : ',i,x,f */\n        /*< \t  fp = ech - 1.d0   >*/\n        fp = ech - 1.;\n        /*< \t  fpp = esh  >*/\n        fpp = esh;\n        /*< \t  fppp = ech  >*/\n        fppp = ech;\n        /*< \t  dx = -f/fp >*/\n        dx = -f / fp;\n        /*< \t  dx = -f/(fp + dx*fpp/2.d0) >*/\n        dx = -f / (fp + dx * fpp / 2.);\n        /*< \t  dx = -f/(fp + dx*fpp/2.d0 + dx*dx*fppp/6.d0) >*/\n        dx = -f / (fp + dx * fpp / 2. + dx * dx * fppp / 6.);\n        /*< \t  orbel_fget = x + dx >*/\n        ret_val = x + dx;\n        /*   If we have converged here there's no point in going on */\n        /*< \t  if(abs(dx) .le. TINY) RETURN >*/\n        if (abs(dx) <= 4e-15) {\n            return ret_val;\n        }\n        /*< \t  x = orbel_fget >*/\n        x = ret_val;\n        /*< \tenddo\t >*/\n    }\n    /*< \twrite(6,*) 'FGET : RETURNING WITHOUT COMPLETE CONVERGENCE'  >*/\n    s_wsle(&io___60);\n    do_lio(&c__9, &c__1, \"FGET : RETURNING WITHOUT COMPLETE CONVERGENCE\", (\n                                                                           ftnlen)45);\n    e_wsle();\n    /*< \treturn >*/\n    return ret_val;\n    /*< \tend   ! orbel_fget >*/\n} /* orbel_fget__ */\n\n/* ------------------------------------------------------------------ */\n/* ********************************************************************** */\n/*                    ORBEL_FLON.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Solves Kepler's eqn. for hyperbola using hybrid approach. */\n\n/*             Input: */\n/*                           e ==> eccentricity anomaly. (real scalar) */\n/*                        capn ==> hyperbola mean anomaly. (real scalar) */\n/*             Returns: */\n/*                  orbel_flon ==>  eccentric anomaly. (real scalar) */\n\n/*     ALGORITHM: Uses power series for N in terms of F and Newton,s method */\n/*     REMARKS: ONLY GOOD FOR LOW VALUES OF N (N < 0.636*e -0.6) */\n/*     AUTHOR: M. Duncan */\n/*     DATE WRITTEN: May 26, 1992. */\n/*     REVISIONS: */\n/* ********************************************************************** */\n/*< \treal*8 function orbel_flon(e,capn) >*/\ndoublereal orbel_flon__(doublereal *e, doublereal *capn)\n{\n    /* System generated locals */\n    doublereal ret_val, d__1;\n    \n    /* Builtin functions */\n    double sqrt(doublereal), pow_dd(doublereal *, doublereal *);\n    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), \n    e_wsle(void);\n    double sinh(doublereal);\n    \n    /* Local variables */\n    doublereal a, b, f;\n    integer i__;\n    doublereal x, a0, a1, b1, x2, fp, dx, sq, biga, bigb, diff;\n    integer iflag;\n    \n    /* Fortran I/O blocks */\n    cilist io___76 = { 0, 6, 0, 0, 0 };\n    cilist io___78 = { 0, 6, 0, 0, 0 };\n    cilist io___79 = { 0, 6, 0, 0, 0 };\n    \n    \n    /*<         implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*< \treal*8 e,capn >*/\n    /* ...  Internals: */\n    /*< \tinteger iflag,i,IMAX >*/\n    /*< \treal*8 a,b,sq,biga,bigb >*/\n    /*< \treal*8 x,x2 >*/\n    /*< \treal*8 f,fp,dx >*/\n    /*< \treal*8 diff >*/\n    /*< \treal*8 a0,a1,a3,a5,a7,a9,a11 >*/\n    /*< \treal*8 b1,b3,b5,b7,b9,b11 >*/\n    /*< \tPARAMETER (IMAX = 10) >*/\n    /*< \tPARAMETER (a11 = 156.d0,a9 = 17160.d0,a7 = 1235520.d0) >*/\n    /*< \tPARAMETER (a5 = 51891840.d0,a3 = 1037836800.d0) >*/\n    /*< \tPARAMETER (b11 = 11.d0*a11,b9 = 9.d0*a9,b7 = 7.d0*a7) >*/\n    /*< \tPARAMETER (b5 = 5.d0*a5, b3 = 3.d0*a3) >*/\n    /* ---- */\n    /* ...  Executable code */\n    /* Function to solve \"Kepler's eqn\" for F (here called */\n    /* x) for given e and CAPN. Only good for smallish CAPN */\n    /*< \tiflag = 0 >*/\n    iflag = 0;\n    /*< \tif( capn .lt. 0.d0) then >*/\n    if (*capn < 0.) {\n        /*< \t   iflag = 1 >*/\n        iflag = 1;\n        /*< \t   capn = -capn >*/\n        *capn = -(*capn);\n        /*< \tendif >*/\n    }\n    /*< \ta1 = 6227020800.d0 * (1.d0 - 1.d0/e) >*/\n    a1 = (1. - 1. / *e) * 6227020800.;\n    /*< \ta0 = -6227020800.d0*capn/e >*/\n    a0 = *capn * -6227020800. / *e;\n    /*< \tb1 = a1 >*/\n    b1 = a1;\n    /*  Set iflag nonzero if capn < 0., in which case solve for -capn */\n    /*  and change the sign of the final answer for F. */\n    /*  Begin with a reasonable guess based on solving the cubic for small F */\n    /*< \ta = 6.d0*(e-1.d0)/e >*/\n    a = (*e - 1.) * 6. / *e;\n    /*< \tb = -6.d0*capn/e >*/\n    b = *capn * -6. / *e;\n    /*< \tsq = sqrt(0.25*b*b +a*a*a/27.d0) >*/\n    sq = sqrt(b * .25 * b + a * a * a / 27.);\n    /*< \tbiga = (-0.5*b + sq)**0.3333333333333333d0 >*/\n    d__1 = b * -.5 + sq;\n    biga = pow_dd(&d__1, &c_b14);\n    /*< \tbigb = -(+0.5*b + sq)**0.3333333333333333d0 >*/\n    d__1 = b * .5 + sq;\n    bigb = -pow_dd(&d__1, &c_b14);\n    /*< \tx = biga + bigb >*/\n    x = biga + bigb;\n    /* \twrite(6,*) 'cubic = ',x**3 +a*x +b */\n    /*< \torbel_flon = x >*/\n    ret_val = x;\n    /* If capn is tiny (or zero) no need to go further than cubic even for */\n    /* e =1. */\n    /*< \tif( capn .lt. TINY) go to 100 >*/\n    if (*capn < 4e-15) {\n        goto L100;\n    }\n    /*< \tdo i = 1,IMAX >*/\n    for (i__ = 1; i__ <= 10; ++i__) {\n        /*< \t  x2 = x*x >*/\n        x2 = x * x;\n        /*< \t  f = a0 +x*(a1+x2*(a3+x2*(a5+x2*(a7+x2*(a9+x2*(a11+x2)))))) >*/\n        f = a0 + x * (a1 + x2 * (x2 * (x2 * (x2 * (x2 * (x2 + 156.) + 17160.) \n                                             + 1235520.) + 51891840.) + 1037836800.));\n        /*< \t  fp = b1 +x2*(b3+x2*(b5+x2*(b7+x2*(b9+x2*(b11 + 13.d0*x2)))))    >*/\n        fp = b1 + x2 * (x2 * (x2 * (x2 * (x2 * (x2 * 13. + 1716.) + 154440.) \n                                    + 8648640.) + 259459200.) + 3113510400.);\n        /*< \t  dx = -f/fp >*/\n        dx = -f / fp;\n        /* \t  write(6,*) 'i,dx,x,f : ' */\n        /* \t  write(6,432) i,dx,x,f */\n        /*< 432\t  format(1x,i3,3(2x,1p1e22.15)) >*/\n        /* L432: */\n        /*< \t  orbel_flon = x + dx >*/\n        ret_val = x + dx;\n        /*   If we have converged here there's no point in going on */\n        /*< \t  if(abs(dx) .le. TINY) go to 100 >*/\n        if (abs(dx) <= 4e-15) {\n            goto L100;\n        }\n        /*< \t  x = orbel_flon >*/\n        x = ret_val;\n        /*< \tenddo\t >*/\n    }\n    /* Abnormal return here - we've gone thru the loop */\n    /* IMAX times without convergence */\n    /*< \tif(iflag .eq. 1) then >*/\n    if (iflag == 1) {\n        /*< \t   orbel_flon = -orbel_flon >*/\n        ret_val = -ret_val;\n        /*< \t   capn = -capn >*/\n        *capn = -(*capn);\n        /*< \tendif >*/\n    }\n    /*< \twrite(6,*) 'FLON : RETURNING WITHOUT COMPLETE CONVERGENCE'  >*/\n    s_wsle(&io___76);\n    do_lio(&c__9, &c__1, \"FLON : RETURNING WITHOUT COMPLETE CONVERGENCE\", (\n                                                                           ftnlen)45);\n    e_wsle();\n    /*< \t  diff = e*sinh(orbel_flon) - orbel_flon - capn >*/\n    diff = *e * sinh(ret_val) - ret_val - *capn;\n    /*< \t  write(6,*) 'N, F, ecc*sinh(F) - F - N : ' >*/\n    s_wsle(&io___78);\n    do_lio(&c__9, &c__1, \"N, F, ecc*sinh(F) - F - N : \", (ftnlen)28);\n    e_wsle();\n    /*< \t  write(6,*) capn,orbel_flon,diff >*/\n    s_wsle(&io___79);\n    do_lio(&c__5, &c__1, (char *)&(*capn), (ftnlen)sizeof(doublereal));\n    do_lio(&c__5, &c__1, (char *)&ret_val, (ftnlen)sizeof(doublereal));\n    do_lio(&c__5, &c__1, (char *)&diff, (ftnlen)sizeof(doublereal));\n    e_wsle();\n    /*< \treturn >*/\n    return ret_val;\n    /*  Normal return here, but check if capn was originally negative */\n    /*< 100\tif(iflag .eq. 1) then >*/\nL100:\n    if (iflag == 1) {\n        /*< \t   orbel_flon = -orbel_flon >*/\n        ret_val = -ret_val;\n        /*< \t   capn = -capn >*/\n        *capn = -(*capn);\n        /*< \tendif >*/\n    }\n    /*< \treturn >*/\n    return ret_val;\n    /*< \tend     ! orbel_flon >*/\n} /* orbel_flon__ */\n\n/* ------------------------------------------------------------------ */\n/* ********************************************************************** */\n/* \t                  ORBEL_SCGET.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Given an angle, efficiently compute sin and cos. */\n\n/*        Input: */\n/*             angle ==> angle in radians (real scalar) */\n\n/*        Output: */\n/*             sx    ==>  sin(angle)  (real scalar) */\n/*             cx    ==>  cos(angle)  (real scalar) */\n\n/*     ALGORITHM: Obvious from the code */\n/*     REMARKS: The HP 700 series won't return correct answers for sin */\n/*       and cos if the angle is bigger than 3e7. We first reduce it */\n/*       to the range [0,2pi) and use the sqrt rather than cos (it's faster) */\n/*       BE SURE THE ANGLE IS IN RADIANS - NOT DEGREES! */\n/*     AUTHOR:  M. Duncan. */\n/*     DATE WRITTEN:  May 6, 1992. */\n/*     REVISIONS: */\n/* ********************************************************************** */\n/*< \tsubroutine orbel_scget(angle,sx,cx) >*/\n/* Subroutine */ int orbel_scget__(doublereal *angle, doublereal *sx, \n                                   doublereal *cx)\n{\n    /* Builtin functions */\n    double sin(doublereal), sqrt(doublereal);\n    \n    /* Local variables */\n    doublereal x;\n    integer nper;\n    \n    /*<         implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*<         real*8 angle >*/\n    /* ...  Output: */\n    /*< \treal*8 sx,cx >*/\n    /* ... Internals: */\n    /*< \tinteger nper >*/\n    /*< \treal*8 x >*/\n    /*< \treal*8 PI3BY2 >*/\n    /*< \tparameter(PI3BY2 = 1.5d0*PI) >*/\n    /* ---- */\n    /* ...  Executable code */\n    /*<         nper = angle/TWOPI >*/\n    nper = (integer) (*angle / 6.28318530717958);\n    /*< \tx = angle - nper*TWOPI >*/\n    x = *angle - nper * 6.28318530717958;\n    /*< \tif(x.lt.0.d0) then >*/\n    if (x < 0.) {\n        /*<            x = x + TWOPI >*/\n        x += 6.28318530717958;\n        /*<         endif >*/\n    }\n    /*< \tsx = sin(x) >*/\n    *sx = sin(x);\n    /*< \tcx= sqrt(1.d0 - sx*sx) >*/\n    *cx = sqrt(1. - *sx * *sx);\n    /*< \tif( (x .gt. PIBY2) .and. (x .lt.PI3BY2)) then >*/\n    if (x > 1.570796326794895 && x < 4.7123889803846852) {\n        /*<            cx = -cx >*/\n        *cx = -(*cx);\n        /*<         endif >*/\n    }\n    /*< \treturn >*/\n    return 0;\n    /*< \tend   ! orbel_scget >*/\n} /* orbel_scget__ */\n\n/* ------------------------------------------------------------------- */\n/* ********************************************************************** */\n/* \t                  ORBEL_SCHGET.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Given an angle, efficiently compute sinh and cosh. */\n\n/*        Input: */\n/*             angle ==> angle in radians (real scalar) */\n\n/*        Output: */\n/*             shx    ==>  sinh(angle)  (real scalar) */\n/*             chx    ==>  cosh(angle)  (real scalar) */\n\n/*     ALGORITHM: Obvious from the code */\n/*     REMARKS: Based on the routine SCGET for sine's and cosine's. */\n/*       We use the sqrt rather than cosh (it's faster) */\n/*       BE SURE THE ANGLE IS IN RADIANS AND IT CAN'T BE LARGER THAN 300 */\n/*       OR OVERFLOWS WILL OCCUR! */\n/*     AUTHOR:  M. Duncan. */\n/*     DATE WRITTEN:  May 6, 1992. */\n/*     REVISIONS: */\n/* ********************************************************************** */\n/*< \tsubroutine orbel_schget(angle,shx,chx) >*/\n/* Subroutine */ int orbel_schget__(doublereal *angle, doublereal *shx, \n                                    doublereal *chx)\n{\n    /* Builtin functions */\n    double sinh(doublereal), sqrt(doublereal);\n    \n    /*<         implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*<         real*8 angle >*/\n    /* ...  Output: */\n    /*< \treal*8 shx,chx >*/\n    /* ---- */\n    /* ...  Executable code */\n    /*< \tshx = sinh(angle) >*/\n    *shx = sinh(*angle);\n    /*< \tchx= sqrt(1.d0 + shx*shx) >*/\n    *chx = sqrt(*shx * *shx + 1.);\n    /*< \treturn >*/\n    return 0;\n    /*< \tend   ! orbel_schget >*/\n} /* orbel_schget__ */\n\n/* --------------------------------------------------------------------- */\n/* ********************************************************************** */\n/*                    ORBEL_ZGET.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Solves the equivalent of Kepler's eqn. for a parabola */\n/*          given Q (Fitz. notation.) */\n\n/*             Input: */\n/*                           q ==>  parabola mean anomaly. (real scalar) */\n/*             Returns: */\n/*                  orbel_zget ==>  eccentric anomaly. (real scalar) */\n\n/*     ALGORITHM: p. 70-72 of Fitzpatrick's book \"Princ. of Cel. Mech.\" */\n/*     REMARKS: For a parabola we can solve analytically. */\n/*     AUTHOR: M. Duncan */\n/*     DATE WRITTEN: May 11, 1992. */\n/*     REVISIONS: May 27 - corrected it for negative Q and use power */\n/* \t      series for small Q. */\n/* ********************************************************************** */\n/*< \treal*8 function orbel_zget(q) >*/\ndoublereal orbel_zget__(doublereal *q)\n{\n    /* System generated locals */\n    doublereal ret_val, d__1;\n    \n    /* Builtin functions */\n    double sqrt(doublereal), pow_dd(doublereal *, doublereal *);\n    \n    /* Local variables */\n    doublereal x, tmp;\n    integer iflag;\n    \n    /*<             implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*< \treal*8 q >*/\n    /* ...  Internals: */\n    /*< \tinteger iflag >*/\n    /*< \treal*8 x,tmp >*/\n    /* ---- */\n    /* ...  Executable code */\n    /*< \tiflag = 0 >*/\n    iflag = 0;\n    /*< \tif(q.lt.0.d0) then >*/\n    if (*q < 0.) {\n        /*< \t  iflag = 1 >*/\n        iflag = 1;\n        /*< \t  q = -q >*/\n        *q = -(*q);\n        /*< \tendif >*/\n    }\n    /*< \tif (q.lt.1.d-3) then >*/\n    if (*q < .001) {\n        /*< \t   orbel_zget = q*(1.d0 - (q*q/3.d0)*(1.d0 -q*q)) >*/\n        ret_val = *q * (1. - *q * *q / 3. * (1. - *q * *q));\n        /*< \telse >*/\n    } else {\n        /*< \t   x = 0.5d0*(3.d0*q + sqrt(9.d0*(q**2) +4.d0)) >*/\n        /* Computing 2nd power */\n        d__1 = *q;\n        x = (*q * 3. + sqrt(d__1 * d__1 * 9. + 4.)) * .5;\n        /*< \t   tmp = x**(1.d0/3.d0) >*/\n        tmp = pow_dd(&x, &c_b34);\n        /*< \t   orbel_zget = tmp - 1.d0/tmp >*/\n        ret_val = tmp - 1. / tmp;\n        /*< \tendif >*/\n    }\n    /*< \tif(iflag .eq.1) then >*/\n    if (iflag == 1) {\n        /*<            orbel_zget = -orbel_zget >*/\n        ret_val = -ret_val;\n        /*< \t   q = -q >*/\n        *q = -(*q);\n        /*< \tendif >*/\n    }\n    /*< \treturn >*/\n    return ret_val;\n    /*< \tend    ! orbel_zget >*/\n} /* orbel_zget__ */\n\n/* ---------------------------------------------------------------------- */\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/*      MCO_EL2X.FOR    (ErikSoft  7 July 1999) */\n\n/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */\n\n/* Author: John E. Chambers */\n\n/* Calculates Cartesian coordinates and velocities given Keplerian orbital */\n/* elements (for elliptical, parabolic or hyperbolic orbits). */\n\n/* Based on a routine from Levison and Duncan's SWIFT integrator. */\n\n/*  mu = grav const * (central + secondary mass) */\n/*  q = perihelion distance */\n/*  e = eccentricity */\n/*  i = inclination                 ) */\n/*  p = longitude of perihelion !!! )   in */\n/*  n = longitude of ascending node ) radians */\n/*  l = mean anomaly                ) */\n\n/*  x,y,z = Cartesian positions  ( units the same as a ) */\n/*  u,v,w =     \"     velocities ( units the same as sqrt(mu/a) ) */\n\n/* ------------------------------------------------------------------------------ */\n\n/*<       subroutine mco_el2x (mu,q,e,i,p,n,l,x,y,z,u,v,w) >*/\n/* Subroutine */ int mco_el2x__(doublereal mu, doublereal q, doublereal e, \n                                doublereal i__, doublereal p, doublereal n, doublereal l, \n                                doublereal *x, doublereal *y, doublereal *z__, doublereal *u, \n                                doublereal *v, doublereal *w) \n{\n    /* Builtin functions */\n    double sqrt(doublereal);\n    \n    /* Local variables */\n    extern /* Subroutine */ int mco_sinh__(doublereal *, doublereal *, doublereal *);\n                                                                     \n    doublereal a, g, z1, z2, z3, z4, d11, d12, ce, d13, cg, d21, ci, \n    d22, d23, cn, se, sg, si, sn;\n    extern doublereal orbel_zget__(doublereal *);\n    doublereal temp, romes;\n    extern doublereal orbel_fhybrid__(doublereal *, doublereal *);\n    \n    \n    /*<       implicit none >*/\n    /*<       integer NMAX, CMAX, NMESS >*/\n    /*<       real*8 HUGE >*/\n    /*<       parameter (NMAX = 2000) >*/\n    /*<       parameter (CMAX = 50) >*/\n    /*<       parameter (NMESS = 200) >*/\n    /*<       parameter (HUGE = 9.9d29) >*/\n    /* Constants: */\n    \n    /* DR = conversion factor from degrees to radians */\n    /* K2 = Gaussian gravitational constant squared */\n    /* AU = astronomical unit in cm */\n    /* MSUN = mass of the Sun in g */\n    \n    /*<       real*8 PI,TWOPI,PIBY2,DR,K2,AU,MSUN >*/\n    \n    /*<       parameter (PI = 3.141592653589793d0) >*/\n    /*<       parameter (TWOPI = PI * 2.d0) >*/\n    /*<       parameter (PIBY2 = PI * .5d0) >*/\n    /*<       parameter (DR = PI / 180.d0) >*/\n    /*<       parameter (K2 = 2.959122082855911d-4) >*/\n    /*<       parameter (AU = 1.4959787e13) >*/\n    /*<       parameter (MSUN = 1.9891e33) >*/\n    \n    /* Input/Output */\n    /*<       real*8 mu,q,e,i,p,n,l,x,y,z,u,v,w >*/\n    \n    /* Local */\n    /*<       real*8 g,a,ci,si,cn,sn,cg,sg,ce,se,romes,temp >*/\n    /*<       real*8 z1,z2,z3,z4,d11,d12,d13,d21,d22,d23 >*/\n    /*<       real*8 mco_kep, orbel_fhybrid, orbel_zget >*/\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /* Change from longitude of perihelion to argument of perihelion */\n    /*<       g = p - n >*/\n    g = p - n;\n    \n    /* Rotation factors */\n    /*<       call mco_sine (i,si,ci) >*/\n    mco_sine_noptr__(i__, si, ci);\n    /*<       call mco_sine (g,sg,cg) >*/\n    mco_sine_noptr__(g, sg, cg);\n    /*<       call mco_sine (n,sn,cn) >*/\n    mco_sine_noptr__(n, sn, cn);\n    /*<       z1 = cg * cn >*/\n    z1 = cg * cn;\n    /*<       z2 = cg * sn >*/\n    z2 = cg * sn;\n    /*<       z3 = sg * cn >*/\n    z3 = sg * cn;\n    /*<       z4 = sg * sn >*/\n    z4 = sg * sn;\n    /*<       d11 =  z1 - z4*ci >*/\n    d11 = z1 - z4 * ci;\n    /*<       d12 =  z2 + z3*ci >*/\n    d12 = z2 + z3 * ci;\n    /*<       d13 = sg * si >*/\n    d13 = sg * si;\n    /*<       d21 = -z3 - z2*ci >*/\n    d21 = -z3 - z2 * ci;\n    /*<       d22 = -z4 + z1*ci >*/\n    d22 = -z4 + z1 * ci;\n    /*<       d23 = cg * si >*/\n    d23 = cg * si;\n    \n    /* Semi-major axis */\n    /*<       a = q / (1.d0 - e) >*/\n    a = q / (1. - e);\n    \n    /* Ellipse */\n    /*<       if (e.lt.1.d0) then >*/\n    if (e < 1.) {\n        /*<         romes = sqrt(1.d0 - e*e) >*/\n        romes = sqrt(1. - e * e);\n        /*<         temp = mco_kep (e,l) >*/\n        temp = mco_kep__(e, l);\n        /*<         call mco_sine (temp,se,ce) >*/\n        mco_sine_noptr__(temp, se, ce);\n        /*<         z1 = a * (ce - e) >*/\n        z1 = a * (ce - e);\n        /*<         z2 = a * romes * se >*/\n        z2 = a * romes * se;\n        /*<         temp = sqrt(mu/a) / (1.d0 - e*ce) >*/\n        temp = sqrt(mu / a) / (1. - e * ce);\n        /*<         z3 = -se * temp >*/\n        z3 = -se * temp;\n        /*<         z4 = romes * ce * temp >*/\n        z4 = romes * ce * temp;\n        /*<       else >*/\n    } else {\n        /* Parabola */\n        /*<         if (e.eq.1.d0) then >*/\n        if (e == 1.) {\n            /*<           ce = orbel_zget(l) >*/\n            ce = orbel_zget__(&l);\n            /*<           z1 = q * (1.d0 - ce*ce) >*/\n            z1 = q * (1. - ce * ce);\n            /*<           z2 = 2.d0 * q * ce >*/\n            z2 = q * 2. * ce;\n            /*<           z4 = sqrt(2.d0*mu/q) / (1.d0 + ce*ce) >*/\n            z4 = sqrt(mu * 2. / q) / (ce * ce + 1.);\n            /*<           z3 = -ce * z4 >*/\n            z3 = -ce * z4;\n            /*<         else >*/\n        } else {\n            /* Hyperbola */\n            /*<           romes = sqrt(e*e - 1.d0) >*/\n            romes = sqrt(e * e - 1.);\n            /*<           temp = orbel_fhybrid(e,l) >*/\n            temp = orbel_fhybrid__(&e, &l);\n            /*<           call mco_sinh (temp,se,ce) >*/\n            mco_sinh__(&temp, &se, &ce);\n            /*<           z1 = a * (ce - e) >*/\n            z1 = a * (ce - e);\n            /*<           z2 = -a * romes * se >*/\n            z2 = -a * romes * se;\n            /*<           temp = sqrt(mu/abs(a)) / (e*ce - 1.d0) >*/\n            temp = sqrt(mu / abs(a)) / (e * ce - 1.);\n            /*<           z3 = -se * temp >*/\n            z3 = -se * temp;\n            /*<           z4 = romes * ce * temp >*/\n            z4 = romes * ce * temp;\n            /*<         end if >*/\n        }\n        /*<       endif >*/\n    }\n    \n    /*<       x = d11*z1 + d21*z2 >*/\n    *x = d11 * z1 + d21 * z2;\n    /*<       y = d12*z1 + d22*z2 >*/\n    *y = d12 * z1 + d22 * z2;\n    /*<       z = d13*z1 + d23*z2 >*/\n    *z__ = d13 * z1 + d23 * z2;\n    /*<       u = d11*z3 + d21*z4 >*/\n    *u = d11 * z3 + d21 * z4;\n    /*<       v = d12*z3 + d22*z4 >*/\n    *v = d12 * z3 + d22 * z4;\n    /*<       w = d13*z3 + d23*z4 >*/\n    *w = d13 * z3 + d23 * z4;\n    \n    /* ------------------------------------------------------------------------------ */\n    \n    /*<       return >*/\n    return 0;\n    /*<       end >*/\n} \n                 \n                 /* mco_el2x__ */\n\n/* ********************************************************************** */\n/*                    ORBEL_FHYBRID.F */\n/* ********************************************************************** */\n/*     PURPOSE:  Solves Kepler's eqn. for hyperbola using hybrid approach. */\n\n/*             Input: */\n/*                           e ==> eccentricity anomaly. (real scalar) */\n/*                           n ==> hyperbola mean anomaly. (real scalar) */\n/*             Returns: */\n/*               orbel_fhybrid ==>  eccentric anomaly. (real scalar) */\n\n/*     ALGORITHM: For abs(N) < 0.636*ecc -0.6 , use FLON */\n/* \t         For larger N, uses FGET */\n/*     REMARKS: */\n/*     AUTHOR: M. Duncan */\n/*     DATE WRITTEN: May 26,1992. */\n/*     REVISIONS: */\n/*     REVISIONS: 2/26/93 hfl */\n/* ********************************************************************** */\n/*< \treal*8 function orbel_fhybrid(e,n) >*/\ndoublereal orbel_fhybrid__(doublereal *e, doublereal *n)\n{\n    /* System generated locals */\n    doublereal ret_val;\n    \n    /* Local variables */\n    extern doublereal orbel_fget__(doublereal *, doublereal *), orbel_flon__(\n                                                                             doublereal *, doublereal *);\n    doublereal abn;\n    \n    /*<         implicit NONE     >*/\n    /* ...   Version of Swift */\n    /*<        real*8 VER_NUM >*/\n    /*<        parameter(VER_NUM=2.0d0) >*/\n    /* ...   Maximum array size */\n    /*<        integer  NPLMAX, NTPMAX >*/\n    /*       parameter  (NPLMAX = 21)   ! max number of planets, including the Sun */\n    /*<        parameter  (NPLMAX = 51)   ! max number of planets, including the >*/\n    /*<        parameter  (NTPMAX = 1001) ! max number of test particles >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATP            ! Number of status parameters >*/\n    /*<         parameter  (NSTATP = 3) >*/\n    /*<         integer NSTAT            ! Number of status parameters >*/\n    /*<         parameter  (NSTAT = NSTATP + NPLMAX - 1)  ! include one for @ pl >*/\n    /* ...   Size of the test particle integer status flag */\n    /*<         integer NSTATR >*/\n    /*<         parameter  (NSTATR = NSTAT)  ! io_init_tp assumes NSTAT==NSTATR >*/\n    /* ...   convergence criteria for danby */\n    /*<         real*8 DANBYAC , DANBYB >*/\n    /*<         parameter (DANBYAC= 1.0d-14, DANBYB = 1.0d-13) >*/\n    /* ...    loop limits in the Laguerre attempts */\n    /*<         integer NLAG1, NLAG2 >*/\n    /*<         parameter(NLAG1 = 50, NLAG2 = 400) >*/\n    /* ...    A small number */\n    /*<         real*8 TINY >*/\n    /*<         PARAMETER(TINY=4.D-15) >*/\n    /* ...    trig stuff */\n    /*<         real*8 PI,TWOPI,PIBY2,DEGRAD >*/\n    /*<         parameter (PI = 3.14159265358979D0) >*/\n    /*<         parameter (TWOPI = 2.0D0 * PI) >*/\n    /*<         parameter (PIBY2 = PI/2.0D0) >*/\n    /*<         parameter (DEGRAD = 180.0D0 / PI) >*/\n    /* ...  Inputs Only: */\n    /*< \treal*8 e,n >*/\n    /* ...  Internals: */\n    /*< \treal*8 abn >*/\n    /*<         real*8 orbel_flon,orbel_fget >*/\n    /* ---- */\n    /* ...  Executable code */\n    /*< \tabn = n >*/\n    abn = *n;\n    /*< \tif(n.lt.0.d0) abn = -abn >*/\n    if (*n < 0.) {\n        abn = -abn;\n    }\n    /*< \tif(abn .lt. 0.636d0*e -0.6d0) then >*/\n    if (abn < *e * .636 - .6) {\n        /*< \t  orbel_fhybrid = orbel_flon(e,n) >*/\n        ret_val = orbel_flon__(e, n);\n        /*< \telse  >*/\n    } else {\n        /*< \t  orbel_fhybrid = orbel_fget(e,n) >*/\n        ret_val = orbel_fget__(e, n);\n        /*< \tendif    >*/\n    }\n    /*< \treturn >*/\n    return ret_val;\n    /*< \tend  ! orbel_fhybrid >*/\n} /* orbel_fhybrid__ */\n\n","/* ode.f -- translated by f2c (version 20100827).\n   You must link the resulting object file with libf2c:\n\ton Microsoft Windows system, link with libf2c.lib;\n\ton Linux or Unix systems, link with .../path/to/libf2c.a -lm\n\tor, if you install libf2c.a in a standard place, with -lf2c -lm\n\t-- in that order, at the end of the command line, as in\n\t\tcc *.o -lf2c -lm\n\tSource for libf2c is in /netlib/f2c/libf2c.zip, e.g.,\n\n\t\thttp://www.netlib.org/f2c/libf2c.zip\n*/\n#include \"utils.h\"\n\n#include \"systemic.h\"\n#include \"integration.h\"\n#include \"ode.h\"\n#include \"assert.h\"\n#include \"f2c.h\"\n/* Table of constant values */\n\nstatic int c__1 = 1;\nstatic doublereal c_b11 = 1.;\n#define oneu .222e-15\n\n\nstatic inline double ok_d_sign(const double a, const double b) {\n    double x = (a >= 0 ? a : -a);\n    return (b >= 0 ? x : -x);\n}\n\nstatic inline int ok_i_sign(const int a, const int b) {\n    int x = (a >= 0 ? a : -a);\n    return (b >= 0 ? x : -x);\n}\n\ntypedef int (*ok_force_function) (const double t, const double y[], double dydt[],  void * params);\n\n/* Subroutine */ int ok_ode_ode_(ok_force_function f, const int neqn, doublereal *y, doublereal *t,\n\t doublereal *tout, doublereal *relerr, doublereal *abserr, int *\n\tiflag, doublereal *work, int *iwork, void* params)\n{\n    /* Initialized data */\n\n     int ialpha = 1;\n     int ih = 89;\n     int ihold = 90;\n     int istart = 91;\n     int itold = 92;\n     int idelsn = 93;\n     int ibeta = 13;\n     int isig = 25;\n     int iv = 38;\n     int iw = 50;\n     int ig = 62;\n     int iphase = 75;\n     int ipsi = 76;\n     int ix = 88;\n     \n     doublereal g[13] = { 1. };\n     doublereal rho[13] = { 1. };\n\n\n    extern /* Subroutine */ int ok_ode_de_(ok_force_function, const int, doublereal *, doublereal \n\t    *, doublereal *, doublereal *, doublereal *, int *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, logical *,\n\t     doublereal *, doublereal *, doublereal *, doublereal *, logical *\n\t    , doublereal *, doublereal *, int *, logical *, int *, \n\t    int *, int *, void *, doublereal*, doublereal*);\n     int ip, iyp, iwt, iyy, iphi;\n     logical nornd, start, phase1;\n     int iypout;\n\n\n/*   double precision subroutine ode integrates a system of neqn */\n/*   first order ordinary differential equations of the form: */\n/*             dy(i)/dt = f(t,y(1),y(2),...,y(neqn)) */\n/*             y(i) given at  t . */\n/*   the subroutine integrates from  t  to  tout .  on return the */\n/*   parameters in the call list are set for continuing the integration. */\n/*   the user has only to define a new value  tout  and call  ode  again. */\n\n/*   the differential equations are actually solved by a suite of codes */\n/*   de ,  step , and  intrp .  ode  allocates virtual storage in the */\n/*   arrays  work  and  iwork  and calls  de .  de  is a supervisor which */\n/*   directs the solution.  it calls on the routines  step  and  intrp */\n/*   to advance the integration and to interpolate at output points. */\n/*   step  uses a modified divided difference form of the adams pece */\n/*   formulas and local extrapolation.  it adjusts the order and step */\n/*   size to control the local error per unit step in a generalized */\n/*   sense.  normally each call to  step  advances the solution one step */\n/*   in the direction of  tout .  for reasons of efficiency  de */\n/*   integrates beyond  tout  internally, though never beyond */\n/*   t+10*(tout-t), and calls  intrp  to interpolate the solution at */\n/*   tout .  an option is provided to stop the integration at  tout  but */\n/*   it should be used only if it is impossible to continue the */\n/*   integration beyond  tout . */\n\n/*   this code is completely explained and documented in the text, */\n/*   computer solution of ordinary differential equations:  the initial */\n/*   value problem  by l. f. shampine and m. k. gordon. */\n\n/*   the parameters represent: */\n/*      f -- double precision subroutine f(t,y,yp) to evaluate */\n/*                derivatives yp(i)=dy(i)/dt */\n/*      neqn -- number of equations to be integrated (int*4) */\n/*      y(*) -- solution vector at t                 (real*8) */\n/*      t -- independent variable                    (real*8) */\n/*      tout -- point at which solution is desired   (real*8) */\n/*      relerr,abserr -- relative and absolute error tolerances for local */\n/*           error test (real*8).  at each step the code requires */\n/*             dabs(local error) .le. dabs(y)*relerr + abserr */\n/*           for each component of the local error and solution vectors */\n/*      iflag -- indicates status of integration     (int*4) */\n/*      work(*)  (real*8)  -- arrays to hold information internal to */\n/*      iwork(*) (int*4)    which is necessary for subsequent calls */\n\n/*   first call to ode -- */\n\n/*   the user must provide storage in his calling program for the arrays */\n/*   in the call list, */\n/*      y(neqn), work(100+21*neqn), iwork(5), */\n/*   declare  f  in an external statement, supply the double precision */\n/*   subroutine f(t,y,yp)  to evaluate */\n/*      dy(i)/dt = yp(i) = f(t,y(1),y(2),...,y(neqn)) */\n/*   and initialize the parameters: */\n/*      neqn -- number of equations to be integrated */\n/*      y(*) -- vector of initial conditions */\n/*      t -- starting point of integration */\n/*      tout -- point at which solution is desired */\n/*      relerr,abserr -- relative and absolute local error tolerances */\n/*      iflag -- +1,-1.  indicator to initialize the code.  normal input */\n/*           is +1.  the user should set iflag=-1 only if it is */\n/*           impossible to continue the integration beyond  tout . */\n/*   all parameters except  f ,  neqn  and  tout  may be altered by the */\n/*   code on output so must be variables in the calling program. */\n\n/*   output from  ode  -- */\n\n/*      neqn -- unchanged */\n/*      y(*) -- solution at  t */\n/*      t -- last point reached in integration.  normal return has */\n/*           t = tout . */\n/*      tout -- unchanged */\n/*      relerr,abserr -- normal return has tolerances unchanged.  iflag=3 */\n/*           signals tolerances increased */\n/*      iflag = 2 -- normal return.  integration reached  tout */\n/*            = 3 -- integration did not reach  tout  because error */\n/*                   tolerances too small.  relerr ,  abserr  increased */\n/*                   appropriately for continuing */\n/*            = 4 -- integration did not reach  tout  because more than */\n/*                   500 steps needed */\n/*            = 5 -- integration did not reach  tout  because equations */\n/*                   appear to be stiff */\n/*            = 6 -- invalid input parameters (fatal error) */\n/*           the value of  iflag  is returned negative when the input */\n/*           value is negative and the integration does not reach  tout , */\n/*           i.e., -3, -4, -5. */\n/*      work(*),iwork(*) -- information generally of no interest to the */\n/*           user but necessary for subsequent calls. */\n\n/*   subsequent calls to  ode -- */\n\n/*   subroutine  ode  returns with all information needed to continue */\n/*   the integration.  if the integration reached  tout , the user need */\n/*   only define a new  tout  and call again.  if the integration did not */\n/*   reach  tout  and the user wants to continue, he just calls again. */\n/*   the output value of  iflag  is the appropriate input value for */\n/*   subsequent calls.  the only situation in which it should be altered */\n/*   is to stop the integration internally at the new  tout , i.e., */\n/*   change output  iflag=2  to input  iflag=-2 .  error tolerances may */\n/*   be changed by the user before continuing.  all other parameters must */\n/*   remain unchanged. */\n\n/* *********************************************************************** */\n/* *  subroutines  de  and  step  contain machine dependent constants. * */\n/* *  be sure they are set before using  ode .                          * */\n/* *********************************************************************** */\n\n    /* Parameter adjustments */\n    //--y;\n    //--work;\n    //--iwork;\n\n    /* Function Body */\n    iyy = 100;\n    iwt = iyy + neqn;\n    ip = iwt + neqn;\n    iyp = ip + neqn;\n    iypout = iyp + neqn;\n    iphi = iypout + neqn;\n    if (abs(*iflag) == 1) {\n\tgoto L1;\n    }\n    start = work[istart] > 0.;\n    phase1 = work[iphase] > 0.;\n    nornd = iwork[2] != -1;\nL1:\n    ok_ode_de_((ok_force_function)f, neqn, y, t, tout, relerr, abserr, iflag, &work[iyy], &\n\t    work[iwt], &work[ip], &work[iyp], &work[iypout], &work[iphi], &\n\t    work[ialpha], &work[ibeta], &work[isig], &work[iv], &work[iw], &\n\t    work[ig], &phase1, &work[ipsi], &work[ix], &work[ih], &work[ihold]\n\t    , &start, &work[itold], &work[idelsn], &iwork[1], &nornd, &iwork[\n\t    3], &iwork[4], &iwork[5], params, g, rho);\n    work[istart] = -1.;\n    if (start) {\n\twork[istart] = 1.;\n    }\n    work[iphase] = -1.;\n    if (phase1) {\n\twork[iphase] = 1.;\n    }\n    iwork[2] = -1;\n    if (nornd) {\n\tiwork[2] = 1;\n    }\n    return 0;\n} /* ode_ */\n\n/* Subroutine */ int ok_ode_de_(ok_force_function f, int neqn, doublereal *y, doublereal *t, \n\tdoublereal *tout, doublereal *relerr, doublereal *abserr, int *\n\tiflag, doublereal *yy, doublereal *wt, doublereal *p, doublereal *yp, \n\tdoublereal *ypout, doublereal *phi, doublereal *alpha, doublereal *\n\tbeta, doublereal *sig, doublereal *v, doublereal *w, doublereal *g, \n\tlogical *phase1, doublereal *psi, doublereal *x, doublereal *h__, \n\tdoublereal *hold, logical *start, doublereal *told, doublereal *\n\tdelsgn, int *ns, logical *nornd, int *k, int *kold, \n\tint *isnold, void* params, doublereal* ginterp, doublereal* rhointerp)\n{\n    /* Initialized data */\n\n    static int maxnum = 10000;\n\n    /* System generated locals */\n    int phi_dim1, phi_offset, i__1;\n    doublereal d__1, d__2, d__3, d__4, d__5;\n\n   \n    \n    /* Local variables */\n     int l;\n     doublereal del, eps;\n     int isn, kle4;\n     doublereal tend;\n    extern /* Subroutine */ int ok_ode_step_(doublereal *, doublereal *, ok_force_function, \n\t    const int, doublereal *, doublereal *, doublereal *, logical *, \n\t    doublereal *, int *, int *, logical *, doublereal *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, \n\t    doublereal *, logical *, int *, logical *, void*);\n     logical crash, stiff;\n    extern /* Subroutine */ int ok_ode_intrp_(doublereal *, doublereal *, doublereal \n\t    *, doublereal *, doublereal *, const int, int *, doublereal *,\n\t     doublereal *, doublereal*, doublereal*);\n    \n     doublereal fouru, absdel, abseps, releps;\n     int nostep;\n\n\n/*   ode  merely allocates storage for  de  to relieve the user of the */\n/*   inconvenience of a long call list.  consequently  de  is used as */\n/*   described in the comments for  ode . */\n\n/*   this code is completely explained and documented in the text, */\n/*   computer solution of ordinary differential equations:  the initial */\n/*   value problem  by l. f. shampine and m. k. gordon. */\n\n\n/* *********************************************************************** */\n/* *  the only machine dependent constant is based on the machine unit   * */\n/* *  roundoff error  u  which is the smallest positive number such that * */\n/* *  1.0+u .gt. 1.0 .  u  must be calculated and  fouru=4.0*u  inserted * */\n/* *  in the following data statement before using  de .  the routine    * */\n/* *  machin  calculates  u .  fouru  and  twou=2.0*u  must also be      * */\n/* *  inserted in subroutine  step  before calling  de .                 * */\n/*     data fouru/.888d-15/                                              *** */\n/* *********************************************************************** */\n\n/*   the constant  maxnum  is the maximum number of steps allowed in one */\n/*   call to  de .  the user may change this limit by altering the */\n/*   following statement */\n    /* Parameter adjustments */\n    phi_dim1 = neqn;\n    phi_offset = 1 + phi_dim1;\n    phi -= phi_offset;\n    \n    --ypout;\n    --yp;\n    --p;\n    --wt;\n    --yy;\n    --y;\n    --alpha;\n    --beta;\n    --sig;\n    --v;\n    --w;\n    --g;\n    --psi;\n\n    /* Function Body */\n\n/*            ***            ***            *** */\n/*   test for improper parameters */\n\n    fouru = 4.f * oneu;\n    if (neqn < 1) {\n\tgoto L10;\n    }\n    if (*t == *tout) {\n\tgoto L10;\n    }\n    if (*relerr < 0. || *abserr < 0.) {\n\tgoto L10;\n    }\n    eps = max(*relerr,*abserr);\n    if (eps <= 0.) {\n\tgoto L10;\n    }\n    if (*iflag == 0) {\n\tgoto L10;\n    }\n    isn = ok_i_sign(c__1, *iflag);\n    *iflag = abs(*iflag);\n    if (*iflag == 1) {\n\tgoto L20;\n    }\n    if (*t != *told) {\n\tgoto L10;\n    }\n    if (*iflag >= 2 && *iflag <= 5) {\n\tgoto L20;\n    }\nL10:\n    *iflag = 6;\n    return 0;\n\n/*   on each call set interval of integration and counter for number of */\n/*   steps.  adjust input error tolerances to define weight vector for */\n/*   subroutine  step */\n\nL20:\n    del = *tout - *t;\n    absdel = abs(del);\n    tend = *t + del * 10.;\n    if (isn < 0) {\n\ttend = *tout;\n    }\n    nostep = 0;\n    kle4 = 0;\n    stiff = FALSE_;\n    releps = *relerr / eps;\n    abseps = *abserr / eps;\n    if (*iflag == 1) {\n\tgoto L30;\n    }\n    if (*isnold < 0) {\n\tgoto L30;\n    }\n    if (*delsgn * del > 0.) {\n\tgoto L50;\n    }\n\n/*   on start and restart also set work variables x and yy(*), store the */\n/*   direction of integration and initialize the step size */\n\nL30:\n    *start = TRUE_;\n    *x = *t;\n    i__1 = neqn;\n    int dd = 0;\n    \n    \n    for (l = 1; l <= i__1; ++l) {\n/* L40: */\n\tyy[l] = y[l];\n        dd++;\n    }\n    *delsgn = ok_d_sign(c_b11, del);\n/* Computing MAX */\n    d__3 = (d__1 = *tout - *x, abs(d__1)), d__4 = fouru * abs(*x);\n    d__2 = max(d__3,d__4);\n    d__5 = *tout - *x;\n    *h__ = ok_d_sign(d__2, d__5);\n\n/*   if already past output point, interpolate and return */\n\nL50:\n    if ((d__1 = *x - *t, abs(d__1)) < absdel) {\n\tgoto L60;\n    }\n    ok_ode_intrp_(x, &yy[1], tout, &y[1], &ypout[1], neqn, kold, &phi[phi_offset], &\n\t    psi[1], ginterp, rhointerp);\n    *iflag = 2;\n    *t = *tout;\n    *told = *t;\n    *isnold = isn;\n    return 0;\n\n/*   if cannot go past output point and sufficiently close, */\n/*   extrapolate and return */\n\nL60:\n    if (isn > 0 || (d__1 = *tout - *x, abs(d__1)) >= fouru * abs(*x)) {\n\tgoto L80;\n    }\n    *h__ = *tout - *x;\n    ok_force(*x, &yy[1], &yp[1], params);\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L70: */\n\ty[l] = yy[l] + *h__ * yp[l];\n    }\n    *iflag = 2;\n    *t = *tout;\n    *told = *t;\n    *isnold = isn;\n    return 0;\n\n/*   test for too many steps */\n\nL80:\n    if (nostep < maxnum) {\n\tgoto L100;\n    }\n    *iflag = isn << 2;\n    if (stiff) {\n\t*iflag = isn * 5;\n    }\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L90: */\n\ty[l] = yy[l];\n    }\n    *t = *x;\n    *told = *t;\n    *isnold = 1;\n    return 0;\n\n/*   limit step size, set weight vector and take a step */\n\nL100:\n/* Computing MIN */\n    d__3 = abs(*h__), d__4 = (d__1 = tend - *x, abs(d__1));\n    d__2 = min(d__3,d__4);\n    *h__ = ok_d_sign(d__2, *h__);\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L110: */\n\twt[l] = releps * (d__1 = yy[l], abs(d__1)) + abseps;\n    }\n    ok_ode_step_(x, &yy[1], (ok_force_function)f, neqn, h__, &eps, &wt[1], start, hold, k, kold, &\n\t    crash, &phi[phi_offset], &p[1], &yp[1], &psi[1], &alpha[1], &beta[\n\t    1], &sig[1], &v[1], &w[1], &g[1], phase1, ns, nornd, params);\n\n/*   test for tolerances too small */\n\n    if (! crash) {\n\tgoto L130;\n    }\n    *iflag = isn * 3;\n    *relerr = eps * releps;\n    *abserr = eps * abseps;\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L120: */\n\ty[l] = yy[l];\n    }\n    *t = *x;\n    *told = *t;\n    *isnold = 1;\n    return 0;\n\n/*   augment counter on number of steps and test for stiffness */\n\nL130:\n    ++nostep;\n    ++kle4;\n    if (*kold > 4) {\n\tkle4 = 0;\n    }\n    if (kle4 >= 50) {\n\tstiff = TRUE_;\n    }\n    goto L50;\n} /* de_ */\n\n/* Subroutine */ int ok_ode_step_(doublereal *x, doublereal *y, ok_force_function f, const int\n\tneqn, doublereal *h__, doublereal *eps, doublereal *wt, logical *\n\tstart, doublereal *hold, int *k, int *kold, logical *crash, \n\tdoublereal *phi, doublereal *p, doublereal *yp, doublereal *psi, \n\tdoublereal *alpha, doublereal *beta, doublereal *sig, doublereal *v, \n\tdoublereal *w, doublereal *g, logical *phase1, int *ns, logical *\n\tnornd, void* params)\n{\n    /* Initialized data */\n\n    static doublereal two[13] = { 2.,4.,8.,16.,32.,64.,128.,256.,512.,1024.,\n\t    2048.,4096.,8192. };\n    static doublereal gstr[13] = { .5,.0833,.0417,.0264,.0188,.0143,.0114,\n\t    .00936,.00789,.00679,.00592,.00524,.00468 };\n\n    /* System generated locals */\n    int phi_dim1, phi_offset, i__1, i__2;\n    doublereal d__1, d__2, d__3;\n\n    /* Builtin functions */\n    double sqrt(doublereal);\n    \n    /* Local variables */\n     int i__, j, l;\n     doublereal r__;\n     int iq, im1, km1, km2, ip1, kp1, kp2;\n     doublereal erk, err, tau, rho, sum;\n     int nsm2, nsp1, nsp2;\n     doublereal absh, hnew;\n     int knew;\n     doublereal xold, twou, erkm1, erkm2, erkp1, temp1, temp2, temp3, \n\t    temp4, temp5, temp6, p5eps;\n     int ifail;\n     doublereal reali, round;\n    \n     doublereal fouru;\n     int limit1, limit2;\n     doublereal realns;\n\n/*    1  hold,k,kold,crash,phi,p,yp,psi) */\n\n/*   double precision subroutine  step */\n/*   integrates a system of first order ordinary */\n/*   differential equations one step, normally from x to x+h, using a */\n/*   modified divided difference form of the adams pece formulas.  local */\n/*   extrapolation is used to improve absolute stability and accuracy. */\n/*   the code adjusts its order and step size to control the local error */\n/*   per unit step in a generalized sense.  special devices are included */\n/*   to control roundoff error and to detect when the user is requesting */\n/*   too much accuracy. */\n\n/*   this code is completely explained and documented in the text, */\n/*   computer solution of ordinary differential equations:  the initial */\n/*   value problem  by l. f. shampine and m. k. gordon. */\n\n\n/*   the parameters represent: */\n/*      x -- independent variable             (real*8) */\n/*      y(*) -- solution vector at x          (real*8) */\n/*      yp(*) -- derivative of solution vector at  x  after successful */\n/*           step                             (real*8) */\n/*      neqn -- number of equations to be integrated (int*4) */\n/*      h -- appropriate step size for next step.  normally determined by */\n/*           code                             (real*8) */\n/*      eps -- local error tolerance.  must be variable  (real*8) */\n/*      wt(*) -- vector of weights for error criterion   (real*8) */\n/*      start -- logical variable set .true. for first step,  .false. */\n/*           otherwise                        (logical*4) */\n/*      hold -- step size used for last successful step  (real*8) */\n/*      k -- appropriate order for next step (determined by code) */\n/*      kold -- order used for last successful step */\n/*      crash -- logical variable set .true. when no step can be taken, */\n/*           .false. otherwise. */\n/*   the arrays  phi, psi  are required for the interpolation subroutine */\n/*   intrp.  the array p is internal to the code.  all are real*8 */\n\n/*   input to  step */\n\n/*      first call -- */\n\n/*   the user must provide storage in his driver program for all arrays */\n/*   in the call list, namely */\n\n/*     dimension y(neqn),wt(neqn),phi(neqn,16),p(neqn),yp(neqn),psi(12) */\n\n/*   the user must also declare  start  and  crash  logical variables */\n/*   and  f  an external subroutine, supply the subroutine  f(x,y,yp) */\n/*   to evaluate */\n/*      dy(i)/dx = yp(i) = f(x,y(1),y(2),...,y(neqn)) */\n/*   and initialize only the following parameters: */\n/*      x -- initial value of the independent variable */\n/*      y(*) -- vector of initial values of dependent variables */\n/*      neqn -- number of equations to be integrated */\n/*      h -- nominal step size indicating direction of integration */\n/*           and maximum size of step.  must be variable */\n/*      eps -- local error tolerance per step.  must be variable */\n/*      wt(*) -- vector of non-zero weights for error criterion */\n/*      start -- .true. */\n\n/*   step  requires the l2 norm of the vector with components */\n/*   local error(l)/wt(l)  be less than  eps  for a successful step.  the */\n/*   array  wt  allows the user to specify an error test appropriate */\n/*   for his problem.  for example, */\n/*      wt(l) = 1.0  specifies absolute error, */\n/*            = dabs(y(l))  error relative to the most recent value of */\n/*                 the l-th component of the solution, */\n/*            = dabs(yp(l))  error relative to the most recent value of */\n/*                 the l-th component of the derivative, */\n/*            = dmax1(wt(l),dabs(y(l)))  error relative to the largest */\n/*                 magnitude of l-th component obtained so far, */\n/*            = dabs(y(l))*relerr/eps + abserr/eps  specifies a mixed */\n/*                 relative-absolute test where  relerr  is relative */\n/*                 error,  abserr  is absolute error and  eps = */\n/*                 dmax1(relerr,abserr) . */\n\n/*      subsequent calls -- */\n\n/*   subroutine  step  is designed so that all information needed to */\n/*   continue the integration, including the step size  h  and the order */\n/*   k , is returned with each step.  with the exception of the step */\n/*   size, the error tolerance, and the weights, none of the parameters */\n/*   should be altered.  the array  wt  must be updated after each step */\n/*   to maintain relative error tests like those above.  normally the */\n/*   integration is continued just beyond the desired endpoint and the */\n/*   solution interpolated there with subroutine  intrp .  if it is */\n/*   impossible to integrate beyond the endpoint, the step size may be */\n/*   reduced to hit the endpoint since the code will not take a step */\n/*   larger than the  h  input.  changing the direction of integration, */\n/*   i.e., the sign of  h , requires the user set  start = .true. before */\n/*   calling  step  again.  this is the only situation in which  start */\n/*   should be altered. */\n\n/*   output from  step */\n\n/*      successful step -- */\n\n/*   the subroutine returns after each successful step with  start  and */\n/*   crash  set .false. .  x  represents the independent variable */\n/*   advanced one step of length  hold  from its value on input and  y */\n/*   the solution vector at the new value of  x .  all other parameters */\n/*   represent information corresponding to the new  x  needed to */\n/*   continue the integration. */\n\n/*      unsuccessful step -- */\n\n/*   when the error tolerance is too small for the machine precision, */\n/*   the subroutine returns without taking a step and  crash = .true. . */\n/*   an appropriate step size and error tolerance for continuing are */\n/*   estimated and all other information is restored as upon input */\n/*   before returning.  to continue with the larger tolerance, the user */\n/*   just calls the code again.  a restart is neither required nor */\n/*   desirable. */\n\n/* *********************************************************************** */\n/* *  the only machine dependent constants are based on the machine unit * */\n/* *  roundoff error  u  which is the smallest positive number such that * */\n/* *  1.0+u .gt. 1.0  .  the user must calculate  u  and insert          * */\n/* *  twou=2.0*u  and  fouru=4.0*u  in the data statement before calling * */\n/* *  the code.  the routine  machin  calculates  u .                    * */\n/*     data twou,fouru/.444d-15,.888d-15/                                *** */\n/* *********************************************************************** */\n    /* Parameter adjustments */\n    --yp;\n    --p;\n    phi_dim1 = neqn;\n    phi_offset = 1 + phi_dim1;\n    phi -= phi_offset;\n    --wt;\n    --y;\n    --psi;\n    --alpha;\n    --beta;\n    --sig;\n    --v;\n    --w;\n    --g;\n\n    /* Function Body */\n/*     data g(1),g(2)/1.0,0.5/,sig(1)/1.0/ */\n\n\n    twou = 2.f * oneu;\n    fouru = twou * 2.f;\n/*       ***     begin block 0     *** */\n/*   check if step size or error tolerance is too small for machine */\n/*   precision.  if first step, initialize phi array and estimate a */\n/*   starting step size. */\n/*                   *** */\n\n/*   if step size is too small, determine an acceptable one */\n\n    *crash = TRUE_;\n    if (abs(*h__) >= fouru * abs(*x)) {\n\tgoto L5;\n    }\n    d__1 = fouru * abs(*x);\n    *h__ = ok_d_sign(d__1, *h__);\n    return 0;\nL5:\n    p5eps = *eps * .5;\n\n/*   if error tolerance is too small, increase it to an acceptable value */\n\n    round = 0.;\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L10: */\n/* Computing 2nd power */\n\td__1 = y[l] / wt[l];\n\tround += d__1 * d__1;\n    }\n    round = twou * sqrt(round);\n    if (p5eps >= round) {\n\tgoto L15;\n    }\n    *eps = round * 2.f * (fouru + 1.);\n    return 0;\nL15:\n    *crash = FALSE_;\n    g[1] = 1.;\n    g[2] = .5;\n    sig[1] = 1.;\n    if (! (*start)) {\n\tgoto L99;\n    }\n\n/*   initialize.  compute appropriate step size for first step */\n\n    ok_force(*x, &y[1], &yp[1], params);\n    sum = 0.;\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\tphi[l + phi_dim1] = yp[l];\n\tphi[l + (phi_dim1 << 1)] = 0.;\n/* L20: */\n/* Computing 2nd power */\n\td__1 = yp[l] / wt[l];\n\tsum += d__1 * d__1;\n    }\n    sum = sqrt(sum);\n    absh = abs(*h__);\n    if (*eps < sum * 16. * *h__ * *h__) {\n\tabsh = sqrt(*eps / sum) * .25;\n    }\n/* Computing MAX */\n    d__2 = absh, d__3 = fouru * abs(*x);\n    d__1 = max(d__2,d__3);\n    *h__ = ok_d_sign(d__1, *h__);\n    *hold = 0.;\n    *k = 1;\n    *kold = 0;\n    *start = FALSE_;\n    *phase1 = TRUE_;\n    *nornd = TRUE_;\n    if (p5eps > round * 100.) {\n\tgoto L99;\n    }\n    *nornd = FALSE_;\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L25: */\n\tphi[l + phi_dim1 * 15] = 0.;\n    }\nL99:\n    ifail = 0;\n/*       ***     end block 0     *** */\n\n/*       ***     begin block 1     *** */\n/*   compute coefficients of formulas for this step.  avoid computing */\n/*   those quantities not changed when step size is not changed. */\n/*                   *** */\n\nL100:\n    kp1 = *k + 1;\n    kp2 = *k + 2;\n    km1 = *k - 1;\n    km2 = *k - 2;\n\n/*   ns is the number of steps taken with size h, including the current */\n/*   one.  when k.lt.ns, no coefficients change */\n\n    if (*h__ != *hold) {\n\t*ns = 0;\n    }\n    if (*ns <= *kold) {\n\t++(*ns);\n    }\n    nsp1 = *ns + 1;\n    if (*k < *ns) {\n\tgoto L199;\n    }\n\n/*   compute those components of alpha(*),beta(*),psi(*),sig(*) which */\n/*   are changed */\n\n    beta[*ns] = 1.;\n    realns = (doublereal) (*ns);\n    alpha[*ns] = 1. / realns;\n    temp1 = *h__ * realns;\n    sig[nsp1] = 1.;\n    if (*k < nsp1) {\n\tgoto L110;\n    }\n    i__1 = *k;\n    for (i__ = nsp1; i__ <= i__1; ++i__) {\n\tim1 = i__ - 1;\n\ttemp2 = psi[im1];\n\tpsi[im1] = temp1;\n\tbeta[i__] = beta[im1] * psi[im1] / temp2;\n\ttemp1 = temp2 + *h__;\n\talpha[i__] = *h__ / temp1;\n\treali = (doublereal) i__;\n/* L105: */\n\tsig[i__ + 1] = reali * alpha[i__] * sig[i__];\n    }\nL110:\n    psi[*k] = temp1;\n\n/*   compute coefficients g(*) */\n\n/*   initialize v(*) and set w(*).  g(2) is set in data statement */\n\n    if (*ns > 1) {\n\tgoto L120;\n    }\n    i__1 = *k;\n    for (iq = 1; iq <= i__1; ++iq) {\n\ttemp3 = (doublereal) (iq * (iq + 1));\n\tv[iq] = 1. / temp3;\n/* L115: */\n\tw[iq] = v[iq];\n    }\n    goto L140;\n\n/*   if order was raised, update diagonal part of v(*) */\n\nL120:\n    if (*k <= *kold) {\n\tgoto L130;\n    }\n    temp4 = (doublereal) (*k * kp1);\n    v[*k] = 1. / temp4;\n    nsm2 = *ns - 2;\n    if (nsm2 < 1) {\n\tgoto L130;\n    }\n    i__1 = nsm2;\n    for (j = 1; j <= i__1; ++j) {\n\ti__ = *k - j;\n/* L125: */\n\tv[i__] -= alpha[j + 1] * v[i__ + 1];\n    }\n\n/*   update v(*) and set w(*) */\n\nL130:\n    limit1 = kp1 - *ns;\n    temp5 = alpha[*ns];\n    i__1 = limit1;\n    for (iq = 1; iq <= i__1; ++iq) {\n\tv[iq] -= temp5 * v[iq + 1];\n/* L135: */\n\tw[iq] = v[iq];\n    }\n    g[nsp1] = w[1];\n\n/*   compute the g(*) in the work vector w(*) */\n\nL140:\n    nsp2 = *ns + 2;\n    if (kp1 < nsp2) {\n\tgoto L199;\n    }\n    i__1 = kp1;\n    for (i__ = nsp2; i__ <= i__1; ++i__) {\n\tlimit2 = kp2 - i__;\n\ttemp6 = alpha[i__ - 1];\n\ti__2 = limit2;\n\tfor (iq = 1; iq <= i__2; ++iq) {\n/* L145: */\n\t    w[iq] -= temp6 * w[iq + 1];\n\t}\n/* L150: */\n\tg[i__] = w[1];\n    }\nL199:\n/*       ***     end block 1     *** */\n\n/*       ***     begin block 2     *** */\n/*   predict a solution p(*), evaluate derivatives using predicted */\n/*   solution, estimate local error at order k and errors at orders k, */\n/*   k-1, k-2 as if constant step size were used. */\n/*                   *** */\n\n/*   change phi to phi star */\n\n    if (*k < nsp1) {\n\tgoto L215;\n    }\n    i__1 = *k;\n    for (i__ = nsp1; i__ <= i__1; ++i__) {\n\ttemp1 = beta[i__];\n\ti__2 = neqn;\n\tfor (l = 1; l <= i__2; ++l) {\n/* L205: */\n\t    phi[l + i__ * phi_dim1] = temp1 * phi[l + i__ * phi_dim1];\n\t}\n/* L210: */\n    }\n\n/*   predict solution and differences */\n\nL215:\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\tphi[l + kp2 * phi_dim1] = phi[l + kp1 * phi_dim1];\n\tphi[l + kp1 * phi_dim1] = 0.;\n/* L220: */\n\tp[l] = 0.;\n    }\n    i__1 = *k;\n    for (j = 1; j <= i__1; ++j) {\n\ti__ = kp1 - j;\n\tip1 = i__ + 1;\n\ttemp2 = g[i__];\n\ti__2 = neqn;\n\tfor (l = 1; l <= i__2; ++l) {\n\t    p[l] += temp2 * phi[l + i__ * phi_dim1];\n/* L225: */\n\t    phi[l + i__ * phi_dim1] += phi[l + ip1 * phi_dim1];\n\t}\n/* L230: */\n    }\n    if (*nornd) {\n\tgoto L240;\n    }\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\ttau = *h__ * p[l] - phi[l + phi_dim1 * 15];\n\tp[l] = y[l] + tau;\n/* L235: */\n\tphi[l + (phi_dim1 << 4)] = p[l] - y[l] - tau;\n    }\n    goto L250;\nL240:\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L245: */\n\tp[l] = y[l] + *h__ * p[l];\n    }\nL250:\n    xold = *x;\n    *x += *h__;\n    absh = abs(*h__);\n    ok_force(*x, &p[1], &yp[1], params);\n\n/*   estimate errors at orders k,k-1,k-2 */\n\n    erkm2 = 0.;\n    erkm1 = 0.;\n    erk = 0.;\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\ttemp3 = 1. / wt[l];\n\ttemp4 = yp[l] - phi[l + phi_dim1];\n\tif (km2 < 0) {\n\t    goto L265;\n\t} else if (km2 == 0) {\n\t    goto L260;\n\t} else {\n\t    goto L255;\n\t}\nL255:\n/* Computing 2nd power */\n\td__1 = (phi[l + km1 * phi_dim1] + temp4) * temp3;\n\terkm2 += d__1 * d__1;\nL260:\n/* Computing 2nd power */\n\td__1 = (phi[l + *k * phi_dim1] + temp4) * temp3;\n\terkm1 += d__1 * d__1;\nL265:\n/* Computing 2nd power */\n\td__1 = temp4 * temp3;\n\terk += d__1 * d__1;\n    }\n    if (km2 < 0) {\n\tgoto L280;\n    } else if (km2 == 0) {\n\tgoto L275;\n    } else {\n\tgoto L270;\n    }\nL270:\n    erkm2 = absh * sig[km1] * gstr[km2 - 1] * sqrt(erkm2);\nL275:\n    erkm1 = absh * sig[*k] * gstr[km1 - 1] * sqrt(erkm1);\nL280:\n    temp5 = absh * sqrt(erk);\n    err = temp5 * (g[*k] - g[kp1]);\n    erk = temp5 * sig[kp1] * gstr[*k - 1];\n    knew = *k;\n\n/*   test if order should be lowered */\n\n    if (km2 < 0) {\n\tgoto L299;\n    } else if (km2 == 0) {\n\tgoto L290;\n    } else {\n\tgoto L285;\n    }\nL285:\n    if (max(erkm1,erkm2) <= erk) {\n\tknew = km1;\n    }\n    goto L299;\nL290:\n    if (erkm1 <= erk * .5) {\n\tknew = km1;\n    }\n\n/*   test if step successful */\n\nL299:\n    if (err <= *eps) {\n\tgoto L400;\n    }\n/*       ***     end block 2     *** */\n\n/*       ***     begin block 3     *** */\n/*   the step is unsuccessful.  restore  x, phi(*,*), psi(*) . */\n/*   if third consecutive failure, set order to one.  if step fails more */\n/*   than three times, consider an optimal step size.  double error */\n/*   tolerance and return if estimated step size is too small for machine */\n/*   precision. */\n/*                   *** */\n\n/*   restore x, phi(*,*) and psi(*) */\n\n    *phase1 = FALSE_;\n    *x = xold;\n    i__1 = *k;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\ttemp1 = 1. / beta[i__];\n\tip1 = i__ + 1;\n\ti__2 = neqn;\n\tfor (l = 1; l <= i__2; ++l) {\n/* L305: */\n\t    phi[l + i__ * phi_dim1] = temp1 * (phi[l + i__ * phi_dim1] - phi[\n\t\t    l + ip1 * phi_dim1]);\n\t}\n/* L310: */\n    }\n    if (*k < 2) {\n\tgoto L320;\n    }\n    i__1 = *k;\n    for (i__ = 2; i__ <= i__1; ++i__) {\n/* L315: */\n\tpsi[i__ - 1] = psi[i__] - *h__;\n    }\n\n/*   on third failure, set order to one.  thereafter, use optimal step */\n/*   size */\n\nL320:\n    ++ifail;\n    temp2 = .5;\n    if ((i__1 = ifail - 3) < 0) {\n\tgoto L335;\n    } else if (i__1 == 0) {\n\tgoto L330;\n    } else {\n\tgoto L325;\n    }\nL325:\n    if (p5eps < erk * .25) {\n\ttemp2 = sqrt(p5eps / erk);\n    }\nL330:\n    knew = 1;\nL335:\n    *h__ = temp2 * *h__;\n    *k = knew;\n    if (abs(*h__) >= fouru * abs(*x)) {\n\tgoto L340;\n    }\n    *crash = TRUE_;\n    d__1 = fouru * abs(*x);\n    *h__ = ok_d_sign(d__1, *h__);\n    *eps += *eps;\n    return 0;\nL340:\n    goto L100;\n/*       ***     end block 3     *** */\n\n/*       ***     begin block 4     *** */\n/*   the step is successful.  correct the predicted solution, evaluate */\n/*   the derivatives using the corrected solution and update the */\n/*   differences.  determine best order and step size for next step. */\n/*                   *** */\nL400:\n    *kold = *k;\n    *hold = *h__;\n\n/*   correct and evaluate */\n\n    temp1 = *h__ * g[kp1];\n    if (*nornd) {\n\tgoto L410;\n    }\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\trho = temp1 * (yp[l] - phi[l + phi_dim1]) - phi[l + (phi_dim1 << 4)];\n\ty[l] = p[l] + rho;\n/* L405: */\n\tphi[l + phi_dim1 * 15] = y[l] - p[l] - rho;\n    }\n    goto L420;\nL410:\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L415: */\n\ty[l] = p[l] + temp1 * (yp[l] - phi[l + phi_dim1]);\n    }\nL420:\n    ok_force(*x, &y[1], &yp[1], params);\n\n/*   update differences for next step */\n\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\tphi[l + kp1 * phi_dim1] = yp[l] - phi[l + phi_dim1];\n/* L425: */\n\tphi[l + kp2 * phi_dim1] = phi[l + kp1 * phi_dim1] - phi[l + kp2 * \n\t\tphi_dim1];\n    }\n    i__1 = *k;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\ti__2 = neqn;\n\tfor (l = 1; l <= i__2; ++l) {\n/* L430: */\n\t    phi[l + i__ * phi_dim1] += phi[l + kp1 * phi_dim1];\n\t}\n/* L435: */\n    }\n\n/*   estimate error at order k+1 unless: */\n/*     in first phase when always raise order, */\n/*     already decided to lower order, */\n/*     step size not constant so estimate unreliable */\n\n    erkp1 = 0.;\n    if (knew == km1 || *k == 12) {\n\t*phase1 = FALSE_;\n    }\n    if (*phase1) {\n\tgoto L450;\n    }\n    if (knew == km1) {\n\tgoto L455;\n    }\n    if (kp1 > *ns) {\n\tgoto L460;\n    }\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L440: */\n/* Computing 2nd power */\n\td__1 = phi[l + kp2 * phi_dim1] / wt[l];\n\terkp1 += d__1 * d__1;\n    }\n    erkp1 = absh * gstr[kp1 - 1] * sqrt(erkp1);\n\n/*   using estimated error at order k+1, determine appropriate order */\n/*   for next step */\n\n    if (*k > 1) {\n\tgoto L445;\n    }\n    if (erkp1 >= erk * .5) {\n\tgoto L460;\n    }\n    goto L450;\nL445:\n    if (erkm1 <= min(erk,erkp1)) {\n\tgoto L455;\n    }\n    if (erkp1 >= erk || *k == 12) {\n\tgoto L460;\n    }\n\n/*   here erkp1 .lt. erk .lt. dmax1(erkm1,erkm2) else order would have */\n/*   been lowered in block 2.  thus order is to be raised */\n\n/*   raise order */\n\nL450:\n    *k = kp1;\n    erk = erkp1;\n    goto L460;\n\n/*   lower order */\n\nL455:\n    *k = km1;\n    erk = erkm1;\n\n/*   with new order determine appropriate step size for next step */\n\nL460:\n    hnew = *h__ + *h__;\n    if (*phase1) {\n\tgoto L465;\n    }\n    if (p5eps >= erk * two[*k]) {\n\tgoto L465;\n    }\n    hnew = *h__;\n    if (p5eps >= erk) {\n\tgoto L465;\n    }\n    temp2 = (doublereal) (*k + 1);\n    d__1 = p5eps / erk;\n    d__2 = 1. / temp2;\n    r__ = pow(d__1, d__2);\n/* Computing MAX */\n    d__1 = .5, d__2 = min(.9,r__);\n    hnew = absh * max(d__1,d__2);\n/* Computing MAX */\n    d__2 = hnew, d__3 = fouru * abs(*x);\n    d__1 = max(d__2,d__3);\n    hnew = ok_d_sign(d__1, *h__);\nL465:\n    *h__ = hnew;\n    return 0;\n/*       ***     end block 4     *** */\n} /* step_ */\n\n/* Subroutine */ int ok_ode_intrp_(doublereal *x, doublereal *y, doublereal *xout, \n\tdoublereal *yout, doublereal *ypout, const int neqn, int *kold, \n\tdoublereal *phi, doublereal *psi, doublereal* rho, doublereal* g)\n{\n    /* Initialized data */\n\n    \n    /* System generated locals */\n    int phi_dim1, phi_offset, i__1, i__2;\n\n    /* Local variables */\n     int i__, j, l;\n     doublereal w[13], hi;\n     int ki, jm1;\n     doublereal eta;\n     int kip1;\n     doublereal term, temp1, temp2, temp3, gamma;\n     int limit1;\n     doublereal psijm1;\n\n\n/*   the methods in subroutine  step  approximate the solution near  x */\n/*   by a polynomial.  subroutine  intrp  approximates the solution at */\n/*   xout  by evaluating the polynomial there.  information defining this */\n/*   polynomial is passed from  step  so  intrp  cannot be used alone. */\n\n/*   this code is completely explained and documented in the text, */\n/*   computer solution of ordinary differential equations:  the initial */\n/*   value problem  by l. f. shampine and m. k. gordon. */\n\n/*   input to intrp -- */\n\n/*   all floating point variables are double precision */\n/*   the user provides storage in the calling program for the arrays in */\n/*   the call list */\n/*   and defines */\n/*      xout -- point at which solution is desired. */\n/*   the remaining parameters are defined in  step  and passed to  intrp */\n/*   from that subroutine */\n\n/*   output from  intrp -- */\n\n/*      yout(*) -- solution at  xout */\n/*      ypout(*) -- derivative of solution at  xout */\n/*   the remaining parameters are returned unaltered from their input */\n/*   values.  integration with  step  may be continued. */\n\n    /* Parameter adjustments */\n    phi_dim1 = neqn;\n    phi_offset = 1 + phi_dim1;\n    phi -= phi_offset;\n    --ypout;\n    --yout;\n    --y;\n    --psi;\n\n    /* Function Body */\n\n    hi = *xout - *x;\n    ki = *kold + 1;\n    kip1 = ki + 1;\n\n/*   initialize w(*) for computing g(*) */\n\n    i__1 = ki;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\ttemp1 = (doublereal) i__;\n/* L5: */\n\tw[i__ - 1] = 1. / temp1;\n    }\n    term = 0.;\n\n/*   compute g(*) */\n\n    i__1 = ki;\n    for (j = 2; j <= i__1; ++j) {\n\tjm1 = j - 1;\n\tpsijm1 = psi[jm1];\n\tgamma = (hi + term) / psijm1;\n\teta = hi / psijm1;\n\tlimit1 = kip1 - j;\n\ti__2 = limit1;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n/* L10: */\n\t    w[i__ - 1] = gamma * w[i__ - 1] - eta * w[i__];\n\t}\n\tg[j - 1] = w[0];\n\trho[j - 1] = gamma * rho[jm1 - 1];\n/* L15: */\n\tterm = psijm1;\n    }\n\n/*   interpolate */\n\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n\typout[l] = 0.;\n/* L20: */\n\tyout[l] = 0.;\n    }\n    i__1 = ki;\n    for (j = 1; j <= i__1; ++j) {\n\ti__ = kip1 - j;\n\ttemp2 = g[i__ - 1];\n\ttemp3 = rho[i__ - 1];\n\ti__2 = neqn;\n\tfor (l = 1; l <= i__2; ++l) {\n\t    yout[l] += temp2 * phi[l + i__ * phi_dim1];\n/* L25: */\n\t    ypout[l] += temp3 * phi[l + i__ * phi_dim1];\n\t}\n/* L30: */\n    }\n    i__1 = neqn;\n    for (l = 1; l <= i__1; ++l) {\n/* L35: */\n\tyout[l] = y[l] + hi * yout[l];\n    }\n    return 0;\n} /* intrp_ */\n\n\nok_system** ok_integrate_ode(ok_system* initial, const gsl_vector* times, ok_integrator_options* options,\n        ok_system** bag, int* error) {\n    \n    // Check that the system has been set-up\n    assert(initial->xyz != NULL);\n    // Check input arguments\n    assert(times != NULL);\n    \n    const double startTime = initial->epoch;\n    const int NDIMS = initial->nplanets + 1;\n    \n    // Allocate the return array of snapshots\n    const int SAMPLES = times->size;\n   \n    if (bag == NULL) {\n        bag = (ok_system**) calloc(SAMPLES, sizeof(ok_system*));\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i] = ok_copy_system(initial);\n            bag[i]->epoch = initial->epoch;\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    } else {\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i]->epoch = initial->epoch;\n            bag[i]->flag = initial->flag;\n            //MATRIX_MEMCPY(bag[i]->elements, initial->elements);\n            //MATRIX_MEMCPY(bag[i]->orbits, initial->orbits);\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    }\n    \n    int DIMENSIONS = NDIMS * 7;\n    \n    // Allocates the temporary buffer to hold cartesian coordinates\n    double prevTime = startTime;\n    gsl_matrix* prevOrbits = initial->orbits;\n    \n    double h = 0.01;\n    gsl_matrix* xyz = gsl_matrix_alloc(initial->nplanets+1, 7);\n    MATRIX_MEMCPY(xyz, initial->xyz);\n    \n    doublereal relerr = options->rel_acc * 100;\n    doublereal abserr = options->abs_acc * 100;\n    doublereal work[100 + 21 * DIMENSIONS + 1];\n    \n    int iwork[6];\n    void* params = (void*) initial;\n    \n    // Loop through the times vector\n    for (int i = 0; i < SAMPLES; i++) {\n        double time = times->data[i];\n        int iflag = 1;\n\n        // Integrate between prevTime and time\n        if (fabs(time - prevTime) > 1e-10) {\n            while (fabs(time - prevTime) > 1e-10) {\n                h = copysign(h, time-prevTime);\n                ok_ode_ode_(&ok_force, DIMENSIONS, xyz->data, &prevTime, &time,\n                    &relerr, &abserr, &iflag, work, iwork, params);\n                \n                if (iflag != 2) {\n                    for (int i = 0; i < SAMPLES; i++)\n                        ok_free_system(bag[i]);\n                    free(bag);\n                                        \n                    return NULL;\n                }\n            }\n        } else {\n            if (i == 0)\n                MATRIX_MEMCPY(xyz, initial->xyz);\n            else\n                MATRIX_MEMCPY(xyz, bag[i-1]->xyz);\n        };\n        \n        \n        // Set up the return vector\n        bag[i]->time = bag[i]->epoch = time;\n       \n        MATRIX_MEMCPY(bag[i]->xyz, xyz);\n        if (options == NULL || options->calc_elements) {\n                MATRIX_MEMCPY(bag[i]->orbits, prevOrbits);\n                ok_cart2el(bag[i], bag[i]->orbits, true);\n        }\n        prevOrbits = bag[i]->orbits;\n        \n        \n        // Ensures that the force/jacobian routines are passed the most recent state of\n        // the system\n        \n        prevTime = time;\n        params = bag[i];\n    }\n    \n    \n    gsl_matrix_free(xyz);\n    return bag;\n}","/* odex.f -- translated by f2c (version 20100827).\n   You must link the resulting object file with libf2c:\n\ton Microsoft Windows system, link with libf2c.lib;\n\ton Linux or Unix systems, link with .../path/to/libf2c.a -lm\n\tor, if you install libf2c.a in a standard place, with -lf2c -lm\n\t-- in that order, at the end of the command line, as in\n\t\tcc *.o -lf2c -lm\n\tSource for libf2c is in /netlib/f2c/libf2c.zip, e.g.,\n\n\t\thttp://www.netlib.org/f2c/libf2c.zip\n*/\n\n#include \"utils.h\"\n\n#include \"systemic.h\"\n#include \"integration.h\"\n#include \"ode.h\"\n#include \"assert.h\"\n#include \"f2c.h\"\n#include \"gsl/gsl_vector.h\"\n#include \"gsl/gsl_vector_int.h\"\n/* Table of constant values */\n\nstatic integer c__9 = 9;\nstatic integer c__1 = 1;\nstatic integer c__3 = 3;\nstatic integer c__5 = 5;\nstatic doublereal c_b67 = 1.;\n\n\nint ok_odex_odxcor_(integer *n, S_fp fcn, doublereal *x, doublereal *\n\ty, doublereal *xend, doublereal *hmax, doublereal *h__, doublereal *\n\trtol, doublereal *atol, integer *itol, integer *km, \n\tinteger *iout, integer *idid, integer *nmax, doublereal *uround, \n\tdoublereal *dy, doublereal *yh1, doublereal *yh2, doublereal *dz, \n\tdoublereal *scal, doublereal *fsafe, doublereal *ysafe, doublereal *t,\n\t doublereal *hh, doublereal *w, doublereal *a, doublereal *dens, \n\tinteger *ncom, integer *icomp, integer *nj, integer *ipoint, integer *\n\tnsequ, integer *mstab, integer *jstab, integer *lfsafe, doublereal *\n\tsafe1, doublereal *safe2, doublereal *safe3, doublereal *fac1, \n\tdoublereal *fac2, doublereal *fac3, doublereal *fac4, integer *iderr, \n\tdoublereal *errfac, integer *mudif, integer *nrd, integer *nfcn, integer *nstep, integer *naccpt, \n\tinteger *nrejct, void* params);\n\nint ok_odex_midex_(integer *j, doublereal *x, doublereal *y, \n\tdoublereal *h__, doublereal *hmax, integer *n, S_fp fcn, doublereal *\n\tdy, doublereal *yh1, doublereal *yh2, doublereal *dz, doublereal *t, \n\tinteger *nj, doublereal *hh, doublereal *w, doublereal *err, \n\tdoublereal *fac, doublereal *a, doublereal *safe1, doublereal *uround,\n\t doublereal *fac1, doublereal *fac2, doublereal *safe2, doublereal *\n\tscal, logical *atov, doublereal *safe3, logical *reject, integer *km, \n\tdoublereal *rtol, doublereal *atol, integer *itol, integer *mstab, \n\tinteger *jstab, doublereal *errold, doublereal *fsafe, integer *\n\tlfsafe, integer *iout, integer *ipt, doublereal *ysafe, integer *\n\ticomp, integer *nrd, integer *nfcn, void* params);\n\nint ok_odex_interp_(integer n, doublereal *y, integer imit);\n\n/* Subroutine */ int ok_odex_(integer *n, U_fp fcn, doublereal *x, doublereal *y,\n\t doublereal *xend, doublereal *h__, doublereal *rtol, doublereal *\n\tatol, integer *itol, integer *iout, doublereal *work, \n\tinteger *lwork, integer *iwork, integer *liwork, integer *idid, void* params)\n{\n    /* System generated locals */\n    integer i__1, i__2;\n\n    /* Builtin functions */\n    integer s_wsle(cilist *), do_lio(integer *, integer *, char *, ftnlen), \n\t    e_wsle(void);\n\n    /* Local variables */\n    integer i__, km, iea, iet, nrd, iew;\n    doublereal fac1, fac2, fac3, fac4;\n    integer iehh, ieco, nfcn, ienj, iefs, icom, ieip, iedy, iedz;\n    doublereal hmax;\n    integer ncom, nmax, ieys;\n    doublereal safe1, safe2, safe3;\n    integer ieyh1, ieyh2, iefac, jstab, mudif, iderr, mstab;\n    logical arret;\n    integer nstep, nsequ, lfsafe, iescal, naccpt, nrejct, nrdens;\n    \n    integer istore;\n    doublereal uround;\n\n    /* Fortran I/O blocks */\n    static cilist io___7 = { 0, 6, 0, 0, 0 };\n    static cilist io___9 = { 0, 6, 0, 0, 0 };\n    static cilist io___11 = { 0, 6, 0, 0, 0 };\n    static cilist io___12 = { 0, 6, 0, 0, 0 };\n    static cilist io___16 = { 0, 6, 0, 0, 0 };\n    static cilist io___18 = { 0, 6, 0, 0, 0 };\n    static cilist io___20 = { 0, 6, 0, 0, 0 };\n    static cilist io___23 = { 0, 6, 0, 0, 0 };\n    static cilist io___26 = { 0, 6, 0, 0, 0 };\n    static cilist io___48 = { 0, 6, 0, 0, 0 };\n    static cilist io___52 = { 0, 6, 0, 0, 0 };\n\n\n/* ---------------------------------------------------------- */\n/*     NUMERICAL SOLUTION OF A SYSTEM OF FIRST 0RDER */\n/*     ORDINARY DIFFERENTIAL EQUATIONS  Y'=F(X,Y). */\n/*     THIS IS AN EXTRAPOLATION-ALGORITHM (GBS), BASED ON THE */\n/*     EXPLICIT MIDPOINT RULE (WITH STEPSIZE CONTROL, */\n/*     ORDER SELECTION AND DENSE OUTPUT). */\n\n/*     AUTHORS: E. HAIRER AND G. WANNER */\n/*              UNIVERSITE DE GENEVE, DEPT. DE MATHEMATIQUES */\n/*              CH-1211 GENEVE 24, SWITZERLAND */\n/*              E-MAIL:  Ernst.Hairer@math.unige.ch */\n/*                       Gerhard.Wanner@math.unige.ch */\n/*              DENSE OUTPUT WRITTEN BY E. HAIRER AND A. OSTERMANN */\n\n/*     THIS CODE IS DESCRIBED IN SECTION II.9 OF THE BOOK: */\n/*         E. HAIRER, S.P. NORSETT AND G. WANNER, SOLVING ORDINARY */\n/*         DIFFERENTIAL EQUATIONS I. NONSTIFF PROBLEMS. 2ND EDITION. */\n/*         SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS, */\n/*         SPRINGER-VERLAG (1993) */\n\n/*     VERSION SEPTEMBER 30, 1995 */\n/*         SMALL CORRECTIONS ON OCTOBER 11, 2009 */\n\n/*     INPUT PARAMETERS */\n/*     ---------------- */\n/*     N           DIMENSION OF THE SYSTEM */\n\n/*     FCN         NAME (EXTERNAL) OF SUBROUTINE COMPUTING THE */\n/*                 VALUE OF F(X,Y): */\n/*                    SUBROUTINE FCN(N,X,Y,F,RPAR,IPAR) */\n/*                    DOUBLE PRECISION X,Y(N),F(N) */\n/*                    F(1)=...   ETC. */\n\n/*     X           INITIAL X-VALUE */\n\n/*     Y(N)        INITIAL VALUES FOR Y */\n\n/*     XEND        FINAL X-VALUE (XEND-X MAY BE POSITIVE OR NEGATIVE) */\n\n/*     H           INITIAL STEP SIZE GUESS; */\n/*                 H=1.D0/(NORM OF F'), USUALLY 1.D-1 OR 1.D-3, IS GOOD. */\n/*                 THIS CHOICE IS NOT VERY IMPORTANT, THE CODE QUICKLY */\n/*                 ADAPTS ITS STEP SIZE. WHEN YOU ARE NOT SURE, THEN */\n/*                 STUDY THE CHOSEN VALUES FOR A FEW */\n/*                 STEPS IN SUBROUTINE \"SOLOUT\". */\n/*                 (IF H=0.D0, THE CODE PUTS H=1.D-4). */\n\n/*     RTOL,ATOL   RELATIVE AND ABSOLUTE ERROR TOLERANCES. THEY */\n/*                 CAN BE BOTH SCALARS OR ELSE BOTH VECTORS OF LENGTH N. */\n\n/*     ITOL        SWITCH FOR RTOL AND ATOL: */\n/*                   ITOL=0: BOTH RTOL AND ATOL ARE SCALARS. */\n/*                     THE CODE KEEPS, ROUGHLY, THE LOCAL ERROR OF */\n/*                     Y(I) BELOW RTOL*ABS(Y(I))+ATOL */\n/*                   ITOL=1: BOTH RTOL AND ATOL ARE VECTORS. */\n/*                     THE CODE KEEPS THE LOCAL ERROR OF Y(I) BELOW */\n/*                     RTOL(I)*ABS(Y(I))+ATOL(I). */\n\n/*     SOLOUT      NAME (EXTERNAL) OF SUBROUTINE PROVIDING THE */\n/*                 NUMERICAL SOLUTION DURING INTEGRATION. */\n/*                 IF IOUT.GE.1, IT IS CALLED AFTER EVERY SUCCESSFUL STEP. */\n/*                 SUPPLY A DUMMY SUBROUTINE IF IOUT=0. */\n/*                 IT MUST HAVE THE FORM */\n/*                    SUBROUTINE SOLOUT (NR,XOLD,X,Y,N,CON,NCON,ICOMP,ND, */\n/*                                       RPAR,IPAR,IRTRN) */\n/*                    DIMENSION X,Y(N),CON(NCON),ICOMP(ND) */\n/*                    .... */\n/*                 SOLOUT FURNISHES THE SOLUTION \"Y\" AT THE NR-TH */\n/*                    GRID-POINT \"X\" (THEREBY THE INITIAL VALUE IS */\n/*                    THE FIRST GRID-POINT). */\n/*                 \"XOLD\" IS THE PRECEEDING GRID-POINT. */\n/*                 \"IRTRN\" SERVES TO INTERRUPT THE INTEGRATION. IF IRTRN */\n/*                    IS SET <0, ODEX WILL RETURN TO THE CALLING PROGRAM. */\n\n/*          -----  CONTINUOUS OUTPUT (IF IOUT=2): ----- */\n/*                 DURING CALLS TO \"SOLOUT\", A CONTINUOUS SOLUTION */\n/*                 FOR THE INTERVAL [XOLD,X] IS AVAILABLE THROUGH */\n/*                 THE DOUBLE PRECISION FUNCTION */\n/*                    >>>   CONTEX(I,S,CON,NCON,ICOMP,ND)   <<< */\n/*                 WHICH PROVIDES AN APPROXIMATION TO THE I-TH */\n/*                 COMPONENT OF THE SOLUTION AT THE POINT S. THE VALUE */\n/*                 S SHOULD LIE IN THE INTERVAL [XOLD,X]. */\n\n/*     IOUT        SWITCH FOR CALLING THE SUBROUTINE SOLOUT: */\n/*                    IOUT=0: SUBROUTINE IS NEVER CALLED */\n/*                    IOUT=1: SUBROUTINE IS USED FOR OUTPUT */\n/*                    IOUT=2: DENSE OUTPUT IS PERFORMED IN SOLOUT */\n\n/*     WORK        ARRAY OF WORKING SPACE OF LENGTH \"LWORK\". */\n/*                 SERVES AS WORKING SPACE FOR ALL VECTORS. */\n/*                 \"LWORK\" MUST BE AT LEAST */\n/*                    N*(KM+5)+5*KM+20+(2*KM*(KM+2)+5)*NRDENS */\n/*                 WHERE NRDENS=IWORK(8) (SEE BELOW) AND */\n/*                        KM=9                IF IWORK(2)=0 */\n/*                        KM=IWORK(2)         IF IWORK(2).GT.0 */\n/*                 WORK(1),...,WORK(20) SERVE AS PARAMETERS */\n/*                 FOR THE CODE. FOR STANDARD USE, SET THESE */\n/*                 PARAMETERS TO ZERO BEFORE CALLING. */\n\n/*     LWORK       DECLARED LENGTH OF ARRAY \"WORK\". */\n\n/*     IWORK       INTEGER WORKING SPACE OF LENGTH \"LIWORK\". */\n/*                 \"LIWORK\" MUST BE AT LEAST */\n/*                               2*KM+21+NRDENS */\n/*                 IWORK(1),...,IWORK(20) SERVE AS PARAMETERS */\n/*                 FOR THE CODE. FOR STANDARD USE, SET THESE */\n/*                 PARAMETERS TO ZERO BEFORE CALLING. */\n\n/*     LIWORK      DECLARED LENGTH OF ARRAY \"IWORK\". */\n\n/*     RPAR, IPAR  REAL AND INTEGER PARAMETERS (OR PARAMETER ARRAYS) WHICH */\n/*                 CAN BE USED FOR COMMUNICATION BETWEEN YOUR CALLING */\n/*                 PROGRAM AND THE FCN, JAC, MAS, SOLOUT SUBROUTINES. */\n\n/* ----------------------------------------------------------------------- */\n\n/*     SOPHISTICATED SETTING OF PARAMETERS */\n/*     ----------------------------------- */\n/*              SEVERAL PARAMETERS (WORK(1),...,IWORK(1),...) ALLOW */\n/*              TO ADAPT THE CODE TO THE PROBLEM AND TO THE NEEDS OF */\n/*              THE USER. FOR ZERO INPUT, THE CODE CHOOSES DEFAULT VALUES. */\n\n/*    WORK(1)   UROUND, THE ROUNDING UNIT, DEFAULT 2.3D-16. */\n\n/*    WORK(2)   MAXIMAL STEP SIZE, DEFAULT XEND-X. */\n\n/*    WORK(3)   STEP SIZE IS REDUCED BY FACTOR WORK(3), IF THE */\n/*              STABILITY CHECK IS NEGATIVE, DEFAULT 0.5. */\n\n/*    WORK(4), WORK(5)   PARAMETERS FOR STEP SIZE SELECTION */\n/*              THE NEW STEP SIZE FOR THE J-TH DIAGONAL ENTRY IS */\n/*              CHOSEN SUBJECT TO THE RESTRICTION */\n/*                 FACMIN/WORK(5) <= HNEW(J)/HOLD <= 1/FACMIN */\n/*              WHERE FACMIN=WORK(4)**(1/(2*J-1)) */\n/*              DEFAULT VALUES: WORK(4)=0.02D0, WORK(5)=4.D0 */\n\n/*    WORK(6), WORK(7)   PARAMETERS FOR THE ORDER SELECTION */\n/*              STEP SIZE IS DECREASED IF    W(K-1) <= W(K)*WORK(6) */\n/*              STEP SIZE IS INCREASED IF    W(K) <= W(K-1)*WORK(7) */\n/*              DEFAULT VALUES: WORK(6)=0.8D0, WORK(7)=0.9D0 */\n\n/*    WORK(8), WORK(9)   SAFETY FACTORS FOR STEP CONTROL ALGORITHM */\n/*             HNEW=H*WORK(9)*(WORK(8)*TOL/ERR)**(1/(J-1)) */\n/*             DEFAULT VALUES: WORK(8)=0.65D0, */\n/*                        WORK(9)=0.94D0  IF \"HOPE FOR CONVERGENCE\" */\n/*                        WORK(9)=0.90D0  IF \"NO HOPE FOR CONVERGENCE\" */\n\n/*    IWORK(1)  THIS IS THE MAXIMAL NUMBER OF ALLOWED STEPS. */\n/*              THE DEFAULT VALUE (FOR IWORK(1)=0) IS 10000. */\n\n/*    IWORK(2)  THE MAXIMUM NUMBER OF COLUMNS IN THE EXTRAPOLATION */\n/*              TABLE. THE DEFAULT VALUE (FOR IWORK(2)=0) IS 9. */\n/*              IF IWORK(2).NE.0 THEN IWORK(2) SHOULD BE .GE.3. */\n\n/*    IWORK(3)  SWITCH FOR THE STEP SIZE SEQUENCE (EVEN NUMBERS ONLY) */\n/*              IF IWORK(3).EQ.1 THEN 2,4,6,8,10,12,14,16,... */\n/*              IF IWORK(3).EQ.2 THEN 2,4,8,12,16,20,24,28,... */\n/*              IF IWORK(3).EQ.3 THEN 2,4,6,8,12,16,24,32,... */\n/*              IF IWORK(3).EQ.4 THEN 2,6,10,14,18,22,26,30,... */\n/*              IF IWORK(3).EQ.5 THEN 4,8,12,16,20,24,28,32,... */\n/*              THE DEFAULT VALUE IS IWORK(3)=1 IF IOUT.LE.1; */\n/*              THE DEFAULT VALUE IS IWORK(3)=4 IF IOUT.GE.2. */\n\n/*    IWORK(4)  STABILITY CHECK IS ACTIVATED AT MOST IWORK(4) TIMES IN */\n/*              ONE LINE OF THE EXTRAP. TABLE, DEFAULT IWORK(4)=1. */\n\n/*    IWORK(5)  STABILITY CHECK IS ACTIVATED ONLY IN THE LINES */\n/*              1 TO IWORK(5) OF THE EXTRAP. TABLE, DEFAULT IWORK(5)=1. */\n\n/*    IWORK(6)  IF  IWORK(6)=0  ERROR ESTIMATOR IN THE DENSE */\n/*              OUTPUT FORMULA IS ACTIVATED. IT CAN BE SUPPRESSED */\n/*              BY PUTTING IWORK(6)=1. */\n/*              DEFAULT IWORK(6)=0  (IF IOUT.GE.2). */\n\n/*    IWORK(7)  DETERMINES THE DEGREE OF INTERPOLATION FORMULA */\n/*              MU = 2 * KAPPA - IWORK(7) + 1 */\n/*              IWORK(7) SHOULD LIE BETWEEN 1 AND 6 */\n/*              DEFAULT IWORK(7)=4  (IF IWORK(7)=0). */\n\n/*    IWORK(8)  = NRDENS = NUMBER OF COMPONENTS, FOR WHICH DENSE OUTPUT */\n/*              IS REQUIRED */\n\n/*    IWORK(21),...,IWORK(NRDENS+20) INDICATE THE COMPONENTS, FOR WHICH */\n/*              DENSE OUTPUT IS REQUIRED */\n\n/* ----------------------------------------------------------------------C */\n/*     OUTPUT PARAMETERS */\n/*     ----------------- */\n/*     X           X-VALUE FOR WHICH THE SOLUTION HAS BEEN COMPUTED */\n/*                 (AFTER SUCCESSFUL RETURN X=XEND). */\n\n/*     Y(N)        NUMERICAL SOLUTION AT X */\n\n/*     H           PREDICTED STEP SIZE OF THE LAST ACCEPTED STEP */\n\n/*     IDID        REPORTS ON SUCCESSFULNESS UPON RETURN: */\n/*                   IDID=1  COMPUTATION SUCCESSFUL, */\n/*                   IDID=-1 COMPUTATION UNSUCCESSFUL. */\n\n/*   IWORK(17)  NFCN    NUMBER OF FUNCTION EVALUATIONS */\n/*   IWORK(18)  NSTEP   NUMBER OF COMPUTED STEPS */\n/*   IWORK(19)  NACCPT  NUMBER OF ACCEPTED STEPS */\n/*   IWORK(20)  NREJCT  NUMBER OF REJECTED STEPS (DUE TO ERROR TEST), */\n/*                      (STEP REJECTIONS IN THE FIRST STEP ARE NOT COUNTED) */\n/* ----------------------------------------------------------------------- */\n/* *** *** *** *** *** *** *** *** *** *** *** *** *** */\n/*          DECLARATIONS */\n/* *** *** *** *** *** *** *** *** *** *** *** *** *** */\n/* *** *** *** *** *** *** *** */\n/*        SETTING THE PARAMETERS */\n/* *** *** *** *** *** *** *** */\n    /* Parameter adjustments */\n    --y;\n    --rtol;\n    --atol;\n    --work;\n    --iwork;\n\n    /* Function Body */\n    nfcn = 0;\n    nstep = 0;\n    naccpt = 0;\n    nrejct = 0;\n    arret = FALSE_;\n/* -------- NMAX , THE MAXIMAL NUMBER OF STEPS ----- */\n    if (iwork[1] == 0) {\n\tnmax = 10000;\n    } else {\n\tnmax = iwork[1];\n\tif (nmax <= 0) {\n\t    s_wsle(&io___7);\n\t    do_lio(&c__9, &c__1, \" WRONG INPUT IWORK(1)=\", (ftnlen)22);\n\t    do_lio(&c__3, &c__1, (char *)&iwork[1], (ftnlen)sizeof(integer));\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------- KM     MAXIMUM NUMBER OF COLUMNS IN THE EXTRAPOLATION */\n    if (iwork[2] == 0) {\n\tkm = 9;\n    } else {\n\tkm = iwork[2];\n\tif (km <= 2) {\n\t    s_wsle(&io___9);\n\t    do_lio(&c__9, &c__1, \" CURIOUS INPUT IWORK(2)=\", (ftnlen)24);\n\t    do_lio(&c__3, &c__1, (char *)&iwork[2], (ftnlen)sizeof(integer));\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------- NSEQU     CHOICE OF STEP SIZE SEQUENCE */\n    nsequ = iwork[3];\n    if (iwork[3] == 0 && *iout <= 1) {\n\tnsequ = 1;\n    }\n    if (iwork[3] == 0 && *iout >= 2) {\n\tnsequ = 4;\n    }\n    if (nsequ <= 0 || nsequ >= 6) {\n\ts_wsle(&io___11);\n\tdo_lio(&c__9, &c__1, \" CURIOUS INPUT IWORK(3)=\", (ftnlen)24);\n\tdo_lio(&c__3, &c__1, (char *)&iwork[3], (ftnlen)sizeof(integer));\n\te_wsle();\n\tarret = TRUE_;\n    }\n    if (nsequ <= 3 && *iout >= 2) {\n\ts_wsle(&io___12);\n\tdo_lio(&c__9, &c__1, \" IWORK(3) NOT COMPATIBLE WITH IOUT\", (ftnlen)34)\n\t\t;\n\te_wsle();\n\tarret = TRUE_;\n    }\n/* -------- MSTAB     PARAMETER FOR STABILITY CHECK */\n    if (iwork[4] == 0) {\n\tmstab = 1;\n    } else {\n\tmstab = iwork[4];\n    }\n/* -------- JSTAB     PARAMETER FOR STABILITY CHECK */\n    if (iwork[5] == 0) {\n\tjstab = 2;\n    } else {\n\tjstab = iwork[5];\n    }\n/* -------- IDERR  PARAMETER FOR ERROR ESTIMATION IN DENSE OUTPUT */\n    if (iwork[6] == 0) {\n\tif (*iout <= 1) {\n\t    iderr = 1;\n\t}\n\tif (*iout >= 2) {\n\t    iderr = 0;\n\t}\n    } else {\n\tiderr = iwork[6];\n\tif (*iout <= 1) {\n\t    s_wsle(&io___16);\n\t    do_lio(&c__9, &c__1, \" ERROR ESTIMATION IN DENSE OUTPUT\", (ftnlen)\n\t\t    33);\n\t    do_lio(&c__9, &c__1, \" NOT POSSIBLE, WRONG IWORK(6)=\", (ftnlen)30)\n\t\t    ;\n\t    do_lio(&c__3, &c__1, (char *)&iwork[6], (ftnlen)sizeof(integer));\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------- MUDIF */\n    if (iwork[7] == 0) {\n\tmudif = 4;\n    } else {\n\tmudif = iwork[7];\n\tif (mudif <= 0 || mudif >= 7) {\n\t    s_wsle(&io___18);\n\t    do_lio(&c__9, &c__1, \" WRONG INPUT IWORK(7)=\", (ftnlen)22);\n\t    do_lio(&c__3, &c__1, (char *)&iwork[7], (ftnlen)sizeof(integer));\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------- NRDENS   NUMBER OF DENSE OUTPUT COMPONENTS */\n    nrdens = iwork[8];\n    if (nrdens < 0 || nrdens > *n) {\n\ts_wsle(&io___20);\n\tdo_lio(&c__9, &c__1, \" CURIOUS INPUT IWORK(8)=\", (ftnlen)24);\n\tdo_lio(&c__3, &c__1, (char *)&iwork[8], (ftnlen)sizeof(integer));\n\te_wsle();\n\tarret = TRUE_;\n    }\n    if (nrdens == *n) {\n\ti__1 = nrdens;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L17: */\n\t    iwork[i__ + 20] = i__;\n\t}\n    }\n/* -------- UROUND   SMALLEST NUMBER SATISFYING 1.D0+UROUND>1.D0 */\n    if (work[1] == 0.) {\n\turound = 2.3e-16;\n    } else {\n\turound = work[1];\n\tif (uround <= 1e-35 || uround >= 1.) {\n\t    s_wsle(&io___23);\n\t    do_lio(&c__9, &c__1, \" WHICH MACHINE DO YOU HAVE? YOUR UROUND WA\"\n\t\t    \"S:\", (ftnlen)44);\n\t    do_lio(&c__5, &c__1, (char *)&work[1], (ftnlen)sizeof(doublereal))\n\t\t    ;\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------- MAXIMAL STEP SIZE */\n    if (work[2] == 0.) {\n\thmax = *xend - *x;\n    } else {\n\thmax = abs(work[2]);\n    }\n/* -------- STEP SIZE REDUCTION FACTOR */\n    if (work[3] == 0.) {\n\tsafe3 = .5;\n    } else {\n\tsafe3 = work[3];\n\tif (safe3 <= uround || safe3 >= 1.) {\n\t    s_wsle(&io___26);\n\t    do_lio(&c__9, &c__1, \" CURIOUS INPUT WORK(3)=\", (ftnlen)23);\n\t    do_lio(&c__5, &c__1, (char *)&work[3], (ftnlen)sizeof(doublereal))\n\t\t    ;\n\t    e_wsle();\n\t    arret = TRUE_;\n\t}\n    }\n/* -------  FAC1,FAC2     PARAMETERS FOR STEP SIZE SELECTION */\n    if (work[4] == 0.) {\n\tfac1 = .02;\n    } else {\n\tfac1 = work[4];\n    }\n    if (work[5] == 0.) {\n\tfac2 = 4.;\n    } else {\n\tfac2 = work[5];\n    }\n/* -------  FAC3, FAC4   PARAMETERS FOR THE ORDER SELECTION */\n    if (work[6] == 0.) {\n\tfac3 = .8;\n    } else {\n\tfac3 = work[6];\n    }\n    if (work[7] == 0.) {\n\tfac4 = .9;\n    } else {\n\tfac4 = work[7];\n    }\n/* ------- SAFE1, SAFE2 SAFETY FACTORS FOR STEP SIZE PREDICTION */\n    if (work[8] == 0.) {\n\tsafe1 = .65;\n    } else {\n\tsafe1 = work[8];\n    }\n    if (work[9] == 0.) {\n\tsafe2 = .94;\n    } else {\n\tsafe2 = work[9];\n    }\n/* ------- PREPARE THE ENTRY-POINTS FOR THE ARRAYS IN WORK ----- */\n    lfsafe = (km << 1) * km + km;\n    iedy = 21;\n    ieyh1 = iedy + *n;\n    ieyh2 = ieyh1 + *n;\n    iedz = ieyh2 + *n;\n    iescal = iedz + *n;\n    iet = iescal + *n;\n    iefs = iet + km * *n;\n    ieys = iefs + lfsafe * nrdens;\n    iehh = ieys + km * nrdens;\n    iew = iehh + km;\n    iea = iew + km;\n    iefac = iea + km;\n/* ------ TOTAL STORAGE REQUIREMENT ----------- */\n    ieco = iefac + (km << 1);\n    istore = ieco + ((km << 1) + 5) * nrdens - 1;\n    if (istore > *lwork) {\n\ts_wsle(&io___48);\n\tdo_lio(&c__9, &c__1, \" INSUFFICIENT STORAGE FOR WORK, MIN. LWORK=\", (\n\t\tftnlen)43);\n\tdo_lio(&c__3, &c__1, (char *)&istore, (ftnlen)sizeof(integer));\n\te_wsle();\n\tarret = TRUE_;\n    }\n/* ------- ENTRY POINTS FOR INTEGER WORKSPACE ----- */\n    icom = 21;\n    ienj = icom + nrdens;\n/* --------- TOTAL REQUIREMENT --------------- */\n    ieip = ienj + km;\n    istore = ieip + km;\n    if (istore > *liwork) {\n\ts_wsle(&io___52);\n\tdo_lio(&c__9, &c__1, \" INSUFF. STORAGE FOR IWORK, MIN. LIWORK=\", (\n\t\tftnlen)40);\n\tdo_lio(&c__3, &c__1, (char *)&istore, (ftnlen)sizeof(integer));\n\te_wsle();\n\tarret = TRUE_;\n    }\n/* ------ WHEN A FAIL HAS OCCURED, WE RETURN WITH IDID=-1 */\n    if (arret) {\n\t*idid = -1;\n\treturn 0;\n    }\n/* -------- CALL TO CORE INTEGRATOR ------------ */\n    nrd = max(1,nrdens);\n/* Computing MAX */\n    i__1 = 1, i__2 = ((km << 1) + 5) * nrdens;\n    ncom = max(i__1,i__2);\n    ok_odex_odxcor_(n, (U_fp)fcn, x, &y[1], xend, &hmax, h__, &rtol[1], &atol[1], \n\t    itol, &km,  iout, idid, &nmax, &uround, &work[iedy], \n\t    &work[ieyh1], &work[ieyh2], &work[iedz], &work[iescal], &work[\n\t    iefs], &work[ieys], &work[iet], &work[iehh], &work[iew], &work[\n\t    iea], &work[ieco], &ncom, &iwork[icom], &iwork[ienj], &iwork[ieip]\n\t    , &nsequ, &mstab, &jstab, &lfsafe, &safe1, &safe2, &safe3, &fac1, \n\t    &fac2, &fac3, &fac4, &iderr, &work[iefac], &mudif, &nrd, &nfcn, \n            &nstep, &naccpt, &nrejct, params);\n    iwork[17] = nfcn;\n    iwork[18] = nstep;\n    iwork[19] = naccpt;\n    iwork[20] = nrejct;\n/* ----------- RETURN ----------- */\n    return 0;\n} /* odex_ */\n\n\n\n\n/*  ----- ... AND HERE IS THE CORE INTEGRATOR  ---------- */\n\n/* Subroutine */ int ok_odex_odxcor_(integer *n, S_fp fcn, doublereal *x, doublereal *\n\ty, doublereal *xend, doublereal *hmax, doublereal *h__, doublereal *\n\trtol, doublereal *atol, integer *itol, integer *km, \n\tinteger *iout, integer *idid, integer *nmax, doublereal *uround, \n\tdoublereal *dy, doublereal *yh1, doublereal *yh2, doublereal *dz, \n\tdoublereal *scal, doublereal *fsafe, doublereal *ysafe, doublereal *t,\n\t doublereal *hh, doublereal *w, doublereal *a, doublereal *dens, \n\tinteger *ncom, integer *icomp, integer *nj, integer *ipoint, integer *\n\tnsequ, integer *mstab, integer *jstab, integer *lfsafe, doublereal *\n\tsafe1, doublereal *safe2, doublereal *safe3, doublereal *fac1, \n\tdoublereal *fac2, doublereal *fac3, doublereal *fac4, integer *iderr, \n\tdoublereal *errfac, integer *mudif, integer *nrd, integer *nfcn, integer *nstep, integer *naccpt, \n\tinteger *nrejct, void* params)\n{\n    /* Format strings */\n    static char fmt_979[] = \"(\\002 EXIT OF ODEX AT X=\\002,d14.7,\\002   H=\"\n\t    \"\\002,d14.7)\";\n\n    /* System generated locals */\n    integer t_dim1, t_offset, fsafe_dim1, fsafe_offset, ysafe_dim1, \n\t    ysafe_offset, i__1, i__2, i__3, i__4;\n    doublereal d__1, d__2, d__3;\n\n    /* Builtin functions */\n    double d_sign(doublereal *, doublereal *), d_lg10(doublereal *), sqrt(\n\t    doublereal), pow_di(doublereal *, integer *), pow_dd(doublereal *,\n\t     doublereal *);\n    integer s_wsfe(cilist *), do_fio(integer *, char *, ftnlen), e_wsfe(void);\n\n    /* Local variables */\n    integer i__, j, k, l, kc, kk, mu;\n    doublereal fac;\n    real hhh;\n    integer kmi, kln;\n    doublereal err;\n    integer krn, ipt, kbeg, lbeg, lend;\n    logical last;\n    integer kmit;\n    doublereal prod;\n    logical atov;\n    doublereal xold;\n    integer kopt;\n    doublereal errx;\n    integer njadd;\n    doublereal facnj;\n    \n    real xoldd;\n    integer irtrn;\n    doublereal dblenj;\n    logical reject;\n    doublereal factor, hoptde, errold, posneg;\n    \n    doublereal errint;\n\n    /* Fortran I/O blocks */\n    static cilist io___91 = { 0, 6, 0, fmt_979, 0 };\n\n\n/* ---------------------------------------------------------- */\n/*     CORE INTEGRATOR FOR ODEX */\n/*     PARAMETERS SAME AS IN ODEX WITH WORKSPACE ADDED */\n/* ---------------------------------------------------------- */\n/*         DECLARATIONS */\n/* ---------------------------------------------------------- */\n/* --- DEFINE THE STEP SIZE SEQUENCE */\n    /* Parameter adjustments */\n    --scal;\n    --dz;\n    --yh2;\n    --yh1;\n    --dy;\n    --y;\n    --rtol;\n    --atol;\n    --errfac;\n    --ipoint;\n    --nj;\n    --a;\n    --w;\n    --hh;\n    t_dim1 = *km;\n    t_offset = 1 + t_dim1;\n    t -= t_offset;\n    --dens;\n    --icomp;\n    ysafe_dim1 = *km;\n    ysafe_offset = 1 + ysafe_dim1;\n    ysafe -= ysafe_offset;\n    fsafe_dim1 = *lfsafe;\n    fsafe_offset = 1 + fsafe_dim1;\n    fsafe -= fsafe_offset;\n\n    /* Function Body */\n    if (*nsequ == 1) {\n\ti__1 = *km;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L1: */\n\t    nj[i__] = i__ << 1;\n\t}\n    }\n    if (*nsequ == 2) {\n\tnj[1] = 2;\n\ti__1 = *km;\n\tfor (i__ = 2; i__ <= i__1; ++i__) {\n/* L2: */\n\t    nj[i__] = (i__ << 2) - 4;\n\t}\n    }\n    if (*nsequ == 3) {\n\tnj[1] = 2;\n\tnj[2] = 4;\n\tnj[3] = 6;\n\ti__1 = *km;\n\tfor (i__ = 4; i__ <= i__1; ++i__) {\n/* L11: */\n\t    nj[i__] = nj[i__ - 2] << 1;\n\t}\n    }\n    if (*nsequ == 4) {\n\ti__1 = *km;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L3: */\n\t    nj[i__] = (i__ << 2) - 2;\n\t}\n    }\n    if (*nsequ == 5) {\n\ti__1 = *km;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L6: */\n\t    nj[i__] = i__ << 2;\n\t}\n    }\n/* --- DEFINE THE A(I) FOR ORDER SELECTION */\n    a[1] = nj[1] + 1.;\n    i__1 = *km;\n    for (i__ = 2; i__ <= i__1; ++i__) {\n/* L4: */\n\ta[i__] = a[i__ - 1] + nj[i__];\n    }\n/* --- INITIAL SCALING */\n    i__1 = *n;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\tif (*itol == 0) {\n\t    scal[i__] = atol[1] + rtol[1] * (d__1 = y[i__], abs(d__1));\n\t} else {\n\t    scal[i__] = atol[i__] + rtol[i__] * (d__1 = y[i__], abs(d__1));\n\t}\n/* L8: */\n    }\n/* --- INITIAL PREPARATIONS */\n    d__1 = *xend - *x;\n    posneg = d_sign(&c_b67, &d__1);\n/* Computing MAX */\n/* Computing MIN */\n    d__1 = rtol[1] + 1e-40;\n    i__3 = *km - 1, i__4 = (integer) (-d_lg10(&d__1) * .6 + 1.5);\n    i__1 = 2, i__2 = min(i__3,i__4);\n    k = max(i__1,i__2);\n    *hmax = abs(*hmax);\n/* Computing MAX */\n    d__1 = abs(*h__);\n    *h__ = max(d__1,1e-4);\n/* Computing MIN */\n    d__2 = min(*h__,*hmax), d__3 = (d__1 = *xend - *x, abs(d__1)) / 2.;\n    *h__ = posneg * min(d__2,d__3);\n    if (*iout >= 1) {\n\tif (*iout >= 2) {\n\t    ipoint[1] = 0;\n\t    i__1 = *km;\n\t    for (i__ = 1; i__ <= i__1; ++i__) {\n\t\tnjadd = (i__ << 2) - 2;\n\t\tif (nj[i__] > njadd) {\n\t\t    ++njadd;\n\t\t}\n/* L5: */\n\t\tipoint[i__ + 1] = ipoint[i__] + njadd;\n\t    }\n\t    i__1 = *km << 1;\n\t    for (mu = 1; mu <= i__1; ++mu) {\n\t\terrx = sqrt(mu / (mu + 4.)) * .5;\n/* Computing 2nd power */\n\t\td__1 = mu + 4.;\n\t\tprod = 1. / (d__1 * d__1);\n\t\ti__2 = mu;\n\t\tfor (j = 1; j <= i__2; ++j) {\n/* L7: */\n\t\t    prod = prod * errx / j;\n\t\t}\n/* L9: */\n\t\terrfac[mu] = prod;\n\t    }\n\t    ipt = 0;\n\t}\n\tirtrn = 0;\n\txold = *x;\n\ti__1 = *naccpt + 1;\n\tif (irtrn < 0) {\n\t    goto L120;\n\t}\n    }\n    err = 0.;\n    errold = 1e10;\n    hoptde = posneg * *hmax;\n    w[1] = 0.;\n    reject = FALSE_;\n    last = FALSE_;\nL10:\n    atov = FALSE_;\n/* --- IS XEND REACHED IN THE NEXT STEP? */\n    if ((d__1 = *xend - *x, abs(d__1)) * .1 <= abs(*x) * *uround) {\n\tgoto L110;\n    }\n/* Computing MIN */\n    d__2 = abs(*h__), d__3 = (d__1 = *xend - *x, abs(d__1)), d__2 = min(d__2,\n\t    d__3), d__2 = min(d__2,*hmax), d__3 = abs(hoptde);\n    *h__ = posneg * min(d__2,d__3);\n    if ((*x + *h__ * 1.01 - *xend) * posneg > 0.) {\n\t*h__ = *xend - *x;\n\tlast = TRUE_;\n    }\n    if (*nstep == 0 || *iout != 2) {\n\t(*fcn)(*x, &y[1], &dz[1], params);\n    }\n    ++(*nfcn);\n/* --- THE FIRST AND LAST STEP */\n    if (*nstep == 0 || last) {\n\tipt = 0;\n\t++(*nstep);\n\ti__1 = k;\n\tfor (j = 1; j <= i__1; ++j) {\n\t    kc = j;\n\t    ok_odex_midex_(&j, x, &y[1], h__, hmax, n, (S_fp)fcn, &dy[1], &yh1[1], &\n\t\t    yh2[1], &dz[1], &t[t_offset], &nj[1], &hh[1], &w[1], &err,\n\t\t     &fac, &a[1], safe1, uround, fac1, fac2, safe2, &scal[1], \n\t\t    &atov, safe3, &reject, km, &rtol[1], &atol[1], itol, \n\t\t    mstab, jstab, &errold, &fsafe[fsafe_offset], lfsafe, iout,\n\t\t     &ipt, &ysafe[ysafe_offset], &icomp[1], nrd, nfcn, params);\n\t    if (atov) {\n\t\tgoto L10;\n\t    }\n/* L20: */\n\t    if (j > 1 && err <= 1.) {\n\t\tgoto L60;\n\t    }\n\t}\n\tgoto L55;\n    }\n/* --- BASIC INTEGRATION STEP */\nL30:\n    ipt = 0;\n    ++(*nstep);\n    if (*nstep >= *nmax) {\n\tgoto L120;\n    }\n    kc = k - 1;\n    i__1 = kc;\n    for (j = 1; j <= i__1; ++j) {\n\tok_odex_midex_(&j, x, &y[1], h__, hmax, n, (S_fp)fcn, &dy[1], &yh1[1], &yh2[1]\n\t\t, &dz[1], &t[t_offset], &nj[1], &hh[1], &w[1], &err, &fac, &a[\n\t\t1], safe1, uround, fac1, fac2, safe2, &scal[1], &atov, safe3, \n\t\t&reject, km, &rtol[1], &atol[1], itol, mstab, jstab, &errold, \n\t\t&fsafe[fsafe_offset], lfsafe, iout, &ipt, &ysafe[ysafe_offset]\n\t\t, &icomp[1], nrd, nfcn, params);\n\tif (atov) {\n\t    goto L10;\n\t}\n/* L40: */\n    }\n/* --- CONVERGENCE MONITOR */\n    if (k == 2 || reject) {\n\tgoto L50;\n    }\n    if (err <= 1.) {\n\tgoto L60;\n    }\n/* Computing 2nd power */\n    d__1 = nj[k + 1] * nj[k] / 4.;\n    if (err > d__1 * d__1) {\n\tgoto L100;\n    }\nL50:\n    ok_odex_midex_(&k, x, &y[1], h__, hmax, n, (S_fp)fcn, &dy[1], &yh1[1], &yh2[1], &\n\t    dz[1], &t[t_offset], &nj[1], &hh[1], &w[1], &err, &fac, &a[1], \n\t    safe1, uround, fac1, fac2, safe2, &scal[1], &atov, safe3, &reject,\n\t     km, &rtol[1], &atol[1], itol, mstab, jstab, &errold, &fsafe[\n\t    fsafe_offset], lfsafe, iout, &ipt, &ysafe[ysafe_offset], &icomp[1]\n\t    , nrd, nfcn, params);\n    if (atov) {\n\tgoto L10;\n    }\n    kc = k;\n    if (err <= 1.) {\n\tgoto L60;\n    }\n/* --- HOPE FOR CONVERGENCE IN LINE K+1 */\nL55:\n/* Computing 2nd power */\n    d__1 = nj[k + 1] / 2.;\n    if (err > d__1 * d__1) {\n\tgoto L100;\n    }\n    kc = k + 1;\n    ok_odex_midex_(&kc, x, &y[1], h__, hmax, n, (S_fp)fcn, &dy[1], &yh1[1], &yh2[1], &\n\t    dz[1], &t[t_offset], &nj[1], &hh[1], &w[1], &err, &fac, &a[1], \n\t    safe1, uround, fac1, fac2, safe2, &scal[1], &atov, safe3, &reject,\n\t     km, &rtol[1], &atol[1], itol, mstab, jstab, &errold, &fsafe[\n\t    fsafe_offset], lfsafe, iout, &ipt, &ysafe[ysafe_offset], &icomp[1]\n\t    , nrd, nfcn, params);\n    if (atov) {\n\tgoto L10;\n    }\n    if (err > 1.) {\n\tgoto L100;\n    }\n/* --- STEP IS ACCEPTED */\nL60:\n    xold = *x;\n    *x += *h__;\n    if (*iout >= 2) {\n/* ---  KMIT = MU OF THE PAPER */\n\tkmit = (kc << 1) - *mudif + 1;\n\ti__1 = *nrd;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L69: */\n\t    dens[i__] = y[icomp[i__]];\n\t}\n\txoldd = xold;\n\thhh = *h__;\n\ti__1 = *nrd;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L76: */\n\t    dens[*nrd + i__] = *h__ * dz[icomp[i__]];\n\t}\n\tkln = *nrd << 1;\n\ti__1 = *nrd;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L176: */\n\t    dens[kln + i__] = t[icomp[i__] * t_dim1 + 1];\n\t}\n/* --- COMPUTE SOLUTION AT MID-POINT ---- */\n\ti__1 = kc;\n\tfor (j = 2; j <= i__1; ++j) {\n\t    dblenj = (doublereal) nj[j];\n\t    for (l = j; l >= 2; --l) {\n/* Computing 2nd power */\n\t\td__1 = dblenj / nj[l - 1];\n\t\tfactor = d__1 * d__1 - 1.;\n\t\ti__2 = *nrd;\n\t\tfor (i__ = 1; i__ <= i__2; ++i__) {\n\t\t    ysafe[l - 1 + i__ * ysafe_dim1] = ysafe[l + i__ * \n\t\t\t    ysafe_dim1] + (ysafe[l + i__ * ysafe_dim1] - \n\t\t\t    ysafe[l - 1 + i__ * ysafe_dim1]) / factor;\n/* L473: */\n\t\t}\n\t    }\n\t}\n\tkrn = *nrd << 2;\n\ti__2 = *nrd;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n/* L474: */\n\t    dens[krn + i__] = ysafe[i__ * ysafe_dim1 + 1];\n\t}\n/* --- COMPUTE FIRST DERIVATIVE AT RIGHT END ---- */\n\ti__2 = *n;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n/* L478: */\n\t    yh1[i__] = t[i__ * t_dim1 + 1];\n\t}\n\t(*fcn)(*x, &yh1[1], &yh2[1], params);\n\tkrn = *nrd * 3;\n\ti__2 = *nrd;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n/* L274: */\n\t    dens[krn + i__] = yh2[icomp[i__]] * *h__;\n\t}\n/* --- THE LOOP --- */\n\ti__2 = kmit;\n\tfor (kmi = 1; kmi <= i__2; ++kmi) {\n/* --- COMPUTE KMI-TH DERIVATIVE AT MID-POINT ---- */\n\t    kbeg = (kmi + 1) / 2;\n\t    i__1 = kc;\n\t    for (kk = kbeg; kk <= i__1; ++kk) {\n\t\td__1 = nj[kk] / 2.;\n\t\ti__3 = kmi - 1;\n\t\tfacnj = pow_di(&d__1, &i__3);\n\t\tipt = ipoint[kk + 1] - (kk << 1) + kmi;\n\t\ti__3 = *nrd;\n\t\tfor (i__ = 1; i__ <= i__3; ++i__) {\n/* L371: */\n\t\t    ysafe[kk + i__ * ysafe_dim1] = fsafe[ipt + i__ * \n\t\t\t    fsafe_dim1] * facnj;\n\t\t}\n/* L375: */\n\t    }\n\t    i__1 = kc;\n\t    for (j = kbeg + 1; j <= i__1; ++j) {\n\t\tdblenj = (doublereal) nj[j];\n\t\ti__3 = kbeg + 1;\n\t\tfor (l = j; l >= i__3; --l) {\n/* Computing 2nd power */\n\t\t    d__1 = dblenj / nj[l - 1];\n\t\t    factor = d__1 * d__1 - 1.;\n\t\t    i__4 = *nrd;\n\t\t    for (i__ = 1; i__ <= i__4; ++i__) {\n\t\t\tysafe[l - 1 + i__ * ysafe_dim1] = ysafe[l + i__ * \n\t\t\t\tysafe_dim1] + (ysafe[l + i__ * ysafe_dim1] - \n\t\t\t\tysafe[l - 1 + i__ * ysafe_dim1]) / factor;\n/* L373: */\n\t\t    }\n\t\t}\n\t    }\n\t    krn = (kmi + 4) * *nrd;\n\t    i__4 = *nrd;\n\t    for (i__ = 1; i__ <= i__4; ++i__) {\n/* L374: */\n\t\tdens[krn + i__] = ysafe[kbeg + i__ * ysafe_dim1] * *h__;\n\t    }\n\t    if (kmi == kmit) {\n\t\tgoto L180;\n\t    }\n/* --- COMPUTE DIFFERENCES */\n\t    i__4 = kc;\n\t    for (kk = (kmi + 2) / 2; kk <= i__4; ++kk) {\n\t\tlbeg = ipoint[kk + 1];\n\t\tlend = ipoint[kk] + kmi + 1;\n\t\tif (kmi == 1 && *nsequ == 4) {\n\t\t    lend += 2;\n\t\t}\n\t\ti__3 = lend;\n\t\tfor (l = lbeg; l >= i__3; l += -2) {\n\t\t    i__1 = *nrd;\n\t\t    for (i__ = 1; i__ <= i__1; ++i__) {\n/* L64: */\n\t\t\tfsafe[l + i__ * fsafe_dim1] -= fsafe[l - 2 + i__ * \n\t\t\t\tfsafe_dim1];\n\t\t    }\n\t\t}\n\t\tif (kmi == 1 && *nsequ == 4) {\n\t\t    l = lend - 2;\n\t\t    i__1 = *nrd;\n\t\t    for (i__ = 1; i__ <= i__1; ++i__) {\n/* L65: */\n\t\t\tfsafe[l + i__ * fsafe_dim1] -= dz[icomp[i__]];\n\t\t    }\n\t\t}\n/* L66: */\n\t    }\n/* --- COMPUTE DIFFERENCES */\n\t    i__4 = kc;\n\t    for (kk = (kmi + 2) / 2; kk <= i__4; ++kk) {\n\t\tlbeg = ipoint[kk + 1] - 1;\n\t\tlend = ipoint[kk] + kmi + 2;\n\t\ti__1 = lend;\n\t\tfor (l = lbeg; l >= i__1; l += -2) {\n\t\t    i__3 = *nrd;\n\t\t    for (i__ = 1; i__ <= i__3; ++i__) {\n/* L164: */\n\t\t\tfsafe[l + i__ * fsafe_dim1] -= fsafe[l - 2 + i__ * \n\t\t\t\tfsafe_dim1];\n\t\t    }\n\t\t}\n/* L166: */\n\t    }\nL180:\n\t    ;\n\t}\n\tok_odex_interp_(*nrd, &dens[1], kmit);\n/* --- ESTIMATION OF INTERPOLATION ERROR */\n\tif (*iderr == 0 && kmit >= 1) {\n\t    errint = 0.;\n\t    i__2 = *nrd;\n\t    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L187: */\n/* Computing 2nd power */\n\t\td__1 = dens[(kmit + 4) * *nrd + i__] / scal[icomp[i__]];\n\t\terrint += d__1 * d__1;\n\t    }\n\t    errint = sqrt(errint / *nrd) * errfac[kmit];\n/* Computing MAX */\n\t    d__2 = 1. / (kmit + 4);\n\t    d__1 = pow_dd(&errint, &d__2);\n\t    hoptde = *h__ / max(d__1,.01);\n\t    if (errint > 10.) {\n\t\t*h__ = hoptde;\n\t\t*x = xold;\n\t\t++(*nrejct);\n\t\treject = TRUE_;\n\t\tgoto L10;\n\t    }\n\t}\n\ti__2 = *n;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n/* L189: */\n\t    dz[i__] = yh2[i__];\n\t}\n    }\n    i__2 = *n;\n    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L70: */\n\ty[i__] = t[i__ * t_dim1 + 1];\n    }\n    ++(*naccpt);\n    if (*iout >= 1) {\n\ti__2 = *naccpt + 1;\n\tif (irtrn < 0) {\n\t    goto L120;\n\t}\n    }\n/* --- COMPUTE OPTIMAL ORDER */\n    if (kc == 2) {\n/* Computing MIN */\n\ti__2 = 3, i__4 = *km - 1;\n\tkopt = min(i__2,i__4);\n\tif (reject) {\n\t    kopt = 2;\n\t}\n\tgoto L80;\n    }\n    if (kc <= k) {\n\tkopt = kc;\n\tif (w[kc - 1] < w[kc] * *fac3) {\n\t    kopt = kc - 1;\n\t}\n\tif (w[kc] < w[kc - 1] * *fac4) {\n/* Computing MIN */\n\t    i__2 = kc + 1, i__4 = *km - 1;\n\t    kopt = min(i__2,i__4);\n\t}\n    } else {\n\tkopt = kc - 1;\n\tif (kc > 3 && w[kc - 2] < w[kc - 1] * *fac3) {\n\t    kopt = kc - 2;\n\t}\n\tif (w[kc] < w[kopt] * *fac4) {\n/* Computing MIN */\n\t    i__2 = kc, i__4 = *km - 1;\n\t    kopt = min(i__2,i__4);\n\t}\n    }\n/* --- AFTER A REJECTED STEP */\nL80:\n    if (reject) {\n\tk = min(kopt,kc);\n/* Computing MIN */\n\td__2 = abs(*h__), d__3 = (d__1 = hh[k], abs(d__1));\n\t*h__ = posneg * min(d__2,d__3);\n\treject = FALSE_;\n\tgoto L10;\n    }\n/* --- COMPUTE STEPSIZE FOR NEXT STEP */\n    if (kopt <= kc) {\n\t*h__ = hh[kopt];\n    } else {\n\tif (kc < k && w[kc] < w[kc - 1] * *fac4) {\n\t    *h__ = hh[kc] * a[kopt + 1] / a[kc];\n\t} else {\n\t    *h__ = hh[kc] * a[kopt] / a[kc];\n\t}\n    }\n    k = kopt;\n    *h__ = posneg * abs(*h__);\n    goto L10;\n/* --- STEP IS REJECTED */\nL100:\n/* Computing MIN */\n    i__2 = min(k,kc), i__4 = *km - 1;\n    k = min(i__2,i__4);\n    if (k > 2 && w[k - 1] < w[k] * *fac3) {\n\t--k;\n    }\n    ++(*nrejct);\n    *h__ = posneg * hh[k];\n    reject = TRUE_;\n    goto L30;\n/* --- SOLUTION EXIT */\nL110:\n    *idid = 1;\n    return 0;\n/* --- FAIL EXIT */\nL120:\n    s_wsfe(&io___91);\n    do_fio(&c__1, (char *)&(*x), (ftnlen)sizeof(doublereal));\n    do_fio(&c__1, (char *)&(*h__), (ftnlen)sizeof(doublereal));\n    e_wsfe();\n    *idid = -1;\n    return 0;\n} /* odxcor_ */\n\n\n/* Subroutine */ int ok_odex_midex_(integer *jj, doublereal *x, doublereal *y, \n\tdoublereal *h__, doublereal *hmax, integer *nn, S_fp fcn, doublereal *\n\tdy, doublereal *yh1, doublereal *yh2, doublereal *dz, doublereal *t, \n\tinteger *nj, doublereal *hh, doublereal *w, doublereal *err, \n\tdoublereal *fac, doublereal *a, doublereal *safe1, doublereal *uround,\n\t doublereal *fac1, doublereal *fac2, doublereal *safe2, doublereal *\n\tscal, logical *atov, doublereal *safe3, logical *reject, integer *km, \n\tdoublereal *rtol, doublereal *atol, integer *itol, integer *mstab, \n\tinteger *jstab, doublereal *errold, doublereal *fsafe, integer *\n\tlfsafe, integer *iout, integer *ipt, doublereal *ysafe, integer *\n\ticomp, integer *nrd, integer *nfcn, void* params)\n{\n    /* System generated locals */\n    integer t_dim1, t_offset, fsafe_dim1, fsafe_offset, ysafe_dim1, \n\t    ysafe_offset, i__1, i__2;\n    doublereal d__1, d__2, d__3, d__4, d__5;\n\n    /* Builtin functions */\n    double sqrt(doublereal);\n\n    /* Local variables */\n    integer i__, l, m;\n    doublereal hj;\n    integer mm;\n    doublereal ys, t1i, del1, del2, expo, quot;\n    integer njmid;\n    doublereal facmin, dblenj;\n\n    integer j = *jj;\n    integer n = *nn;\n    \n/* --- THIS SUBROUTINE COMPUTES THE J-TH LINE OF THE */\n/* --- EXTRAPOLATION TABLE AND PROVIDES AN ESTIMATION */\n/* --- OF THE OPTIMAL STEPSIZE */\n    /* Parameter adjustments */\n    --scal;\n    --dz;\n    --yh2;\n    --yh1;\n    --dy;\n    --y;\n    --a;\n    --w;\n    --hh;\n    --nj;\n    t_dim1 = *km;\n    t_offset = 1 + t_dim1;\n    t -= t_offset;\n    --rtol;\n    --atol;\n    --icomp;\n    ysafe_dim1 = *km;\n    ysafe_offset = 1 + ysafe_dim1;\n    ysafe -= ysafe_offset;\n    fsafe_dim1 = *lfsafe;\n    fsafe_offset = 1 + fsafe_dim1;\n    fsafe -= fsafe_offset;\n    \n\n    /* Function Body */\n    hj = *h__ / nj[j];\n/* --- EULER STARTING STEP */\n    i__1 = n;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\tyh1[i__] = y[i__];\n/* L30: */\n\tyh2[i__] = y[i__] + hj * dz[i__];\n    }\n/* --- EXPLICIT MIDPOINT RULE */\n    m = nj[j] - 1;\n    njmid = nj[j] / 2;\n    i__1 = m;\n    for (mm = 1; mm <= i__1; ++mm) {\n\tif (*iout >= 2 && mm == njmid) {\n\t    i__2 = *nrd;\n\t    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L31: */\n\t\tysafe[j + i__ * ysafe_dim1] = yh2[icomp[i__]];\n\t    }\n\t}\n\td__1 = *x + hj * mm;\n\t(*fcn)(d__1, &yh2[1], &dy[1], params);\n\tif (*iout >= 2 && (i__2 = mm - njmid, abs(i__2)) <= (j << 1) - 1) {\n\t    ++(*ipt);\n\t    i__2 = *nrd;\n\t    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L32: */\n\t\tfsafe[*ipt + i__ * fsafe_dim1] = dy[icomp[i__]];\n\t    }\n\t}\n\ti__2 = n;\n\tfor (i__ = 1; i__ <= i__2; ++i__) {\n\t    ys = yh1[i__];\n\t    yh1[i__] = yh2[i__];\n/* L34: */\n\t    yh2[i__] = ys + hj * 2. * dy[i__];\n\t}\n\tif (mm <= *mstab && j <= *jstab) {\n/* --- STABILITY CHECK */\n\t    del1 = 0.;\n\t    i__2 = n;\n\t    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L21: */\n/* Computing 2nd power */\n\t\td__1 = dz[i__] / scal[i__];\n\t\tdel1 += d__1 * d__1;\n\t    }\n\t    del2 = 0.;\n\t    i__2 = n;\n\t    for (i__ = 1; i__ <= i__2; ++i__) {\n/* L26: */\n/* Computing 2nd power */\n\t\td__1 = (dy[i__] - dz[i__]) / scal[i__];\n\t\tdel2 += d__1 * d__1;\n\t    }\n\t    quot = del2 / max(*uround,del1);\n\t    if (quot > 4.) {\n\t\t++(*nfcn);\n\t\tgoto L79;\n\t    }\n\t}\n/* L35: */\n    }\n/* --- FINAL SMOOTHING STEP */\n    d__1 = *x + *h__;\n    (*fcn)(d__1, &yh2[1], &dy[1], params);\n    if (*iout >= 2 && njmid <= (j << 1) - 1) {\n\t++(*ipt);\n\ti__1 = *nrd;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n/* L39: */\n\t    fsafe[*ipt + i__ * fsafe_dim1] = dy[icomp[i__]];\n\t}\n    }\n    i__1 = n;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n/* L40: */\n\tt[j + i__ * t_dim1] = (yh1[i__] + yh2[i__] + hj * dy[i__]) / 2.;\n    }\n    *nfcn += nj[j];\n/* --- POLYNOMIAL EXTRAPOLATION */\n    if (j == 1) {\n\treturn 0;\n    }\n    dblenj = (doublereal) nj[j];\n    for (l = j; l >= 2; --l) {\n/* Computing 2nd power */\n\td__1 = dblenj / nj[l - 1];\n\t*fac = d__1 * d__1 - 1.;\n\ti__1 = n;\n\tfor (i__ = 1; i__ <= i__1; ++i__) {\n\t    t[l - 1 + i__ * t_dim1] = t[l + i__ * t_dim1] + (t[l + i__ * \n\t\t    t_dim1] - t[l - 1 + i__ * t_dim1]) / *fac;\n/* L60: */\n\t}\n    }\n    *err = 0.;\n/* --- SCALING */\n    i__1 = n;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n/* Computing MAX */\n\td__3 = (d__1 = y[i__], abs(d__1)), d__4 = (d__2 = t[i__ * t_dim1 + 1],\n\t\t abs(d__2));\n\tt1i = max(d__3,d__4);\n\tif (*itol == 0) {\n\t    scal[i__] = atol[1] + rtol[1] * t1i;\n\t} else {\n\t    scal[i__] = atol[i__] + rtol[i__] * t1i;\n\t}\n/* L65: */\n/* Computing 2nd power */\n\td__1 = (t[i__ * t_dim1 + 1] - t[i__ * t_dim1 + 2]) / scal[i__];\n\t*err += d__1 * d__1;\n    }\n    *err = sqrt(*err / n);\n    if (*err * *uround >= 1.) {\n\tgoto L79;\n    }\n    if (j > 2 && *err >= *errold) {\n\tgoto L79;\n    }\n/* Computing MAX */\n    d__1 = *err * 4;\n    *errold = max(d__1,1.);\n/* --- COMPUTE OPTIMAL STEPSIZES */\n    expo = 1. / ((j << 1) - 1);\n    facmin = pow(*fac1, expo);\n/* Computing MIN */\n/* Computing MAX */\n    d__5 = *err / *safe1;\n    d__3 = facmin, d__4 = pow(d__5, expo) / *safe2;\n    d__1 = *fac2 / facmin, d__2 = max(d__3,d__4);\n    *fac = min(d__1,d__2);\n    *fac = 1. / *fac;\n/* Computing MIN */\n    d__1 = abs(*h__) * *fac;\n    hh[j] = min(d__1,*hmax);\n    w[j] = a[j] / hh[j];\n    return 0;\nL79:\n    *atov = TRUE_;\n    *h__ *= *safe3;\n    *reject = TRUE_;\n    return 0;\n} /* midex_ */\n\n\n/* Subroutine */ int ok_odex_interp_(integer n, doublereal *y, integer imit)\n{\n    /* System generated locals */\n    integer i__1, i__2;\n\n    /* Local variables */\n    doublereal a[31];\n    integer i__;\n    doublereal y0, y1;\n    integer im;\n    doublereal ph0, ph1, ph2, ph3, yp0, yp1, fac1, fac2, aspl, bspl, ydiff;\n\n/* --- COMPUTES THE COEFFICIENTS OF THE INTERPOLATION FORMULA */\n/* --- BEGIN WITH HERMITE INTERPOLATION */\n    /* Parameter adjustments */\n    --y;\n\n    /* Function Body */\n    i__1 = n;\n    for (i__ = 1; i__ <= i__1; ++i__) {\n\ty0 = y[i__];\n\ty1 = y[(n << 1) + i__];\n\typ0 = y[n + i__];\n\typ1 = y[n * 3 + i__];\n\tydiff = y1 - y0;\n\taspl = -yp1 + ydiff;\n\tbspl = yp0 - ydiff;\n\ty[n + i__] = ydiff;\n\ty[(n << 1) + i__] = aspl;\n\ty[n * 3 + i__] = bspl;\n\tif (imit < 0) {\n\t    goto L100;\n\t}\n/* --- COMPUTE THE DERIVATIVES OF HERMITE AT MIDPOINT */\n\tph0 = (y0 + y1) * .5 + (aspl + bspl) * .125;\n\tph1 = ydiff + (aspl - bspl) * .25;\n\tph2 = -(yp0 - yp1);\n\tph3 = (bspl - aspl) * 6.;\n/* --- COMPUTE THE FURTHER COEFFICIENTS */\n\tif (imit < 1) {\n\t    goto L20;\n\t}\n\ta[1] = (y[n * 5 + i__] - ph1) * 16.;\n\tif (imit < 3) {\n\t    goto L20;\n\t}\n\ta[3] = (y[n * 7 + i__] - ph3 + a[1] * 3) * 16.;\n\tif (imit < 5) {\n\t    goto L20;\n\t}\n\ti__2 = imit;\n\tfor (im = 5; im <= i__2; im += 2) {\n\t    fac1 = im * (im - 1) / 2.;\n\t    fac2 = fac1 * (im - 2) * (im - 3) * 2.;\n/* L10: */\n\t    a[im] = (y[(im + 4) * n + i__] + fac1 * a[im - 2] - fac2 * a[im \n\t\t    - 4]) * 16.;\n\t}\nL20:\n\ta[0] = (y[(n << 2) + i__] - ph0) * 16.;\n\tif (imit < 2) {\n\t    goto L60;\n\t}\n\ta[2] = (y[n * 6 + i__] - ph2 + a[0]) * 16.;\n\tif (imit < 4) {\n\t    goto L60;\n\t}\n\ti__2 = imit;\n\tfor (im = 4; im <= i__2; im += 2) {\n\t    fac1 = im * (im - 1) / 2.;\n\t    fac2 = (doublereal) (im * (im - 1) * (im - 2) * (im - 3));\n/* L30: */\n\t    a[im] = (y[n * (im + 4) + i__] + a[im - 2] * fac1 - a[im - 4] * \n\t\t    fac2) * 16.;\n\t}\nL60:\n\ti__2 = imit;\n\tfor (im = 0; im <= i__2; ++im) {\n/* L70: */\n\t    y[n * (im + 4) + i__] = a[im];\n\t}\nL100:\n\t;\n    }\n    return 0;\n} /* interp_ */\n\n\nok_system** ok_integrate_odex(ok_system* initial, const gsl_vector* times, ok_integrator_options* options,\n        ok_system** bag, int* error) {\n    \n    // Check that the system has been set-up\n    assert(initial->xyz != NULL);\n    // Check input arguments\n    assert(times != NULL);\n    \n    const double startTime = initial->epoch;\n    const int NDIMS = initial->nplanets + 1;\n    \n    // Allocate the return array of snapshots\n    const int SAMPLES = times->size;\n   \n    if (bag == NULL) {\n        bag = (ok_system**) calloc(SAMPLES, sizeof(ok_system*));\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i] = ok_copy_system(initial);\n            bag[i]->epoch = initial->epoch;\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    } else {\n        for (int i = 0; i < SAMPLES; i++) {\n            bag[i]->epoch = initial->epoch;\n            bag[i]->flag = initial->flag;\n            //MATRIX_MEMCPY(bag[i]->elements, initial->elements);\n            //MATRIX_MEMCPY(bag[i]->orbits, initial->orbits);\n            bag[i]->xyz = (bag[i]->xyz != NULL ? bag[i]->xyz : gsl_matrix_alloc(initial->nplanets+1, 7));\n        }\n    }\n    \n    integer DIMENSIONS = NDIMS * 7;\n    \n    int km = 9;\n    integer liwork = 2 * km + 21; \n    integer* iwork = (integer*) calloc(liwork, sizeof(integer));\n    iwork[1] = km;\n    //iwork[6] = 6;\n    //iwork[2] = 5;\n    \n    integer lwork = DIMENSIONS*(km+5) + 5*km + 30;\n    double BUFSIZE = lwork + DIMENSIONS + 1;\n    if (options->buffer == NULL || options->buffer->size < BUFSIZE) {\n        if (options->buffer != NULL)\n            gsl_vector_free(options->buffer);\n        options->buffer = gsl_vector_alloc(BUFSIZE);\n    }\n    \n    memset(options->buffer->data, 0, sizeof(double)*BUFSIZE);\n    double* work = options->buffer->data;\n    \n    double prevTime = startTime;\n    gsl_matrix* prevOrbits = initial->orbits;\n    \n    double h = 0.01;\n    double* xyz = work + lwork;\n    \n    MATRIX_MEMCPY_TOARRAY(xyz, initial->xyz);\n    \n    doublereal relerr = options->rel_acc;\n    doublereal abserr = options->abs_acc;\n    integer itol = 0;\n    integer iout = 0;\n    \n    void* params = (void*) initial;\n    ok_progress progress = options->progress;\n    \n    // Loop through the times vector\n    for (int i = 0; i < SAMPLES; i++) {\n        double time = times->data[i];\n        \n        double fromTime = prevTime;\n        double toTime = time;\n        \n        // Integrate between prevTime and time\n        if (fabs(time - prevTime) > 1e-12) {\n            bool invert = (time - prevTime < 0);\n            \n            if (invert)\n                for (int i = 0; i < NDIMS; i++) {\n                    xyz[i*7 + 4] *= -1;\n                    xyz[i*7 + 5] *= -1;\n                    xyz[i*7 + 6] *= -1;\n                    \n                    fromTime = time;\n                    toTime = prevTime;\n                }\n                \n                \n                integer idid = 1;\n                 \n                ok_odex_(&DIMENSIONS, &ok_force,\n                        &fromTime, xyz, \n                        &toTime, &h,\n                        &relerr, &abserr,\n                        &itol, &iout,\n                        work, &lwork,\n                        iwork, &liwork, &idid,\n                        params);\n                \n                if (invert)\n                for (int i = 0; i < NDIMS; i++) {\n                    xyz[i*7 + 4] *= -1;\n                    xyz[i*7 + 5] *= -1;\n                    xyz[i*7 + 6] *= -1;\n                }\n                \n                if (idid != 1 || (((ok_system*) params)->flag & INTEGRATION_FAILURE_CLOSE_ENCOUNTER) \n                || (((ok_system*) params)->flag & INTEGRATION_FAILURE_CLOSE_ENCOUNTER_STAR)) {\n                    if (i == 0) {\n                        for (int j = 0; j < SAMPLES; j++)\n                            ok_free_system(bag[i]);\n                        free(bag);\n                        free(iwork);\n                        \n                        if (error != NULL) {\n                            *error = INTEGRATION_FAILURE_SMALL_TIMESTEP;\n                        }\n                        \n                        return NULL;\n                    } else {\n                        for (int j = i - 1; j < SAMPLES; j++) {\n                            bag[j]->time = bag[j]->epoch = bag[i]->time;\n                            gsl_matrix_set_all(bag[j]->xyz, INVALID_NUMBER);\n                            gsl_matrix_set_all(bag[j]->orbits, INVALID_NUMBER);\n                        }\n                        \n                        if (error != NULL) {\n                            *error = INTEGRATION_FAILURE_SMALL_TIMESTEP;\n                        }\n                        free(iwork);\n                        return bag;\n                    }\n                }\n            \n        } else {\n            if (i == 0)\n                MATRIX_MEMCPY_TOARRAY(xyz, initial->xyz);\n            else\n                MATRIX_MEMCPY_TOARRAY(xyz, bag[i-1]->xyz);\n        };\n        \n        \n        // Set up the return vector\n        bag[i]->time = bag[i]->epoch = time;\n       \n        MATRIX_MEMCPY_FROMARRAY(bag[i]->xyz, xyz);\n        if (options == NULL || options->calc_elements) {\n                MATRIX_MEMCPY(bag[i]->orbits, prevOrbits);\n                ok_cart2el(bag[i], bag[i]->orbits, true);\n        }\n        prevOrbits = bag[i]->orbits;\n        \n        \n        // Ensures that the force/jacobian routines are passed the most recent state of\n        // the system\n        \n        prevTime = time;\n        params = bag[i];\n        \n        if (progress != NULL) {\n            int ret = progress(i, SAMPLES, NULL, \"\");\n            \n            if (ret == PROGRESS_STOP) {\n                for (int i = 0; i < SAMPLES; i++)\n                        ok_free_system(bag[i]);\n                \n                free(bag);\n                free(iwork);\n                \n                if (error != NULL) {\n                    *error = INTEGRATION_FAILURE_STOPPED;\n                }\n                return NULL;\n            }\n        }\n    }\n    \n    free(iwork);\n    return bag;\n}","#include \"periodogram.h\"\n#include \"stdint.h\"\n#include \"utils.h\"\n#include \"math.h\"\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n#include \"kernel.h\"\n#include \"gsl/gsl_statistics.h\"\n#include \"gsl/gsl_math.h\"\n#include \"gsl/gsl_sort.h\"\n#include \"gsl/gsl_roots.h\"\n\n#define BUF_SDF 0\n#define BUF_CDF 1\n#define BUF_C 2\n#define BUF_S 3\n#define BUF_SIG 4\n\n#define SDF(j) (MGET(buf, j, BUF_SDF))\n#define CDF(j) (MGET(buf, j, BUF_CDF))\n#define S(j) (MGET(buf, j, BUF_S))\n#define C(j) (MGET(buf, j, BUF_C))\n#define SIG(j) (MGET(buf, j, BUF_SIG))\n\ndouble _baluev_tau(double z_1, void* params) {\n    double* p = (double*) params;\n    double ndata = p[0];\n    double W = p[1];\n    double target = p[2];\n    double fap_single = pow(1.-2.*z_1/(double)ndata, 0.5*(double)(ndata - 2.));\n    return W * fap_single * sqrt(z_1) - target;\n}\n\ndouble _find_z(gsl_root_fsolver* s, gsl_function* F, double target, double x_lo, double x_hi) {\n    ((double*)F->params)[2] = target;\n    gsl_root_fsolver_set(s, F, x_lo, x_hi);\n    \n    \n    int status = GSL_SUCCESS;\n    do {\n        if (gsl_root_fsolver_iterate(s) != GSL_SUCCESS)\n            return INVALID_NUMBER;\n        x_lo = gsl_root_fsolver_x_lower(s);\n        x_hi = gsl_root_fsolver_x_upper(s);\n        \n        status = gsl_root_test_interval(x_lo, x_hi, 1e-5, 1e-3);\n    } while (status == GSL_CONTINUE);\n    return 0.5*(x_lo + x_hi);\n}\n\n/**\n * Computes the Lomb-Scargle periodogram of the matrix \"data\". \"data\" should contain at least three\n * columns: time, measurement and measurement error. The periodogram is calculated in \"samples\" intervals\n * between \"Pmin\" and \"Pmax\", spaced logarithmically. \n * \n * The function returns a matrix of \"samples\" rows and several columns, including period, power (z) and \n * an estimation of the upper bound for the false alarm probability. The estimation is calculated using \n * the method of Baluev, 2008 (Baluev08). The column PS_Z_LS contains the unnormalized LS periodogram \n * (z = 1/2 * (Chi^2_0 - Chi^2_SC)), while the column PS_Z contains z_1 = 1/2 * N_H * z / Chi^2_0 (z_1 in Baluev08). \n * The FAP upper bound is estimated as ~ tau(z_1). (Another estimate of the FAP can be calculated by \n * estimating the indep. frequencies through your own algorithm, or using the ok_periodogram_boot routine.)\n * \n * @param data Input data containing the data; each row containing (t_i, x_i, sigma_i)\n * @param samples Number of frequencies sampled\n * @param Pmin Minimum period sampled\n * @param Pmax Maximum period sampled\n * @param method Method to compute periodogram (ignored)\n * @param timecol Time column (e.g. 0) in the matrix data\n * @param valcol Value column (e.g. 1) in the matrix data\n * @param sigmacol Sigma column (e.g. 2) in the matrix data\n * @param p If not NULL, it is used to return additional info for the periodogram and reuse matrices to save space/speed. If you pass\n * a value different than NULL, you are responsible for deallocating the workspace and its fields. p->buf is an array of\n * gsl_matrix*, sized the same as the value of omp_get_max_threads().\n * @return A matrix containing: {PS_TIME, PS_Z, PS_FAP, PS_Z_LS} (period, power, FAP upper limit, unnormalized\n * LS power). You are responsible for deallocating it.\n */\ngsl_matrix* ok_periodogram_ls(const gsl_matrix* data, const unsigned int samples, const double Pmin, const double Pmax, const int method,\n        unsigned int timecol, unsigned int valcol, unsigned int sigcol, ok_periodogram_workspace* p) {\n    \n    gsl_matrix* ret = NULL;\n    gsl_matrix* buf = NULL;\n    gsl_vector* bufv = gsl_vector_alloc(data->size1);\n    \n    int ndata = data->size1;\n    \n    // If no pre-allocated buffers are passed through p, or p is null,\n    // allocate those buffers.\n    if (p != NULL) {\n        if (p->per != NULL && MROWS(p->per) == samples && MCOLS(p->per) == PS_SIZE)\n            ret = p->per;\n        if (p->buf != NULL && MROWS(p->buf) == ndata && MCOLS(p->per) == 5)\n            ret = p->buf;\n    }\n    \n    ret = (ret != NULL ? ret : gsl_matrix_alloc(samples, PS_SIZE));\n    buf = (buf != NULL ? buf : gsl_matrix_alloc(ndata, 5));\n    \n    double fmin = 1./Pmax;\n    double fmax = 1./Pmin;\n    double df = (fmax-fmin)/(double) samples;\n   \n    \n    gsl_matrix_get_col(bufv, data, timecol);\n    double W = 2.*M_PI*gsl_stats_sd(bufv->data, 1, ndata)/Pmin;\n    gsl_matrix_get_col(bufv, data, valcol);\n    double avg = gsl_stats_mean(bufv->data, 1, ndata);\n    double z1_max = 0.;\n    double xa[ndata];\n    \n    // pre-calculate cdf, sdf\n    for (int i = 0; i < ndata; i++) {\n        double t = MGET(data, i, timecol) - MGET(data, 0, timecol);\n        MSET(buf, i, BUF_CDF, cos(2*M_PI*df*t));\n        MSET(buf, i, BUF_SDF, sin(2*M_PI*df*t));\n        MSET(buf, i, BUF_C, cos(2*M_PI*fmin*t));\n        MSET(buf, i, BUF_S, sin(2*M_PI*fmin*t));\n        MSET(buf, i, BUF_SIG, 1./(MGET(data, i, sigcol) * MGET(data, i, sigcol)));\n        xa[i] = MGET(data, i, valcol) - avg;\n    }\n    \n    // Calculate periodogram by looping over all angular frequencies\n    for (int i = 0; i < samples; i++) {\n        // Current frequency\n        double f = fmin + df * i;\n        \n        \n        double w = 2*M_PI*f;\n        \n        // Calculate tau(w)\n        double s_2wt = 0.;\n        double c_2wt = 0.;\n        \n        for (int j = 0; j < ndata; j++) {\n            double cos_wt = C(j);\n            double sin_wt = S(j);\n            c_2wt += (1. - 2. * sin_wt * sin_wt) * SIG(j);\n            s_2wt += (2. * sin_wt * cos_wt) * SIG(j);\n        }\n        \n        double tau = atan2(s_2wt, c_2wt) / (2.*w);\n        double numa = 0.;\n        double numb = 0.;\n        double dena = 0.;\n        double denb = 0.;\n        double numa_w = 0.;\n        double numb_w = 0.;\n        double dena_w = 0.;\n        double denb_w = 0.;\n        \n        double coswtau = cos(w*tau);\n        double sinwtau = sin(w*tau);\n        double chi2_h = 0.;\n        double chi2_h_w = 0;\n        \n        for (int j = 0; j < ndata; j++) {\n            \n            double sig = SIG(j);\n            \n            const double cos_wt = C(j);\n            const double sin_wt = S(j);\n            \n            double cos_wdf = CDF(j);\n            double sin_wdf = SDF(j);\n            \n            double c = cos_wt * coswtau + sin_wt * sinwtau;\n            double s = sin_wt * coswtau - cos_wt * sinwtau;\n            double x = xa[j];\n            \n            MSET(buf, j, BUF_C, cos_wt*cos_wdf - sin_wt*sin_wdf);\n            MSET(buf, j, BUF_S, sin_wt*cos_wdf + cos_wt*sin_wdf);\n            \n            numa += x * c * sig;\n            numb += x * s * sig;\n            dena += c * c * sig;\n            denb += s * s * sig;\n            chi2_h += x*x * sig;\n            \n            numa_w += c * sig;\n            numb_w += s * sig;\n            dena_w += c*c * sig;\n            denb_w += s*s * sig;\n            \n            chi2_h_w += sig;\n        }\n        \n        \n        double z = 0.5 * (numa*numa/dena + numb*numb/denb);\n        double z_1 = z * ndata / chi2_h;\n        \n        double fap_single = pow(1.-2.*z_1/(double)ndata, 0.5*(double)(ndata - 3.));\n        double tau_z = W * fap_single * sqrt(z_1);\n        \n        MSET(ret, samples-i-1, PS_TIME, 1./f);\n        MSET(ret, samples-i-1, PS_Z, z_1);\n        MSET(ret, samples-i-1, PS_Z_LS, z);\n        MSET(ret, samples-i-1, PS_FAP, MIN(fap_single + tau_z, 1.));\n        MSET(ret, samples-i-1, PS_TAU, tau);\n        MSET(ret, samples-i-1, PS_WIN, 0.5 * (numa_w * numa_w / dena_w + numb_w * numb_w / denb_w) * ndata / chi2_h_w);\n        \n        z1_max = MAX(z1_max, z_1);\n    }\n    \n    if (p != NULL && p->calc_z_fap) {\n        gsl_root_fsolver * s = gsl_root_fsolver_alloc (gsl_root_fsolver_brent);\n        double pars[3];\n        pars[0] = ndata;\n        pars[1] = W;\n        pars[2] = 0.;\n        \n        gsl_function F;\n        F.function = _baluev_tau;\n        F.params = pars;\n        \n        double zz = z1_max;\n        while (_baluev_tau(zz, pars) > 1e-3)\n            zz *= 2;\n        \n        p->z_fap_3 = _find_z(s, &F, 1e-3, 0.1, zz);\n        p->z_fap_2 = _find_z(s, &F, 1e-2, 0.1, p->z_fap_3);\n        p->z_fap_1 = _find_z(s, &F, 1e-1, 0.1, p->z_fap_2);\n        \n        \n        gsl_root_fsolver_free(s);\n        p->calc_z_fap = false;\n    }\n\n    if (p == NULL) {\n        gsl_matrix_free(buf);\n    } else {\n        p->per = ret;\n        p->buf = buf;\n        p->zmax = z1_max;\n    };\n    \n    gsl_vector_free(bufv);\n    \n    return ret;\n}\n\ndouble _kminimize(ok_kernel* k, int algo) {\n    K_calculate(k);\n    \n    double chi2 = K_getChi2_nr(k);\n    while (true) {\n        K_minimize(k, algo, 10000, NULL);\n        \n        if (K_getChi2_nr(k) - chi2 < -0.01)\n            chi2 = K_getChi2_nr(k);\n        else\n            break;\n    }\n    \n    return K_getChi2_nr(k);\n}\n\ngsl_matrix* ok_periodogram_full(ok_kernel* k, int type, int algo, bool circular, unsigned int sample,\n        const unsigned int samples, const double Pmin, const double Pmax) {\n    \n    k = K_clone(k);    \n    K_calculate(k);\n    \n    // Input data for LS periodogram\n    gsl_matrix* data = ok_buf_to_matrix(K_compileData(k), K_getNdata(k), DATA_SIZE);\n    \n    \n    if (type == PS_TYPE_RESIDUALS) {\n        // If residuals periodogram, subtract signal from data\n        for (int i = 0; i < data->size1; i++)\n            MSET(data, i, T_SVAL, MGET(data, i, T_SVAL)-MGET(data, i, T_PRED));\n    } else if (type == PS_TYPE_DATA) {\n        // If full periodogram, then start with no planets\n        K_removePlanet(k, -1);\n    }\n    \n    // Calculate LS periodogram\n    gsl_matrix* ret = ok_periodogram_ls(data, samples, Pmin, Pmax, 0, T_TIME, T_SVAL, T_ERR, NULL);\n    int np = K_getNplanets(k) + 1;\n    \n    // Number of minimizable offsets\n    int no = 0;\n    for (int i = 0; i < DATA_SETS_SIZE; i++)\n        if (VIGET(k->parFlags, i) & MINIMIZE) {\n            no++;\n        }\n    \n    // Calculate baseline chi^2 (Chi^2_H)\n    \n    double Chi2_H = _kminimize(k, algo);\n    \n    // Normalizing factor for power\n    double nd = 0.5*(K_getNdata(k) - no);\n    \n    \n    \n    #pragma omp parallel for\n    for (int r = 0; r < samples; r++) {\n        double P = MGET(ret, r, PS_TIME);\n        double K = sqrt(MGET(ret, r, PS_Z));\n        \n        ok_kernel* k2 = K_clone(k);\n        K_calculate(k2);\n        \n        double args[] = { PER, P, DONE};\n        K_addPlanet(k2, args);\n        K_setElement(k2, np, SEMIAMP, K);\n        \n        K_setElementFlag(k2, np, PER, ACTIVE);\n        \n        if (circular) {\n            K_setElementFlag(k2, np, ECC, ACTIVE);\n            K_setElementFlag(k2, np, LOP, ACTIVE);\n        }\n        \n        double Chi2_K = _kminimize(k2, algo);\n        \n        double z = nd * (Chi2_H - Chi2_K)/Chi2_H;\n        MSET(ret, r, PS_Z, z);\n        printf(\"%d %e %e %e %e\\n\", r, P, Chi2_H, Chi2_K, z);\n        fflush(stdout);\n    }\n        \n    printf(\"\\n\");\n    return ret;\n\n}\n    \n\n/**\n * Estimates the FAP by Monte Carlo bootstrapping of the original data. \"trials\" bootstrapped data sets are\n * generated using the random number generator \"rng\"; for each data set, the routine ok_periodogram_ls estimates\n * z_max, which is collected into an array and returned into \"zmax\". Bootstrapped datasets are built by selecting\n * with replacement from the input dataset, keeping times of observation fixed. \n * @param data Input matrix containing the data; each row containing (t_i, x_i, sigma_i)\n * @param trials Number of bootstrap trials\n * @param samples Number of frequencies sampled\n * @param Pmin Minimum period sampled\n * @param Pmax Maximum period sampled\n * @param method Method used to compute periodogram (ignored)\n * @param timecol Time column (e.g. 0) in the matrix data\n * @param valcol Value column (e.g. 1) in the matrix data\n * @param sigmacol Sigma column (e.g. 2) in the matrix data\n * @param rng A pre-allocated random number generator\n * @param p If specified, returns additional info for the periodogram and reuses matrices to save space/speed. If you pass\n * a value different than NULL, you are responsible for deallocating the workspace and its fields. p->zm returns a sorted\n * vector of the maximum powers in each synthetic trial.\n * @param prog An ok_progress* callback; if different from NULL, can be used to stop or report progress.\n * @return A matrix containing: {PS_TIME, PS_Z, PS_FAP, PS_Z_LS} (period, power, bootstrapped FAP, unnormalized\n * LS power). You are responsible for deallocating it.\n\n */\ngsl_matrix* ok_periodogram_boot(const gsl_matrix* data, const unsigned int trials, const unsigned int samples, \n        const double Pmin, const double Pmax, const int method,\n        const unsigned int timecol, const unsigned int valcol, const unsigned int sigcol,\n        const unsigned long int seed, ok_periodogram_workspace* p, ok_progress prog) {\n    \n    \n    int nthreads = omp_get_max_threads();\n    \n    ok_periodogram_workspace* w[nthreads];\n    gsl_matrix* mock[nthreads]; \n    gsl_rng* rng[nthreads];\n    \n    rng[0] = gsl_rng_alloc(gsl_rng_default);\n    gsl_rng_set(rng[0], seed);\n    \n    for (int i = 0; i < nthreads; i++) {\n        w[i] = (ok_periodogram_workspace*) malloc(sizeof(ok_periodogram_workspace));\n        w[i]->per = NULL;\n        w[i]->buf = NULL;\n        mock[i] = ok_matrix_copy(data);\n        if (i > 0) {\n            rng[i] = gsl_rng_alloc(gsl_rng_default);\n            gsl_rng_set(rng[i], gsl_rng_get(rng[0]));\n        }\n    }\n    \n    gsl_matrix* ret = ok_matrix_copy(ok_periodogram_ls(data, samples, Pmin, Pmax, method, timecol, valcol, sigcol, NULL));\n    \n    gsl_vector* zmax = (p != NULL && p->zm != NULL ? p->zm : gsl_vector_alloc(trials));\n    \n    bool abort = false;\n    #pragma omp parallel for\n    for (int i = 0; i < trials; i++) {\n        if (! abort) {\n            int nt = omp_get_thread_num();\n\n            ok_bootstrap_matrix_mean(data, T_TIME, T_VAL, mock[nt], rng[nt]);\n            ok_periodogram_ls(mock[nt], samples, Pmin, Pmax, method, timecol, valcol, sigcol, w[nt]);\n            zmax->data[i] = w[nt]->zmax;\n\n            if (nt == 0 && prog != NULL) {\n                int ret = prog(i * nthreads, trials, NULL,\n                        \"ok_periodogram_boot\");\n                if (ret == PROGRESS_STOP) {\n                    abort = true;\n                    #pragma omp flush (abort)\n                }\n            }\n        }\n    }\n    \n    gsl_sort(zmax->data, 1, trials);\n    \n    for (int i = 0; i < ret->size1; i++) {\n        if (MGET(ret, i, PS_Z) > zmax->data[trials-1])\n            MSET(ret, i, PS_FAP, 1./(double) trials);\n        else if (MGET(ret, i, PS_Z) < zmax->data[0])\n            MSET(ret, i, PS_FAP, 1.);\n        else {\n            int idx = ok_bsearch(zmax->data, MGET(ret, i, PS_Z), trials);\n            MSET(ret, i, PS_FAP, (double)(trials-idx)/(double) trials);\n        }\n    } \n    \n    \n    \n    for (int i = 0; i < nthreads; i++) {\n        gsl_matrix_free(w[i]->buf);\n        gsl_matrix_free(w[i]->per);\n        free(w[i]);\n        gsl_matrix_free(mock[i]);\n        gsl_rng_free(rng[i]);\n    }\n    \n    if (p != NULL) {\n        if (p->zm != NULL)\n            gsl_vector_free(zmax);\n    }\n    return ret;\n}\n","/*-\n * Copyright (c) 1992, 1993\n *\tThe Regents of the University of California.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *\tThis product includes software developed by the University of\n *\tCalifornia, Berkeley and its contributors.\n * 4. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n#define I_AM_QSORT_R\n#define qsort_r ok_qsort_r\n\n#if defined(LIBC_SCCS) && !defined(lint)\nstatic char sccsid[] = \"@(#)qsort.c\t8.1 (Berkeley) 6/4/93\";\n#endif /* LIBC_SCCS and not lint */\n//#include <sys/cdefs.h>\n//__FBSDID(\"$FreeBSD: src/lib/libc/stdlib/qsort.c,v 1.12 2002/09/10 02:04:49 wollman Exp $\");\n\n#include <stdlib.h>\n\n#ifdef I_AM_QSORT_R\ntypedef int\t\t cmp_t(void *, const void *, const void *);\n#else\ntypedef int\t\t cmp_t(const void *, const void *);\n#endif\nstatic inline char\t*med3(char *, char *, char *, cmp_t *, void *);\nstatic inline void\t swapfunc(char *, char *, int, int);\n\n#define min(a, b)\t(a) < (b) ? a : b\n\n/*\n * Qsort routine from Bentley & McIlroy's \"Engineering a Sort Function\".\n */\n#define swapcode(TYPE, parmi, parmj, n) { \t\t\\\n\tlong i = (n) / sizeof (TYPE); \t\t\t\\\n\tTYPE *pi = (TYPE *) (parmi); \t\t\\\n\tTYPE *pj = (TYPE *) (parmj); \t\t\\\n\tdo { \t\t\t\t\t\t\\\n\t\tTYPE\tt = *pi;\t\t\\\n\t\t*pi++ = *pj;\t\t\t\t\\\n\t\t*pj++ = t;\t\t\t\t\\\n        } while (--i > 0);\t\t\t\t\\\n}\n\n#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \\\n\tes % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;\n\nstatic inline void\nswapfunc(a, b, n, swaptype)\n\tchar *a, *b;\n\tint n, swaptype;\n{\n\tif(swaptype <= 1)\n\t\tswapcode(long, a, b, n)\n\telse\n\t\tswapcode(char, a, b, n)\n}\n\n#define swap(a, b)\t\t\t\t\t\\\n\tif (swaptype == 0) {\t\t\t\t\\\n\t\tlong t = *(long *)(a);\t\t\t\\\n\t\t*(long *)(a) = *(long *)(b);\t\t\\\n\t\t*(long *)(b) = t;\t\t\t\\\n\t} else\t\t\t\t\t\t\\\n\t\tswapfunc(a, b, es, swaptype)\n\n#define vecswap(a, b, n) \tif ((n) > 0) swapfunc(a, b, n, swaptype)\n\n#ifdef I_AM_QSORT_R\n#define\tCMP(t, x, y) (cmp((t), (x), (y)))\n#else\n#define\tCMP(t, x, y) (cmp((x), (y)))\n#endif\n\nstatic inline char *\nmed3(char *a, char *b, char *c, cmp_t *cmp, void *thunk\n#ifndef I_AM_QSORT_R\n__unused\n#endif\n)\n{\n\treturn CMP(thunk, a, b) < 0 ?\n\t       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a ))\n              :(CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c ));\n}\n\n#ifdef I_AM_QSORT_R\nvoid\nqsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)\n#else\n#define thunk NULL\nvoid\nqsort(void *a, size_t n, size_t es, cmp_t *cmp)\n#endif\n{\n\tchar *pa, *pb, *pc, *pd, *pl, *pm, *pn;\n\tint d, r, swaptype, swap_cnt;\n\nloop:\tSWAPINIT(a, es);\n\tswap_cnt = 0;\n\tif (n < 7) {\n\t\tfor (pm = (char *)a + es; pm < (char *)a + n * es; pm += es)\n\t\t\tfor (pl = pm; \n\t\t\t     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;\n\t\t\t     pl -= es)\n\t\t\t\tswap(pl, pl - es);\n\t\treturn;\n\t}\n\tpm = (char *)a + (n / 2) * es;\n\tif (n > 7) {\n\t\tpl = a;\n\t\tpn = (char *)a + (n - 1) * es;\n\t\tif (n > 40) {\n\t\t\td = (n / 8) * es;\n\t\t\tpl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);\n\t\t\tpm = med3(pm - d, pm, pm + d, cmp, thunk);\n\t\t\tpn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);\n\t\t}\n\t\tpm = med3(pl, pm, pn, cmp, thunk);\n\t}\n\tswap(a, pm);\n\tpa = pb = (char *)a + es;\n\n\tpc = pd = (char *)a + (n - 1) * es;\n\tfor (;;) {\n\t\twhile (pb <= pc && (r = CMP(thunk, pb, a)) <= 0) {\n\t\t\tif (r == 0) {\n\t\t\t\tswap_cnt = 1;\n\t\t\t\tswap(pa, pb);\n\t\t\t\tpa += es;\n\t\t\t}\n\t\t\tpb += es;\n\t\t}\n\t\twhile (pb <= pc && (r = CMP(thunk, pc, a)) >= 0) {\n\t\t\tif (r == 0) {\n\t\t\t\tswap_cnt = 1;\n\t\t\t\tswap(pc, pd);\n\t\t\t\tpd -= es;\n\t\t\t}\n\t\t\tpc -= es;\n\t\t}\n\t\tif (pb > pc)\n\t\t\tbreak;\n\t\tswap(pb, pc);\n\t\tswap_cnt = 1;\n\t\tpb += es;\n\t\tpc -= es;\n\t}\n\tif (swap_cnt == 0) {  /* Switch to insertion sort */\n\t\tfor (pm = (char *)a + es; pm < (char *)a + n * es; pm += es)\n\t\t\tfor (pl = pm; \n\t\t\t     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;\n\t\t\t     pl -= es)\n\t\t\t\tswap(pl, pl - es);\n\t\treturn;\n\t}\n\n\tpn = (char *)a + n * es;\n\tr = min(pa - (char *)a, pb - pa);\n\tvecswap(a, pb - r, r);\n\tr = min(pd - pc, pn - pd - es);\n\tvecswap(pb, pn - r, r);\n\tif ((r = pb - pa) > es)\n#ifdef I_AM_QSORT_R\n\t\tqsort_r(a, r / es, es, thunk, cmp);\n#else\n\t\tqsort(a, r / es, es, cmp);\n#endif\n\tif ((r = pd - pc) > es) {\n\t\t/* Iterate rather than recurse to save stack space */\n\t\ta = pn - r;\n\t\tn = r / es;\n\t\tgoto loop;\n\t}\n/*\t\tqsort(pn - r, r / es, es, cmp);*/\n}","#include <gsl/gsl_randist.h>\n#ifndef JAVASCRIPT\n#include \"omp.h\"\n#else\n#include \"omp_shim.h\"\n#endif\n\n#include \"math.h\"\n#include \"utils.h\"\n#include \"kernel.h\"\n\n\ndouble* K_minimize_sa_iter(ok_kernel* k2, const int N, const double T_0, const double alpha,\n    const double* steps, double* best_chi, int* stop) {\n    \n    ok_kernel* k = K_clone(k2);\n    ok_kernel_minimizer_pars mpars = K_getMinimizedVariables(k);\n    double** pars = mpars.pars;\n    int npars = mpars.npars;\n    \n    double* best_pars = (double*) malloc(sizeof(double) * npars);\n    \n    double old_pars[npars];\n    K_calculate(k);\n    \n    double E = k->minfunc(k);\n    double E_best = E;\n    \n    int n = 0;\n    while (n < N) {\n        double T = T_0 * pow(1-(double)n/(double) N, alpha);\n        \n        for (int i = 0; i < npars; i++) {\n            old_pars[i] = *(pars[i]);\n            *(pars[i]) += gsl_ran_gaussian(k->rng, steps[i]);\n        }\n        \n        k->flags |= NEEDS_SETUP;\n        K_calculate(k);\n        \n        if (k->minfunc(k) < E_best) {\n            E_best = E;\n            for (int i = 0; i < npars; i++)\n                best_pars[i] = *(pars[i]);\n        }\n        \n        if (*stop == PROGRESS_STOP) \n            break;\n        if (omp_get_thread_num() == 0 && k2->progress != NULL) {\n            *stop = k2->progress(n, N, k,\n                    \"K_sa\");\n        }\n        \n        printf(\"%d %e %e\\n\", n, T, E_best);\n        \n        if (k->minfunc(k) < E) {\n            E = k->minfunc(k);\n            n++;\n            continue;\n        }\n        else {\n            double P = exp(-fabs(k->minfunc(k)-E)/T);\n            \n            if (gsl_rng_uniform(k->rng) < P) {\n                n++;\n                E = k->minfunc(k);\n            } else {\n                for (int i = 0; i < npars; i++) {\n                    *(pars[i]) = old_pars[i];\n                }\n                continue;\n            }\n        }\n        \n        \n        \n        \n    }\n    \n    FREE_MINIMIZER_PARS(mpars);\n    \n    K_free(k);\n    \n    *best_chi = E_best;\n    \n    return best_pars;\n}\n\nint K_minimize_sa(ok_kernel* k, int trials, double params[]) {\n    int status = PROGRESS_CONTINUE;\n    K_calculate(k);\n    double alpha = 2.;\n    double T_0 =  k->minfunc(k);\n    bool auto_step = true;\n    int chains = omp_get_max_threads();\n    \n    ok_kernel_minimizer_pars mpars = K_getMinimizedVariables(k);\n    \n    int idx = 0;\n    while (params != NULL) {\n        if (params[idx] == DONE)\n            break;\n        else if (params[idx] == OPT_SA_T0)\n            T_0 = params[idx+1];\n        else if (params[idx] == OPT_SA_ALPHA)\n            alpha = params[idx+1];\n        else if (params[idx] == OPT_SA_CHAINS)\n            chains = (int) params[idx+1];\n        else if (params[idx] == OPT_SA_AUTO_STEPS)\n            auto_step = ((int) params[idx+1] != 0);\n        \n        idx+=2;\n    }\n    \n    double* best_pars[chains];\n    double best_chi[chains];\n    \n    \n    double chi = K_getChi2(k);\n    if (auto_step) {\n        for (int i = 0; i < mpars.npars; i++) {\n            double p = *(mpars.pars[i]);\n            double dchi;\n            \n            do {\n                *(mpars.pars[i]) += mpars.steps[i];\n                k->flags |= NEEDS_SETUP;\n                K_calculate(k);\n                dchi = fabs(chi - k->minfunc(k));\n                mpars.steps[i] = 0.5 * mpars.steps[i] * (1 + 0.1*T_0/dchi);\n                *(mpars.pars[i]) = p;       \n            } while (fabs(dchi-0.1*T_0)/(0.1*T_0) > 0.1);\n            printf(\"%d %e\\n\", i, mpars.steps[i]);\n        }\n    }\n    \n    #pragma omp parallel for\n    for (int ch = 0; ch < chains; ch++) {\n        best_pars[ch] = K_minimize_sa_iter(k, trials, T_0, alpha,\n                mpars.steps,\n                &(best_chi[ch]), &status);        \n    }\n    \n    for (int ch = 1; ch < chains; ch++) {\n        if (best_chi[ch] < best_chi[0]) {\n            best_chi[0] = best_chi[ch];\n            memcpy(best_pars[0], best_pars[ch], mpars.npars * sizeof(double));\n        }\n        free(best_pars[ch]);\n    }\n    \n    for (int i = 0; i < mpars.npars; i++) {\n        *(mpars.pars[i]) = best_pars[0][i];\n    }\n    \n    free(best_pars[0]);\n    FREE_MINIMIZER_PARS(mpars);\n    \n    K_calculate(k);\n    return status;\n}","#include \"math.h\"\n#include \"gsl/gsl_multimin.h\"\n#include \"gsl/gsl_vector.h\"\n#include \"utils.h\"\n#include \"kernel.h\"\n\ntypedef struct  {\n    ok_kernel* k;\n    double** pars;\n} ok_simplex_params;\n\ndouble K_simplex_f(const gsl_vector* cur, void* params) {\n    ok_simplex_params* sp = (ok_simplex_params*) params;\n    \n    ok_kernel* k = sp->k;\n    double** pars = sp->pars;\n    \n    for (int i = 0; i < cur->size; i++)\n        *(pars[i]) = cur->data[i];\n    \n    k->flags |= NEEDS_SETUP;\n    K_calculate(k);\n    double res = k->minfunc(k);\n    \n    return res;\n}\n\nint K_minimize_simplex_iter(ok_kernel* k, int maxiter, double params[]) {\n    double eps = 1e-8;\n    \n    int i = 0;\n    if (params != NULL) {\n        while (true) {\n            if (params[i] == DONE)\n                break;\n            else if (round(params[i]) == OPT_EPS)\n                eps = params[i+1];\n            i+=2;\n        }\n    }\n    int npars = 0;\n    \n    // Count all the parameters to minimize on\n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            npars += (MIGET(k->plFlags, i, j) & MINIMIZE ? 1 : 0);\n    for (int i = 0; i < k->parFlags->size; i++)\n        npars += (VIGET(k->parFlags, i) & MINIMIZE ? 1 : 0);\n\n    if (npars == 0)\n        return 0;\n    \n    // Create a pointer table (flat array -> matrices)\n    double** pars = (double**) malloc(sizeof(double*) * npars);\n    \n    int idx = 0;\n    gsl_vector* x = gsl_vector_alloc(npars);\n    gsl_vector* step = gsl_vector_alloc(npars);\n    \n    for (int i = 1; i < k->system->nplanets + 1; i++)\n        for (int j = 0; j < ELEMENTS_SIZE; j++)\n            if (MIGET(k->plFlags, i, j) & MINIMIZE) {\n                \n                pars[idx] = gsl_matrix_ptr(k->system->elements, i, j);\n                \n                x->data[idx] = MGET(k->system->elements, i, j);\n                if ((j == PER) || (j == MASS))\n                    step->data[idx] = MAX(MGET(k->plSteps, i, j), MGET(k->plSteps, i, j) * x->data[idx]);\n                else\n                    step->data[idx] = MGET(k->plSteps, i, j);\n                \n                \n                if (step->data[idx] < 1e-10)\n                    printf(\"Warning: step for element %d of planet %d is <= 0\\n\", j, i);\n            \n                idx++;\n            }\n\n    for (int i = 0; i < k->parFlags->size; i++)\n        if (VIGET(k->parFlags, i) & MINIMIZE) {\n            pars[idx] = gsl_vector_ptr(k->params, i);\n            x->data[idx] = VGET(k->params, i);\n            step->data[idx] = VGET(k->parSteps, i);\n            \n            if (step->data[idx] < 1e-10)\n                printf(\"Warning: step for parameter %d is <= 0\\n\", i);\n            \n            idx++;\n        }\n        \n    \n    ok_simplex_params sp;\n    sp.k = k;\n    sp.pars = pars;\n    \n    // Initialize minimizer\n    gsl_multimin_fminimizer* s = gsl_multimin_fminimizer_alloc(gsl_multimin_fminimizer_nmsimplex2,\n                npars);\n    gsl_multimin_function f;\n    f.n = npars;\n    f.f = K_simplex_f;\n    f.params = &sp;\n    \n    gsl_multimin_fminimizer_set(s, &f, x, step);\n    \n    \n    int iter = 0;\n    int status;\n    \n    // Loop until the desired eps (the size of the simplex) is reached.\n    \n    ok_progress pr = k->progress;\n    const int every = (k->intMethod == 0 ? 30 : 1);\n    \n    do {\n        iter++;\n        status = gsl_multimin_fminimizer_iterate(s);\n        \n        if (status)\n            break;\n        double size = gsl_multimin_fminimizer_size(s);\n        status = gsl_multimin_test_size(size, eps);\n        if (status == GSL_SUCCESS)\n            break;\n        \n        if (pr != NULL && iter % every == 0) {\n            k->chi2 = k->minfunc(k);\n            if (pr(iter, maxiter, k, __func__) != PROGRESS_CONTINUE) {\n                status = PROGRESS_STOP;\n                break;\n            }\n        }\n    } while (iter < maxiter);\n    \n    K_calculate(k);\n    gsl_multimin_fminimizer_free(s);\n    free(pars);\n    gsl_vector_free(step);\n    gsl_vector_free(x);\n    return status;\n}\n\nint K_minimize_simplex(ok_kernel* k, int maxiter, double params[]) {\n    double dchi = 1e10;\n    int status = PROGRESS_CONTINUE;\n    int iter = 0;\n    while (dchi > 1e-3 && status != PROGRESS_STOP) {\n        double chi = k->minfunc(k);\n        status = K_minimize_simplex_iter(k, maxiter, params);\n        dchi = chi - k->minfunc(k);\n        iter++;\n    }\n    return status;\n}","//\n//  utils.c\n//  Systemic Console\n//\n//\n\n#include <gsl/gsl_matrix_double.h>\n#include <gsl/gsl_statistics.h>\n#include <gsl/gsl_sort.h>\n#include <gsl/gsl_vector.h>\n#include <gsl/gsl_sort_vector.h>\n#include \"systemic.h\"\n#include \"utils.h\"\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n#include \"assert.h\"\n#include \"kernel.h\"\n#include \"time.h\"\n\ndouble DEGRANGE(double angle) {\n    return (fmod((angle < 0. ? angle + (floor(-angle/360.) + 1.) * 360. : angle), 360.));\n}\n\ndouble RADRANGE(double angle) {\n    return (fmod((angle < 0. ? angle + (floor(-angle/TWOPI) + 1.) * TWOPI : angle), TWOPI));\n}\n\ndouble ok_average_angle(const double* v, const int length, const bool isRadians) {\n    \n    double cos_avg = cos((isRadians ? v[0] : TO_RAD(v[0])));\n    double sin_avg = sin((isRadians ? v[0] : TO_RAD(v[0])));\n\n    for (int i = 1; i < length; i++) {\n        cos_avg += cos((isRadians ? v[i] : TO_RAD(v[i])));\n        sin_avg += sin((isRadians ? v[i] : TO_RAD(v[i])));\n    }\n\n    double avg = atan2(sin_avg / (double) length, cos_avg / (double) length);\n\n    if (avg < 0) {\n        avg += 2 * M_PI;\n    }\n\n    if (!isRadians) {\n        avg = TO_DEG(avg);\n    }\n\n    return avg;\n}\n\n\ndouble ok_median_angle(const double* v, int length, bool isRadians) {\n    \n    gsl_vector* cos_avg = gsl_vector_alloc(length);\n    gsl_vector* sin_avg = gsl_vector_alloc(length);\n    \n\n    for (int i = 0; i < length; i++) {\n        cos_avg->data[i] = cos((isRadians ? v[i] : TO_RAD(v[i])));\n        sin_avg->data[i] = sin((isRadians ? v[i] : TO_RAD(v[i])));\n    }\n\n    gsl_sort_vector(cos_avg);\n    gsl_sort_vector(sin_avg);\n    \n    double avg = atan2(gsl_stats_median_from_sorted_data(sin_avg->data, 1, length), \n            gsl_stats_median_from_sorted_data(cos_avg->data, 1, length));\n\n    if (avg < 0) {\n        avg += 2 * M_PI;\n    }\n\n    if (!isRadians) {\n        avg = TO_DEG(avg);\n    }\n\n    gsl_vector_free(cos_avg);\n    gsl_vector_free(sin_avg);\n    return avg;\n}\n\ndouble ok_stddev_angle(const double* v, const int length, const bool isRadians)  {\n    if (length <= 1) {\n        return 0;\n    }\n\n    double avg = ok_average_angle(v, length, isRadians);\n    double avg_r = (isRadians ? avg : TO_RAD(avg));\n        \n    double dev = 0;\n\n    for (int i = 0; i < length; i++) {\n        double val = (isRadians ? v[i] : TO_RAD(v[i]));\n        val = fmod(val, 2 * M_PI);\n        if (val < 0)\n            val += 2 * M_PI;\n\n        double diff = MIN(RADRANGE(fabs(val - avg_r)), RADRANGE(fabs(val - avg_r + TWOPI)));\n        diff = MIN(diff, RADRANGE(fabs(val - avg_r - TWOPI)));\n        dev += diff * diff;\n     \n    }\n\n    dev = sqrt(1. / (double) (length) * dev);\n\n\n    if (! isRadians) {\n        dev = TO_DEG(dev);\n    }\n\n\n    return dev;\n}\n\n\ndouble ok_mad_angle(double* v, const int length, const double med, const bool isRadians)  {\n    if (length <= 1) {\n        return 0;\n    }\n\n    \n    double med_r = (isRadians ? med : TO_RAD(med));\n\n    for (int i = 0; i < length; i++) {\n        double val = (isRadians ? v[i] : TO_RAD(v[i]));\n        val = fmod(val, 2 * M_PI);\n        if (val < 0)\n            val += 2 * M_PI;\n\n        double diff = MIN(RADRANGE(fabs(val - med_r)), RADRANGE(fabs(val - med_r + TWOPI)));\n        diff = MIN(diff, RADRANGE(fabs(val - med_r - TWOPI)));\n        v[i] = fabs(diff);\n    }\n    \n    gsl_sort(v, 1, length);\n\n    double mad = gsl_stats_median_from_sorted_data(v, 1, length);\n    return (isRadians ? mad : TO_DEG(mad));\n}\n\ndouble ok_mad(double* v, const int length, const double med) {\n    \n    for (int i = 0; i < length; i++)\n        v[i] = fabs(v[i] - med);\n    \n    gsl_sort(v, 1, length);\n    return gsl_stats_median_from_sorted_data(v, 1, length);\n    \n}\n\n\n/*  */\nvoid ok_sort_small_matrix(gsl_matrix* matrix, const int column) {\n    const int nrows = matrix->size1;\n    int swaps = 1;\n    while (swaps > 0) {\n        swaps = 0;\n        for (int i = 1; i < nrows; i++) {\n            if (MGET(matrix, i, column) < MGET(matrix, i-1, column)) {\n                gsl_matrix_swap_rows(matrix, i, i-1);\n                swaps++;\n            }\n        }\n    }\n}\n\nvoid ok_bootstrap_matrix(const gsl_matrix* matrix, gsl_matrix* out, const int sortcol, gsl_rng* r) {\n    if (!out)\n        out = gsl_matrix_alloc(matrix->size1, matrix->size2);\n    \n    for (int i = 0; i < matrix->size1; i++) {\n        int k = gsl_rng_uniform_int(r, matrix->size1);\n        \n        for (int j = 0; j < matrix->size2; j++) {\n            MSET(out, i, j, MGET(matrix, k, j));\n        }\n    }\n    \n    if (sortcol >= 0)\n        ok_sort_matrix(out, sortcol);\n}\n\nvoid ok_bootstrap_matrix_mean(const gsl_matrix* matrix, int timecol, int valcol, gsl_matrix* out, gsl_rng* r) {\n    if (!out)\n        out = gsl_matrix_alloc(matrix->size1, matrix->size2);\n    \n    double mean = 0.;\n    //for (int i = 0; i < matrix->size1; i++)\n      //  mean += MGET(matrix, i, valcol);\n    //mean /= (double) matrix->size1;\n    \n    for (int i = 0; i < matrix->size1; i++) {\n        int k = gsl_rng_uniform_int(r, matrix->size1);\n        \n        for (int j = 0; j < matrix->size2; j++) {\n            if (j == timecol) \n                MSET(out, i, j, MGET(matrix, i, j));\n            else if (j == valcol) {\n                MSET(out, i, j, MGET(matrix, k, j) - mean);\n            } else \n                MSET(out, i, j, MGET(matrix, k, j));\n        }\n    }\n    \n}\n\n\n\nvoid ok_fprintf_matrix(gsl_matrix* matrix, FILE* file, const char* format) {\n    if (matrix == NULL) return;\n    file = (file == NULL ? stdout : file);\n    for (int i = 0; i < matrix->size1; i++) {\n        for (int j = 0; j < matrix->size2; j++)\n            fprintf(file, format, MGET(matrix, i, j));\n        fprintf(file, \"\\n\");\n    }\n}\n\nvoid ok_fprintf_matrix_int(gsl_matrix_int* matrix, FILE* file, const char* format) {\n    if (matrix == NULL) return;\n    file = (file == NULL ? stdout : file);\n    for (int i = 0; i < matrix->size1; i++) {\n        for (int j = 0; j < matrix->size2; j++)\n            fprintf(file, format, MIGET(matrix, i, j));\n        fprintf(file, \"\\n\");\n    }\n}\n\nbool ok_save_matrix(gsl_matrix* matrix, FILE* fid, const char* format) {\n    fid = (fid == NULL ? stdout : fid);\n    ok_fprintf_matrix(matrix, fid, format);\n    return true;\n}\n\nbool ok_save_matrix_bin(gsl_matrix* matrix, FILE* fid) {\n    fid = (fid == NULL ? stdout : fid);\n    gsl_matrix_fwrite(fid, matrix);\n    return true;\n}\n\n\nbool ok_save_buf(double** matrix, FILE* fid, const char* format, int rows, int cols) {\n    fid = (fid == NULL ? stdout : fid);\n    ok_fprintf_buf(matrix, fid, format, rows, cols);\n    return true;\n}\n\nbool ok_save_buf_bin(double** matrix, FILE* fid, int rows, int cols) {\n    fid = (fid == NULL ? stdout : fid);\n    for (int i = 0; i < rows; i++)\n        fwrite(matrix[i], sizeof(double), cols, fid);\n    return true;\n}\n\nvoid ok_fprintf_vector(gsl_vector* v, FILE* file, const char* format) {\n    if (v == NULL) return;\n    file = (file == NULL ? stdout : file);\n    for (int i = 0; i < v->size; i++) \n       fprintf(file, format, VGET(v, i));\n    fprintf(file, \"\\n\");\n}\n\nvoid ok_fprintf_vector_int(gsl_vector_int* v, FILE* file, const char* format) {\n    if (v == NULL) return;\n    file = (file == NULL ? stdout : file);\n    for (int i = 0; i < v->size; i++) \n       fprintf(file, format, VIGET(v, i));\n    fprintf(file, \"\\n\");\n}\n\nvoid ok_fprintf_buf(double** buf, FILE* file, const char* format, int rows, int columns) {\n    if (buf == NULL) return;\n    file = (file == NULL ? stdout : file);\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < columns; j++)\n            fprintf(file, format, buf[i][j]);\n        fprintf(file, \"\\n\");\n    }\n}\n\ngsl_vector* ok_vector_resize(gsl_vector* v, int len) {\n    gsl_vector* nv = gsl_vector_calloc(len);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(len, v->size); i++)\n                VSET(nv, i, VGET(v, i));\n        gsl_vector_free(v);\n    }\n    return nv;\n}\n\ngsl_vector* ok_vector_resize_pad(gsl_vector* v, int len, double pad) {\n    gsl_vector* nv = gsl_vector_calloc(len);\n    gsl_vector_set_all(v, pad);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(len, v->size); i++)\n                VSET(nv, i, VGET(v, i));\n        gsl_vector_free(v);\n    }\n    return nv;\n}\n\ngsl_vector_int* ok_vector_int_resize(gsl_vector_int* v, int len) {\n    gsl_vector_int* nv = gsl_vector_int_calloc(len);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(len, v->size); i++)\n                VISET(nv, i, VIGET(v, i));\n        gsl_vector_int_free(v);\n    }\n    return nv;\n}\n\ngsl_matrix* ok_matrix_resize(gsl_matrix* v, int rows, int cols) {\n    gsl_matrix* m = gsl_matrix_calloc(rows, cols);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(rows, MROWS(v)); i++)\n            for (int j = 0; j < MIN(cols, MCOLS(v)); j++)\n                MSET(m, i, j, MGET(v, i, j));\n        gsl_matrix_free(v);\n    }\n    return m;\n}\n\ngsl_matrix* ok_matrix_resize_pad(gsl_matrix* v, int rows, int cols, double pad) {\n    gsl_matrix* m = gsl_matrix_calloc(rows, cols);\n    gsl_matrix_set_all(m, pad);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(rows, MROWS(v)); i++)\n            for (int j = 0; j < MIN(cols, MCOLS(v)); j++)\n                MSET(m, i, j, MGET(v, i, j));\n        gsl_matrix_free(v);\n    }\n    return m;\n}\n\ngsl_matrix_int* ok_matrix_int_resize(gsl_matrix_int* v, int rows, int cols) {\n    gsl_matrix_int* m = gsl_matrix_int_calloc(rows, cols);\n    if (v != NULL) {\n        for (int i = 0; i < MIN(rows, MROWS(v)); i++)\n            for (int j = 0; j < MIN(cols, MCOLS(v)); j++)\n                MISET(m, i, j, MIGET(v, i, j));\n        gsl_matrix_int_free(v);\n    }\n    return m;\n}\n\ngsl_matrix* ok_read_table(FILE* fid) {\n\tconst int MAXLEN = 4000;\n\tchar line[MAXLEN];\n    \n    double JD = 0.0;\n    int tds_plFlag = 1;\n    \n\tfgets(line, MAXLEN, fid);\n\twhile (line[0] == '#') {\n        char tag[100] = {0};\n        sscanf(&line[1], \"%s =\", tag);\n        \n        if (strcmp(tag, \"JD\") == 0) {\n            sscanf(&line[1], \"%*s = %le\", &JD);\n        } else if (strcmp(tag, \"Planet\") == 0) {\n            sscanf(&line[1], \"%*s = %d\", &tds_plFlag);\n        }\n        \n\t\tfgets(line, MAXLEN, fid);\n    }\n\t\t\n\tint nrows = 1;\n        \n\twhile (fgets(line, MAXLEN, fid) != NULL) {\n\t\tif (line[0] != '#')\n\t\t\tnrows++;\n\t}\n\t\n\tfseek(fid, 0, SEEK_SET); \n\t\n\tgsl_matrix* ret = gsl_matrix_calloc(nrows, DATA_SIZE);\n        double v[6];\n\tint nr = 0;\n\twhile (fgets(line, MAXLEN, fid)!=NULL) {\n\t\tif (line[0] == '#')\n\t\t\tcontinue;\n        for (int j = 0; j < 6; j++)\n            v[j] = 0.;\n\n        sscanf(line, \"%le %le %le %le %le %le\",\n                &(v[0]), &(v[1]), &(v[2]),\n                &(v[3]), &(v[4]), &(v[5]));\n        for (int j = 0; j < 6; j++)\n            MSET(ret, nr, j, v[j]);\n\n\t\tnr++;\n\t}\n    \n    for (int i = 0; i < nrows; i++) {\n        MINC(ret, i, T_TIME, JD);\n        if (tds_plFlag > 0)\n            MSET(ret, i, T_TDS_PLANET, tds_plFlag);\n    }\n\t\n\treturn ret;\n}\n\ngsl_matrix* ok_matrix_copy(const gsl_matrix* src) {\n    if (src == NULL) return NULL;\n    gsl_matrix* m = gsl_matrix_alloc(MROWS(src), MCOLS(src));\n    MATRIX_MEMCPY(m, src);\n    return m;\n}\n\ngsl_matrix* ok_matrix_copy_sub(const gsl_matrix* src, int row1, int nrows, int col1, int ncols) {\n    if (src == NULL) return NULL;\n    gsl_matrix* m = gsl_matrix_alloc(nrows-row1, ncols-col1);\n    \n    for (int i = row1; i < nrows; i++)\n        for (int j = col1; j < ncols; j++)\n            MSET(m, i-row1, j-col1, MGET(src, i, j));\n    \n    return m;\n}\n\n\n\ngsl_matrix_int* ok_matrix_int_copy(const gsl_matrix_int* src) {\n    if (src == NULL) return NULL;\n    gsl_matrix_int* m = gsl_matrix_int_alloc(MROWS(src), MCOLS(src));\n    gsl_matrix_int_memcpy(m, src);\n    return m;\n}\ngsl_vector* ok_vector_copy(const gsl_vector* src) {\n    if (src == NULL) return NULL;\n    gsl_vector* v = gsl_vector_alloc(src->size);\n    gsl_vector_memcpy(v, src);\n    return v;\n}\ngsl_vector_int* ok_vector_int_copy(const gsl_vector_int* src) {\n    if (src == NULL) return NULL;\n    gsl_vector_int* v = gsl_vector_int_alloc(src->size);\n    gsl_vector_int_memcpy(v, src);\n    return v;\n}\n\nchar* ok_str_copy(const char* src) {\n    if (src == NULL) return NULL;\n    char* d = (char*) malloc(strlen(src) * sizeof(char*));\n    strcpy(d, src);\n    return d;\n}\n\nchar* ok_str_cat(const char* a1, const char* a2) {\n    if (a1 == NULL) return ok_str_copy(a2);\n    else if (a2 == NULL) return ok_str_copy(a1);\n    \n    char* a3 = (char*) malloc((strlen(a1) + strlen(a2) + 1) * sizeof(char));\n    strcpy(a3, a1);\n    strcat(a3, a2);\n    return a3;\n}\n\nint ok_bsearch(double* v, double val, int len) {\n    \n    int min = 0;\n    int max = len;\n    \n    while (max >= min) {\n        int mid = (int)(0.5 * (min + max));\n        if (v[mid] < val)\n            min = mid + 1;\n        else if (v[mid] > val)\n            max = mid - 1;\n        else if (v[mid] == val)\n            return mid;\n    }\n    \n    return min;\n}\n\nvoid ok_avevar(const double* v, int len, double* ave, double* var) {\n    *ave = 0.;\n    for (int i = 0; i < len; i++)\n        *ave += v[i];\n    *ave /= (double)len;\n    *var = 0.;\n    double sum2 = 0.;\n    \n    for (int i = 0; i < len; i++) {\n        *var += SQR(v[i] - *ave);\n        sum2 += v[i]-*ave;\n    }\n    \n    *var = (*var - sum2/(double) len) / (double)(len-1);\n}\n\nint _ok_compare(void* col, const void* row1, const void* row2) {\n    int c = *((int*)col);\n    double* d1 = (double*) row1;\n    double* d2 = (double*) row2;\n    \n    if (d1[c] < d2[c])\n        return -1;\n    else if (d1[c] > d2[c]) \n        return 1;\n    else\n        return 0;\n}\n\nvoid ok_sort_matrix(gsl_matrix* matrix, const int column) {\n    ok_qsort_r(matrix->data, matrix->size1, matrix->size2 * sizeof(double), (void*)&column, _ok_compare);\n}\n\nstatic int _ok_rcompare(void* col, const void* row1, const void* row2) {\n    int c = *((int*)col);\n    double* d1 = (double*) row1;\n    double* d2 = (double*) row2;\n    \n    if (d1[c] < d2[c])\n        return 1;\n    else if (d1[c] > d2[c]) \n        return -1;\n    else\n        return 0;\n}\n\nvoid ok_rsort_matrix(gsl_matrix* matrix, const int column) {\n    ok_qsort_r(matrix->data, matrix->size1, matrix->size2 * sizeof(double*), (void*)&column, _ok_compare);\n}\n\n\n\ngsl_matrix* ok_matrix_filter(gsl_matrix* matrix, const int column, const double filter) {\n    int rows = 0;\n    for (int i = 0; i < matrix->size1; i++)\n        if (fabs(MGET(matrix, i, column) - filter) < 1e-10)\n            rows++;\n    gsl_matrix* ret = gsl_matrix_alloc(rows, matrix->size2);\n    \n    rows = 0;\n    for (int i = 0; i < matrix->size1; i++)\n        if (fabs(MGET(matrix, i, column) - filter) < 1e-10) {\n            rows++;\n            for (int j = 0; j < matrix->size2; j++)\n                MSET(ret, rows, j, MGET(matrix, i, j));\n        }\n    \n    return ret;\n    \n}\n\ngsl_matrix* ok_matrix_buf_filter(double** matrix, const int rows, const int columns, const int column, const double filter) {\n    int nrows = 0;\n    for (int i = 0; i < rows; i++) \n        if (fabs(matrix[i][column] - filter) < 1e-10) \n            nrows++;\n \n    gsl_matrix* ret = gsl_matrix_alloc(nrows, columns);\n    \n    nrows = 0;\n    for (int i = 0; i < rows; i++) {\n        if (fabs(matrix[i][column] - filter) < 1e-10) {\n            for (int j = 0; j < columns; j++)\n                MSET(ret, nrows, j, matrix[i][j]);\n            nrows++;\n        }\n    }\n    return ret;\n    \n}\n\n// These functions are defined to avoid \n// emscripten's scanf bug (does not recognize \"nan\" as \n// a valid number)\nvoid ok_fscanf_double(FILE* file, double* out) {\n#ifndef JAVASCRIPT\n    fscanf(file, \"%le\", out);\n#else\n    char token[2000];\n    fscanf(file, \"%s\", token);\n    if (strcmp(token, \"nan\") == 0)\n        *out = INVALID_NUMBER;\n    else\n        *out = atof(token);\n#endif\n}\n\nvoid ok_fscanf_int(FILE* file, int* out) {\n#ifndef JAVASCRIPT\n    fscanf(file, \"%d\", out);\n#else\n    char token[2000];\n    fscanf(file, \"%s\", token);\n    if (strcmp(token, \"nan\") == 0)\n        *out = INVALID_NUMBER;\n    else\n        *out = atoi(token);\n#endif\n}\n\nvoid ok_fscanf_matrix(gsl_matrix* matrix, FILE* file) {\n    \n    double* data = matrix->data;\n    \n    for (int i = 0; i < matrix->size1; i++)\n        for (int j = 0; j < matrix->size2; j++) {\n            ok_fscanf_double(file, &(data[i*matrix->size2 + j]));\n        }\n}\n\nvoid ok_fscanf_matrix_int(gsl_matrix_int* matrix, FILE* file) {\n    int* data = matrix->data;\n    for (int i = 0; i < matrix->size1; i++)\n        for (int j = 0; j < matrix->size2; j++)\n            ok_fscanf_int(file, &(data[i*matrix->size2 + j]));\n}\nvoid ok_fscanf_vector(gsl_vector* vector, FILE* file) {\n    double* data = vector->data;\n    for (int i = 0; i < vector->size; i++)\n        ok_fscanf_double(file, &(data[i]));\n}\nvoid ok_fscanf_vector_int(gsl_vector_int* vector, FILE* file) {\n    int* data = vector->data;\n    for (int i = 0; i < vector->size; i++)\n        ok_fscanf_int(file, &(data[i]));\n}\n\n\ngsl_matrix* ok_buf_to_matrix(double** buf, int rows, int cols) {\n    gsl_matrix* m = gsl_matrix_alloc(rows, cols);\n    for (int i = 0; i < rows; i++)\n        for (int j = 0; j < cols; j++)\n            MSET(m, i, j, buf[i][j]);\n    return m;\n}\n\ngsl_matrix* ok_matrix_remove_row(gsl_matrix* m, int row) {\n    gsl_matrix* n = gsl_matrix_alloc(m->size1-1, m->size2);\n    \n    for (int i = 0; i < m->size1; i++)\n        for (int j = 0; j < m->size2; j++) {\n            if (i < row)\n                MSET(n, i, j, MGET(m, i, j));\n            else if (i > row)\n                MSET(n, i - 1, j, MGET(m, i, j));\n        }\n    \n    return n;\n}\ngsl_matrix* ok_matrix_remove_column(gsl_matrix* m, int col) {\n    gsl_matrix* n = gsl_matrix_alloc(m->size1-1, m->size2);\n    \n    for (int i = 0; i < m->size1; i++)\n        for (int j = 0; j < m->size2; j++) {\n            if (j < col)\n                MSET(n, i, j, MGET(m, i, j));\n            else if (i > col)\n                MSET(n, i, j-1, MGET(m, i, j));\n        }\n    \n    return n;\n}\n\ngsl_matrix_int* ok_matrix_int_remove_row(gsl_matrix_int* m, int row) {\n    gsl_matrix_int* n = gsl_matrix_int_alloc(m->size1-1, m->size2);\n    \n    for (int i = 0; i < m->size1; i++)\n        for (int j = 0; j < m->size2; j++) {\n            if (i < row)\n                MISET(n, i, j, MIGET(m, i, j));\n            else if (i > row)\n                MISET(n, i - 1, j, MIGET(m, i, j));\n        }\n    \n    return n;\n}\n\ngsl_matrix_int* ok_matrix_int_remove_column(gsl_matrix_int* m, int col) {\n    gsl_matrix_int* n = gsl_matrix_int_alloc(m->size1-1, m->size2);\n    \n    for (int i = 0; i < m->size1; i++)\n        for (int j = 0; j < m->size2; j++) {\n            if (j < col)\n                MISET(n, i, j, MIGET(m, i, j));\n            else if (i > col)\n                MISET(n, i, j-1, MIGET(m, i, j));\n        }\n    \n    return n;\n}\n\n\ngsl_vector* ok_vector_remove(gsl_vector* m, int idx) {\n    gsl_vector* n = gsl_vector_alloc(m->size);\n    \n    for (int i = 0; i < m->size; i++) {\n        if (i < idx)\n            VSET(n, i, VGET(m, i));\n        else if (i > idx)\n            VSET(n, i - 1, VGET(m, i));\n    }\n    \n    return n;\n}\n\ngsl_vector_int* ok_vector_int_remove(gsl_vector_int* m, int idx) {\n    gsl_vector_int* n = gsl_vector_int_alloc(m->size);\n    \n    for (int i = 0; i < m->size; i++) {\n        if (i < idx)\n            VISET(n, i, VIGET(m, i));\n        else if (i > idx)\n            VISET(n, i - 1, VIGET(m, i));\n    }\n    \n    return n;\n}\n\nvoid ok_matrix_fill(gsl_matrix* src, gsl_matrix* dest) {\n    \n    for (int i = 0; i < MIN(MROWS(src), MROWS(dest)); i++)\n        for (int j = 0; j < MIN(MCOLS(src), MCOLS(dest)); j++)\n            MSET(dest, i, j, MGET(src, i, j));\n    \n}\n\nvoid ok_parcall(const ok_icallback fnc, const int n) {\n    #pragma omp parallel for\n    for (int i = 0; i < n; i++) {\n        fnc(i);\n    }\n}\n\ngsl_matrix* ok_ptr_to_matrix(double* v, unsigned int rows, unsigned int cols) {\n    gsl_matrix* m = gsl_matrix_alloc(rows, cols);\n    memcpy(m->data, v, sizeof(double)*rows*cols);\n    return m;\n}\n\ngsl_vector* ok_ptr_to_vector(double* v, unsigned int len) {\n    gsl_vector* m = gsl_vector_alloc(len);\n    memcpy(m->data, v, sizeof(double)*len);\n    return m;\n}\n\ngsl_matrix_int* ok_iptr_to_imatrix(int* v, unsigned int rows, unsigned int cols) {\n    gsl_matrix_int* m = gsl_matrix_int_alloc(rows, cols);\n    memcpy(m->data, v, sizeof(int)*rows*cols);\n    return m;\n}\ngsl_vector_int* ok_iptr_to_ivector(int* v, unsigned int len) {\n    gsl_vector_int* m = gsl_vector_int_alloc(len);\n    memcpy(m->data, v, sizeof(int)*len);\n    return m;\n}\n\nvoid ok_block_to_ptr(void* vv, double* out) {\n    gsl_block* v = (gsl_block*) vv;\n    for (int i = 0; i < v->size; i++)\n        out[i] = v->data[i];\n}\n\nvoid ok_buf_to_ptr(double** v,  unsigned int rows, unsigned int cols, double* out) {\n    int k = 0;\n    for (int i = 0; i < rows; i++) {\n        double* p = v[i];\n        for (int j = 0; j < cols; j++) {\n            out[k] = p[j];\n            k++;\n        }\n    }\n}\n\n\nvoid ok_buf_add_to_col(double** buf, double* col_vector, int col, int nrows) {\n    for (int i = 0; i < nrows; i++)\n        buf[i][col] += col_vector[i];\n}\n\nvoid ok_buf_col(double** buf, double* vector, int col, int nrows) {\n    for (int i = 0; i < nrows; i++)\n        vector[i] = buf[i][col];\n}\n\nunsigned int ok_vector_len(void* v) {\n    return ((gsl_vector*) v)->size;\n}\nunsigned int ok_matrix_rows(void* v) {\n    return ((gsl_matrix*) v)->size1;\n}\nunsigned int ok_matrix_cols(void* v) {\n    return ((gsl_matrix*) v)->size2;\n}\n\nunsigned int ok_vector_len(void* v);\nunsigned int ok_matrix_rows(void* v);\nunsigned int ok_matrix_cols(void* v);\n\ngsl_block* ok_vector_block(void* v) {\n    return ((gsl_vector*) v)->block;\n}\ngsl_block* ok_matrix_block(void* v) {\n    return ((gsl_matrix*) v)->block;\n}\n\nbool ok_file_readable(char* fn) {\n    FILE* fid = fopen(fn, \"r\");\n    if (fid == NULL)\n        return false;\n    fclose(fid);\n    return true;\n}\n\nok_rivector* ok_rivector_alloc(const int max_length) {\n    ok_rivector* v = (ok_rivector*) malloc(sizeof(ok_rivector));\n    v->v = (int*) malloc(max_length*sizeof(int));\n    v->max_length = max_length;\n    v->length = 0;\n    return v;\n}\n\nvoid ok_matrix_column_range(gsl_matrix* m, int col, double* min, double* max) {\n    *min = MGET(m, 0, col);\n    *max = MGET(m, 0, col);\n    \n    for (int i = 1; i < MROWS(m); i++) {\n        *min = MIN(*min, MGET(m, i, col));\n        *max = MAX(*max, MGET(m, i, col));\n    }\n};\n\n// Re-sample curve based on a triangle area criterion.\n// Adapted from http://ariel.chronotext.org/dd/defigueiredo93adaptive.pdf\nstatic inline double _ok_fastrand(unsigned int* seed) {\n  *seed = (214013* *seed+2531011);\n  *seed = (*seed>>16)&0x7FFF;\n  return ((double) *seed / (1.+(double)RAND_MAX));\n}\n\nstatic void _ok_reduce_curve(gsl_matrix* curve, const int timecol,\n        const int valcol, const double area_tol, ok_rivector* list, int a,\n        int b, unsigned int* seed, const bool log) {\n    \n    if (b - a <= 1)\n        return;\n    \n    int n = floor((_ok_fastrand(seed) * (0.55 - 0.45) + 0.45) * (b-a) + a);\n    \n    assert(n >= 1);\n    assert(n < MROWS(curve));\n    double x1, x2;\n    \n    if (!log) {\n        x1 = MGET(curve, a, timecol) - MGET(curve, n, timecol);\n        x2 = MGET(curve, b, timecol) - MGET(curve, n, timecol);\n    } else {\n        x1 = log10(MGET(curve, a, timecol)) - log10(MGET(curve, n, timecol));\n        x2 = log10(MGET(curve, b, timecol)) - log10(MGET(curve, n, timecol));\n    };\n    \n    double y1 = MGET(curve, a, valcol) - MGET(curve, n, valcol);\n    double y2 = MGET(curve, b, valcol) - MGET(curve, n, valcol);\n    double area = fabs(x1*y2 - x2*y1);\n        \n    if (area > area_tol) {\n        if (a != n && b != n)\n            ok_rivector_push(list, n);\n        \n        _ok_reduce_curve(curve, timecol, valcol, area_tol, list,\n                a, n, seed, log);\n        _ok_reduce_curve(curve, timecol, valcol, area_tol, list,\n                n, b, seed, log);\n    } else {\n        ok_rivector_push(list, n);\n    }\n}\n\nstatic int _ok_rsort_peaks(void* curve_v, const void* a_v, const void* b_v) {\n    gsl_matrix* curve = (gsl_matrix*) ((ok_tagdata*) curve_v)->data;\n    const int col = (int) ((ok_tagdata*) curve_v)->tag[0];\n    \n    const int a = *((const int*) a_v);\n    const int b = *((const int*) b_v);\n    return MGET(curve, b, col) - MGET(curve, a, col);\n}\n/**\n * Resamples a curve (represented by two columns of the matrix \"curve\",\n * \"xcol\" and \"ycol\" -- the x and y coordinates, respectively) \n * in order to obtain a curve that retains its \"points of interest\"\n * (e.g., peaks, points where curvature is high, etc.) while being\n * represented with far fewer samplings. The sampling is then denser\n * where the curve changes rapidly, and sparser where the curve is\n * changing more smoothly.\n * \n * @param curve Matrix with at least two columns\n * @param xcol \"X\" column of the curve\n * @param ycol \"Y\" column of the curve\n * @param peaks_frac Include at least a fraction peaks_frac of all the peaks \n * in the curve. A peak is a point where Y[i] > Y[i-1] && Y[i] > Y[i+1]. The\n * regular algorithm can miss very steep or narrow peaks, so my algorithm\n * attempts to prevent this. \n * @param target_points A target amount of points to sample the curve with. The \n * algorithm will only *try* to meet this target.\n * @param target_tolerance A target tolerance (i.e. the algorithm will try\n * to return target_points +- target_tolerance amount of points)\n * @param start_tolerance An estimated area tolerance; start with a small number\n * (e.g. 1e-3). The routine will return a new estimate for this number \n * that produces the target number of points. A smaller tolerance\n * yields more points (finer sampling); a tolerance of 0 would\n * return the original curve.\n * @param max_steps The maximum number of iterations to converge\n * @param log_x whether the x-axis is log (e.g. for periodograms)\n * @return A new matrix with two columns containing the resampled curve.\n * (The caller is responsible with freeing both the old and the new matrix.)\n */\n\ngsl_matrix* ok_resample_curve(gsl_matrix* curve, const int xcol, const int ycol, const double peaks_frac, const int target_points,\n    const int target_tolerance, double* start_tolerance, const int max_steps, const bool log_x) {\n    const int max_points = MROWS(curve);\n    \n    ok_rivector* peaks = ok_rivector_alloc(max_points);\n    ok_rivector* list = ok_rivector_alloc(max_points);\n    \n    for (int i = 1; i < MROWS(curve)-1; i++)\n        if (MGET(curve, i, ycol) > MGET(curve, i-1, ycol) &&\n                MGET(curve, i, ycol) > MGET(curve, i+1, ycol)) {\n            ok_rivector_push(peaks, i);\n        }\n    \n    ok_tagdata t_curve;\n    t_curve.data = curve;\n    t_curve.tag[0] = ycol;\n    \n    ok_qsort_r(ok_rivector_data(peaks), ok_rivector_length(peaks),\n            ok_rivector_sizeof(peaks), &t_curve, _ok_rsort_peaks);\n    \n    int top_peaks_count = ceil(peaks_frac * ok_rivector_length(peaks));\n    \n    ok_rivector_reset_to(peaks, top_peaks_count);\n    ok_rivector_push(peaks, 0);\n    ok_rivector_push(peaks, MROWS(curve)-1);\n    ok_rivector_sort(peaks);\n    \n    double xmin, xmax, ymin, ymax;\n    xmin = MGET(curve, 0, xcol);\n    xmax = MGET(curve, MROWS(curve)-1, xcol);\n    ok_matrix_column_range(curve, ycol, &ymin, &ymax);\n    if (log_x) {\n        xmin = log10(xmin);\n        xmax = log10(xmax);\n    }\n        \n    const double area = fabs(xmax-xmin) * fabs(ymax - ymin);\n    double tol = (start_tolerance == NULL ? 1e-3 : *start_tolerance);\n    double area_tol = area * tol;\n    \n    unsigned int seed = time(NULL);\n    \n    \n    ok_rivector_append(list, peaks);\n    \n    const int len = ok_rivector_length(peaks);\n    \n    for (int i = 1; i < len; i++) {\n        _ok_reduce_curve(curve, xcol, ycol, area_tol,\n            list, list->v[i-1], list->v[i], &seed,\n                log_x);\n    }\n    \n    int steps = max_steps;\n    if (steps > 0 && len < 0.9 * max_steps) {\n        double x0 = tol;\n        double y0 = list->length;\n        \n        double x1 = *start_tolerance * 0.1;\n        double y1 = -1;\n        \n        while (steps > 0) {\n            area_tol = x1 * area;\n            ok_rivector_reset_to(list, len);\n            for (int i = 1; i < len; i++) {\n                _ok_reduce_curve(curve, xcol, ycol, area_tol,\n                    list, list->v[i-1], list->v[i], &seed,\n                        log_x);\n            }\n            \n            y1 = list->length;\n            \n            double xn = x1 - (y1 - target_points) * (x1-x0)/((y1 - target_points) - (y0 - target_points));\n            if (xn < 0)\n                xn = 0.25 * MIN(x0, x1);\n            \n            x0 = x1;\n            y0 = y1;\n            x1 = xn;\n            \n            if (fabs(y1 - target_points) < target_tolerance)\n                break;\n            \n            steps--;\n        }   \n        \n        *start_tolerance = x1;\n    } \n    \n    ok_rivector_sort(list);\n    \n    gsl_matrix* new_curve = gsl_matrix_alloc(ok_rivector_length(list),\n            MCOLS(curve));\n    \n    ok_rivector_foreach_i(list, listidx, row) {\n        for (int j = 0; j < MCOLS(curve); j++)\n            MSET(new_curve, row, j, MGET(curve, listidx, j));\n    }\n    \n    ok_rivector_free(peaks);\n    ok_rivector_free(list);\n    return new_curve;\n}"]}